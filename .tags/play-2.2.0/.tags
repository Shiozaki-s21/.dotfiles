!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCEPT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCEPT = "Accept"$/;"	C
ACCEPTED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCEPTED = 202$/;"	C
ACCEPT_CHARSET	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCEPT_CHARSET = "Accept-Charset"$/;"	C
ACCEPT_ENCODING	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCEPT_ENCODING = "Accept-Encoding"$/;"	C
ACCEPT_LANGUAGE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCEPT_LANGUAGE = "Accept-Language"$/;"	C
ACCEPT_RANGES	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCEPT_RANGES = "Accept-Ranges"$/;"	C
ACCESS_CONTROL_ALLOW_CREDENTIALS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCESS_CONTROL_ALLOW_CREDENTIALS = "Access-Control-Allow-Credentials"$/;"	C
ACCESS_CONTROL_ALLOW_HEADERS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCESS_CONTROL_ALLOW_HEADERS = "Access-Control-Allow-Headers"$/;"	C
ACCESS_CONTROL_ALLOW_METHODS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCESS_CONTROL_ALLOW_METHODS = "Access-Control-Allow-Methods"$/;"	C
ACCESS_CONTROL_ALLOW_ORIGIN	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCESS_CONTROL_ALLOW_ORIGIN = "Access-Control-Allow-Origin"$/;"	C
ACCESS_CONTROL_EXPOSE_HEADERS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCESS_CONTROL_EXPOSE_HEADERS = "Access-Control-Expose-Headers"$/;"	C
ACCESS_CONTROL_MAX_AGE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCESS_CONTROL_MAX_AGE = "Access-Control-Max-Age"$/;"	C
ACCESS_CONTROL_REQUEST_HEADERS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCESS_CONTROL_REQUEST_HEADERS = "Access-Control-Request-Headers"$/;"	C
ACCESS_CONTROL_REQUEST_METHOD	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ACCESS_CONTROL_REQUEST_METHOD = "Access-Control-Request-Method"$/;"	C
AGE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val AGE = "Age"$/;"	C
ALLOW	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ALLOW = "Allow"$/;"	C
AUTHORIZATION	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val AUTHORIZATION = "Authorization"$/;"	C
AbsolutePath	framework/src/play/src/main/scala/play/api/controllers/ExternalAssets.scala	/^  val AbsolutePath = """^(\/|[a-zA-Z]:\\\\).*""".r$/;"	C
AcceptExtractors	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^trait AcceptExtractors {$/;"	t
Accepted	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val Accepted = new Status(ACCEPTED)$/;"	C
Action	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^trait Action[A] extends EssentialAction {$/;"	t
ActionBuilder	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^trait ActionBuilder[R[_]] {$/;"	t
AkkaPlugin	framework/src/play/src/main/scala/play/api/libs/concurrent/Akka.scala	/^class AkkaPlugin(app: Application) extends Plugin {$/;"	c
Appendable	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^    type Appendable = T$/;"	T
Appendable	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Appendable[T] {$/;"	t
Application	framework/src/play/src/main/scala/play/api/Application.scala	/^trait Application {$/;"	t
ApplicationProvider	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^trait ApplicationProvider {$/;"	t
AssetsBuilder	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^class AssetsBuilder extends Controller {$/;"	c
AssetsCompiler	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^  def AssetsCompiler(name: String,$/;"	m
Async	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def Async(promise: Future[Result]) = AsyncResult(promise)$/;"	m
Authenticated	framework/src/play/src/main/scala/play/api/mvc/Security.scala	/^  def Authenticated(action: String => EssentialAction): EssentialAction = Authenticated($/;"	m
Authenticated	framework/src/play/src/main/scala/play/api/mvc/Security.scala	/^  def Authenticated[A]($/;"	m
AuthenticatedBuilder	framework/src/play/src/main/scala/play/api/mvc/Security.scala	/^  class AuthenticatedBuilder[U](userinfo: RequestHeader => Option[U],$/;"	c
AuthenticatedRequest	framework/src/play/src/main/scala/play/api/mvc/Security.scala	/^  class AuthenticatedRequest[A, U](val user: U, request: Request[A]) extends WrappedRequest[A](request)$/;"	c
AxAttribute	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    val AxAttribute = """^openid\\.([^.]+\\.value\\.([^.]+(\\.\\d+)?))$""".r$/;"	C
BAD_GATEWAY	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val BAD_GATEWAY = 502$/;"	C
BAD_REQUEST	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val BAD_REQUEST = 400$/;"	C
BINARY	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val BINARY = "application\/octet-stream"$/;"	C
BINARY	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val BINARY = MimeTypes.BINARY$/;"	C
BODY_CONTENT	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  type BODY_CONTENT = A$/;"	T
BODY_CONTENT	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  type BODY_CONTENT = A$/;"	T
BadGateway	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val BadGateway = new Status(BAD_GATEWAY)$/;"	C
BadRequest	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val BadRequest = new Status(BAD_REQUEST)$/;"	C
BodyParser	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^trait BodyParser[+A] extends Function1[RequestHeader, Iteratee[Array[Byte], Either[SimpleResult, A]]] {$/;"	t
BodyParsers	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^trait BodyParsers {$/;"	t
CACHE_CONTROL	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CACHE_CONTROL = "Cache-Control"$/;"	C
CHUNKED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CHUNKED = "chunked"$/;"	C
CONFLICT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONFLICT = 409$/;"	C
CONNECTION	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONNECTION = "Connection"$/;"	C
CONTENT_DISPOSITION	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTENT_DISPOSITION = "Content-Disposition"$/;"	C
CONTENT_ENCODING	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTENT_ENCODING = "Content-Encoding"$/;"	C
CONTENT_LANGUAGE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTENT_LANGUAGE = "Content-Language"$/;"	C
CONTENT_LENGTH	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTENT_LENGTH = "Content-Length"$/;"	C
CONTENT_LOCATION	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTENT_LOCATION = "Content-Location"$/;"	C
CONTENT_MD5	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTENT_MD5 = "Content-MD5"$/;"	C
CONTENT_RANGE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTENT_RANGE = "Content-Range"$/;"	C
CONTENT_TRANSFER_ENCODING	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTENT_TRANSFER_ENCODING = "Content-Transfer-Encoding"$/;"	C
CONTENT_TYPE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTENT_TYPE = "Content-Type"$/;"	C
CONTINUE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CONTINUE = 100$/;"	C
COOKIE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val COOKIE = "Cookie"$/;"	C
COOKIE_NAME	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def COOKIE_NAME: String$/;"	m
COOKIE_NAME	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    val COOKIE_NAME = Play.maybeApplication.flatMap(_.configuration.getString("flash.cookieName")).getOrElse("PLAY_FLASH")$/;"	C
COOKIE_NAME	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    val COOKIE_NAME = Play.maybeApplication.flatMap(_.configuration.getString("session.cookieName")).getOrElse("PLAY_SESSION")$/;"	C
CREATED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CREATED = 201$/;"	C
CRLF	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^            val CRLF = "\\r\\n".getBytes$/;"	C
CRLFCRLF	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^            val CRLFCRLF = CRLF ++ CRLF$/;"	C
CSS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  def CSS(implicit codec: Codec) = withCharset(MimeTypes.CSS)$/;"	m
CSS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val CSS = "text\/css"$/;"	C
ChannelStatus	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^  class ChannelStatus(val closeConnection: Boolean, val lastSubsequence: Int)$/;"	c
ChunkedResult	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^class ChunkedResult[A](override val header: ResponseHeader, val chunks: Iteratee[A, Unit] => _)(implicit val writeable: Writeable[A]) extends SimpleResult($/;"	c
ClassLoaderCreator	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  type ClassLoaderCreator = (String, Array[URL], ClassLoader) => ClassLoader$/;"	T
Close	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val Close = Value$/;"	C
CoffeescriptCompiler	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^  val CoffeescriptCompiler = AssetsCompiler("coffeescript",$/;"	C
ColoredLevel	framework/src/play/src/main/scala/play/api/Logger.scala	/^  class ColoredLevel extends ClassicConverter {$/;"	c
Column	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait Column[A] extends ((Any, MetaDataItem) => MayErr[SqlRequestError, A])$/;"	t
Conflict	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val Conflict = new Status(CONFLICT)$/;"	C
Connection	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  type Connection = Value$/;"	T
Console	framework/src/console/src/main/scala/Console.scala	/^class Console extends xsbti.AppMain {$/;"	c
Constraints	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^trait Constraints {$/;"	t
Content	framework/src/play/src/main/scala/play/api/mvc/Content.scala	/^trait Content {$/;"	t
ContentTypes	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^trait ContentTypes {$/;"	t
ContinuousState	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val ContinuousState = AttributeKey[WatchState]("watch state", "Internal: tracks state for continuous execution.")$/;"	C
Controller	framework/src/play/src/main/scala/play/api/mvc/Controller.scala	/^trait Controller extends Results with BodyParsers with HttpProtocol with Status with HeaderNames with ContentTypes with RequestExtractors with Rendering {$/;"	t
Cookie	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^trait Cookie {$/;"	t
CookieBaker	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^  trait CookieBaker[T <: AnyRef] {$/;"	t
Cookies	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^  trait Cookies extends Traversable[Cookie] {$/;"	t
Created	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val Created = new Status(CREATED)$/;"	C
DATE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val DATE = "Date"$/;"	C
DEFAULT_MAX_TEXT_LENGTH	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def DEFAULT_MAX_TEXT_LENGTH: Int = Play.maybeApplication.flatMap { app =>$/;"	m
DELETE	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  val DELETE = "DELETE"$/;"	C
DefaultApplication	framework/src/play/src/main/scala/play/api/Application.scala	/^class DefaultApplication($/;"	c
DefaultAwaitTimeout	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^trait DefaultAwaitTimeout {$/;"	t
DefaultContentTypeOfs	framework/src/play/src/main/scala/play/api/http/ContentTypeOf.scala	/^trait DefaultContentTypeOfs {$/;"	t
DefaultWriteables	framework/src/play/src/main/scala/play/api/http/Writeable.scala	/^trait DefaultWriteables extends LowPriorityWriteables {$/;"	t
Dev	framework/src/play/src/main/scala/play/api/Play.scala	/^  val Dev, Test, Prod = Value$/;"	C
DevSettings	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^trait DevSettings {$/;"	t
DnName	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^  val DnName = "CN=localhost, OU=Unit Testing, O=Mavericks, L=Moon Base 1, ST=Cyberspace, C=CY"$/;"	C
DocsApplication	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^  val DocsApplication = config("docs") hide$/;"	C
ETAG	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ETAG = "Etag"$/;"	C
EVENT_STREAM	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  def EVENT_STREAM(implicit codec: Codec) = withCharset(MimeTypes.EVENT_STREAM)$/;"	m
EVENT_STREAM	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val EVENT_STREAM = "text\/event-stream"$/;"	C
EXPECT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val EXPECT = "Expect"$/;"	C
EXPECTATION_FAILED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val EXPECTATION_FAILED = 417$/;"	C
EXPIRES	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val EXPIRES = "Expires"$/;"	C
EitherToFEither	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^class EitherToFEither[A, B]() extends play.libs.F.Function[Either[A, B], play.libs.F.Either[A, B]] {$/;"	c
Elem	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    type Elem = Char$/;"	T
EntityTooLarge	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val EntityTooLarge = new Status(REQUEST_ENTITY_TOO_LARGE)$/;"	C
EssentialAction	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^trait EssentialAction extends (RequestHeader => Iteratee[Array[Byte], SimpleResult]) with Handler {$/;"	t
EssentialFilter	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^trait EssentialFilter {$/;"	t
ExpectationFailed	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val ExpectationFailed = new Status(EXPECTATION_FAILED)$/;"	C
FAILED_DEPENDENCY	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val FAILED_DEPENDENCY = 424$/;"	C
FIREFOX	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  val FIREFOX = classOf[FirefoxDriver]$/;"	C
FORBIDDEN	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val FORBIDDEN = 403$/;"	C
FORM	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  def FORM(implicit codec: Codec) = withCharset(MimeTypes.FORM)$/;"	m
FORM	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val FORM = "application\/x-www-form-urlencoded"$/;"	C
FOUND	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val FOUND = 302$/;"	C
FRAMES_TYPE	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^  type FRAMES_TYPE = A$/;"	T
FROM	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val FROM = "From"$/;"	C
FailedDependency	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val FailedDependency = new Status(FAILED_DEPENDENCY)$/;"	C
FieldConstructor	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^  trait FieldConstructor extends NotNull {$/;"	t
Filter	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^trait Filter extends EssentialFilter {$/;"	t
Forbidden	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val Forbidden = new Status(FORBIDDEN)$/;"	C
Format	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Format[T <: Appendable[T]] {$/;"	t
Formatter	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^trait Formatter[T] {$/;"	t
Found	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def Found(url: String): SimpleResult = Redirect(url, FOUND)$/;"	m
FrameFormatter	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^  trait FrameFormatter[A] {$/;"	t
FutureAwaits	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^trait FutureAwaits {$/;"	t
GATEWAY_TIMEOUT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val GATEWAY_TIMEOUT = 504$/;"	C
GET	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  val GET = "GET"$/;"	C
GONE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val GONE = 410$/;"	C
GatewayTimeout	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val GatewayTimeout = new Status(GATEWAY_TIMEOUT)$/;"	C
GeneratedKeyStore	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^  val GeneratedKeyStore = "conf\/generated.keystore"$/;"	C
GlobalPlugin	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^class GlobalPlugin(app: Application) extends Plugin {$/;"	c
GlobalSettings	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^trait GlobalSettings {$/;"	t
Gone	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val Gone = new Status(GONE)$/;"	C
HEAD	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  val HEAD = "HEAD"$/;"	C
HOST	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val HOST = "Host"$/;"	C
HTML	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  def HTML(implicit codec: Codec) = withCharset(MimeTypes.HTML)$/;"	m
HTML	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val HTML = "text\/html"$/;"	C
HTMLUNIT	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  val HTMLUNIT = classOf[HtmlUnitDriver]$/;"	C
HTTP	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  val HTTP = port.map { port =>$/;"	C
HTTPS	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  val HTTPS = sslPort.map { port =>$/;"	C
HTTP_1_0	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val HTTP_1_0 = "HTTP\/1.0"$/;"	C
HTTP_1_1	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val HTTP_1_1 = "HTTP\/1.1"$/;"	C
HTTP_VERSION_NOT_SUPPORTED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val HTTP_VERSION_NOT_SUPPORTED = 505$/;"	C
HandleWebCommandSupport	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^trait HandleWebCommandSupport {$/;"	t
Handler	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^trait Handler$/;"	t
HandlerInvoker	framework/src/play/src/main/scala/play/core/router/Router.scala	/^  trait HandlerInvoker[T] {$/;"	t
HandlerRef	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^class HandlerRef[T](callValue: => T, handlerDef: play.core.Router.HandlerDef)(implicit handlerInvoker: play.core.Router.HandlerInvoker[T]) extends play.mvc.HandlerRef {$/;"	c
HeaderNames	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^trait HeaderNames {$/;"	t
Headers	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^  trait Headers {$/;"	t
Html	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^    val Html = Accepting(MimeTypes.HTML)$/;"	C
Html	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^class Html(buffer: StringBuilder) extends BufferedContent[Html](buffer) {$/;"	c
HtmlResolver	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  class HtmlResolver extends Resolver {$/;"	c
HttpExecutionContext	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^class HttpExecutionContext(contextClassLoader: ClassLoader, httpContext: Http.Context, delegate: ExecutionContext) extends ExecutionContextExecutor {$/;"	c
HttpProtocol	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^trait HttpProtocol {$/;"	t
HttpVersionNotSupported	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val HttpVersionNotSupported = new Status(HTTP_VERSION_NOT_SUPPORTED)$/;"	C
IF_MATCH	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val IF_MATCH = "If-Match"$/;"	C
IF_MODIFIED_SINCE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val IF_MODIFIED_SINCE = "If-Modified-Since"$/;"	C
IF_NONE_MATCH	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val IF_NONE_MATCH = "If-None-Match"$/;"	C
IF_RANGE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val IF_RANGE = "If-Range"$/;"	C
IF_UNMODIFIED_SINCE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val IF_UNMODIFIED_SINCE = "If-Unmodified-Since"$/;"	C
INSUFFICIENT_STORAGE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val INSUFFICIENT_STORAGE = 507$/;"	C
INTERNAL_SERVER_ERROR	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val INTERNAL_SERVER_ERROR = 500$/;"	C
InsufficientStorage	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val InsufficientStorage = new Status(INSUFFICIENT_STORAGE)$/;"	C
InternalServerError	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val InternalServerError = new Status(INTERNAL_SERVER_ERROR)$/;"	C
InvalidUriEncodingException	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^class InvalidUriEncodingException(msg: String) extends RuntimeException(msg)/;"	c
JAVA	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val JAVA = "java"$/;"	C
JAVASCRIPT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  def JAVASCRIPT(implicit codec: Codec) = withCharset(MimeTypes.JAVASCRIPT)$/;"	m
JAVASCRIPT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val JAVASCRIPT = "text\/javascript"$/;"	C
JSON	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  def JSON(implicit codec: Codec) = withCharset(MimeTypes.JSON)$/;"	m
JSON	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val JSON = "application\/json"$/;"	C
JUnitXmlTestsListener	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^class JUnitXmlTestsListener(val outputDir: String, logger: Logger) extends TestsListener {$/;"	c
JavaAction	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^trait JavaAction extends Action[play.mvc.Http.RequestBody] with JavaHelpers {$/;"	t
JavaActionAnnotations	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^class JavaActionAnnotations(val controller: Class[_], val method: java.lang.reflect.Method) {$/;"	c
JavaGlobalSettingsAdapter	framework/src/play/src/main/scala/play/core/j/JavaGlobalSettingsAdapter.scala	/^class JavaGlobalSettingsAdapter(val underlying: play.GlobalSettings) extends GlobalSettings {$/;"	c
JavaHelpers	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^trait JavaHelpers {$/;"	t
JavaScript	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^    val JavaScript = Accepting(MimeTypes.JAVASCRIPT)$/;"	C
JavaScript	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^class JavaScript(buffer: StringBuilder) extends BufferedContent[JavaScript](buffer) {$/;"	c
JavacError	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            val JavacError = """\\[error\\]\\s*(.*[.]java):(\\d+):\\s*(.*)""".r$/;"	C
JavacErrorInfo	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            val JavacErrorInfo = """\\[error\\]\\s*([a-z ]+):(.*)""".r$/;"	C
JavacErrorPosition	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            val JavacErrorPosition = """\\[error\\](\\s*)\\^\\s*""".r$/;"	C
JavascriptCompiler	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^  def JavascriptCompiler(fullCompilerOptions: Option[com.google.javascript.jscomp.CompilerOptions]) = AssetsCompiler("javascripts",$/;"	m
JavascriptLitteral	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^trait JavascriptLitteral[A] {$/;"	t
Json	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^    val Json = Accepting(MimeTypes.JSON)$/;"	C
KeepAlive	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val KeepAlive = Value$/;"	C
KeyPattern	framework/src/play/src/main/scala/play/api/data/Form.scala	/^    val KeyPattern = ("^" + java.util.regex.Pattern.quote(key) + """\\[(\\d+)\\].*$""").r$/;"	C
Keys	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^trait Keys {$/;"	t
LAST_MODIFIED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val LAST_MODIFIED = "Last-Modified"$/;"	C
LENGTH_REQUIRED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val LENGTH_REQUIRED = 411$/;"	C
LOCATION	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val LOCATION = "Location"$/;"	C
LOCKED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val LOCKED = 423$/;"	C
LessCompiler	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^  val LessCompiler = AssetsCompiler("less",$/;"	C
Locked	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val Locked = new Status(LOCKED)$/;"	C
Logger	framework/src/play/src/main/scala/play/api/Logger.scala	/^class Logger(val logger: Slf4jLogger) extends LoggerLike$/;"	c
LoggerLike	framework/src/play/src/main/scala/play/api/Logger.scala	/^trait LoggerLike {$/;"	t
LowPriorityEventIdExtractor	framework/src/play/src/main/scala/play/api/libs/EventSource.scala	/^  trait LowPriorityEventIdExtractor {$/;"	t
LowPriorityEventNameExtractor	framework/src/play/src/main/scala/play/api/libs/EventSource.scala	/^  trait LowPriorityEventNameExtractor {$/;"	t
LowPriorityWriteables	framework/src/play/src/main/scala/play/api/http/Writeable.scala	/^trait LowPriorityWriteables {$/;"	t
MAX_FORWARDS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val MAX_FORWARDS = "Max-Forwards"$/;"	C
METHOD_NOT_ALLOWED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val METHOD_NOT_ALLOWED = 405$/;"	C
MOVED_PERMANENTLY	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val MOVED_PERMANENTLY = 301$/;"	C
MULTIPLE_CHOICES	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val MULTIPLE_CHOICES = 300$/;"	C
MULTI_STATUS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val MULTI_STATUS = 207$/;"	C
Mapping	framework/src/play/src/main/scala/play/api/data/Form.scala	/^trait Mapping[T] {$/;"	t
MaxMessages	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^    val MaxMessages = 10$/;"	C
MediaRange	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^class MediaRange(mediaType: String,$/;"	c
MessagesPlugin	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^class MessagesPlugin(app: Application) extends Plugin {$/;"	c
MetaDataItem	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^      val MetaDataItem(qualified, nullable, clazz) = meta$/;"	C
MetaDataItem	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val MetaDataItem(qualified, nullable, clazz) = meta$/;"	C
MethodNotAllowed	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val MethodNotAllowed = new Status(METHOD_NOT_ALLOWED)$/;"	C
MimeTypes	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^trait MimeTypes {$/;"	t
MinMessages	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^    val MinMessages = 10$/;"	C
Mode	framework/src/play/src/main/scala/play/api/Play.scala	/^  type Mode = Value$/;"	T
MovedPermanently	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def MovedPermanently(url: String): SimpleResult = Redirect(url, MOVED_PERMANENTLY)$/;"	m
MultiStatus	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val MultiStatus = new Status(MULTI_STATUS)$/;"	C
NONE	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val NONE = "none"$/;"	C
NON_AUTHORITATIVE_INFORMATION	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val NON_AUTHORITATIVE_INFORMATION = 203$/;"	C
NOT_ACCEPTABLE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val NOT_ACCEPTABLE = 406$/;"	C
NOT_FOUND	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val NOT_FOUND = 404$/;"	C
NOT_IMPLEMENTED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val NOT_IMPLEMENTED = 501$/;"	C
NOT_MODIFIED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val NOT_MODIFIED = 304$/;"	C
NO_CONTENT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val NO_CONTENT = 204$/;"	C
NamedFjpThread	framework/src/play/src/main/scala/play/core/system/Execution.scala	/^    class NamedFjpThread(fjp: ForkJoinPool) extends ForkJoinWorkerThread(fjp)$/;"	c
NettyServer	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^class NettyServer(appProvider: ApplicationProvider, port: Option[Int], sslPort: Option[Int] = None, address: String = "0.0.0.0", val mode: Mode.Mode = Mode.Prod) extends Server with ServerWithStop {$/;"	c
NoClassifiers	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val NoClassifiers = "no-classifiers"$/;"	C
NoContent	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val NoContent = SimpleResult(header = ResponseHeader(NO_CONTENT), body = Enumerator.empty,$/;"	C
NoFsc	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val NoFsc = "no-fsc"$/;"	C
NoSbtBuildModule	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val NoSbtBuildModule = "no-sbt-build-module"$/;"	C
NoSources	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val NoSources = "no-sources"$/;"	C
NoTypeHighlighting	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val NoTypeHighlighting = "no-type-highlighting"$/;"	C
NonAuthoritativeInformation	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val NonAuthoritativeInformation = new Status(NON_AUTHORITATIVE_INFORMATION)$/;"	C
NotAcceptable	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val NotAcceptable = new Status(NOT_ACCEPTABLE)$/;"	C
NotFound	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val NotFound = new Status(NOT_FOUND)$/;"	C
NotImplemented	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val NotImplemented = new Status(NOT_IMPLEMENTED)$/;"	C
NotModified	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val NotModified = SimpleResult(header = ResponseHeader(NOT_MODIFIED), body = Enumerator.empty,$/;"	C
NotWaiting	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^trait NotWaiting[+A] extends PromiseValue[A] {$/;"	t
OK	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val OK = 200$/;"	C
ORIGIN	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val ORIGIN = "Origin"$/;"	C
ObjectMapping	framework/src/play/src/main/scala/play/api/data/Form.scala	/^trait ObjectMapping {$/;"	t
Ok	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val Ok = new Status(OK)$/;"	C
OrderedExecutionContext	framework/src/play/src/main/scala/play/core/j/OrderedExecutionContext.scala	/^class OrderedExecutionContext(actorSystem: ActorSystem, size: Int) extends ExecutionContext {$/;"	c
Out	framework/src/play/src/main/scala/play/api/mvc/package.scala	/^    type Out[A] = play.api.libs.iteratee.Iteratee[A, Unit]$/;"	T
PARTIAL_CONTENT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val PARTIAL_CONTENT = 206$/;"	C
PAYMENT_REQUIRED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val PAYMENT_REQUIRED = 402$/;"	C
POST	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  val POST = "POST"$/;"	C
PRAGMA	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val PRAGMA = "Pragma"$/;"	C
PRECONDITION_FAILED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val PRECONDITION_FAILED = 412$/;"	C
PROXY_AUTHENTICATE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val PROXY_AUTHENTICATE = "Proxy-Authenticate"$/;"	C
PROXY_AUTHENTICATION_REQUIRED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val PROXY_AUTHENTICATION_REQUIRED = 407$/;"	C
PROXY_AUTHORIZATION	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val PROXY_AUTHORIZATION = "Proxy-Authorization"$/;"	C
PUT	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  val PUT = "PUT"$/;"	C
ParamsExtractor	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    trait ParamsExtractor {$/;"	t
Parsing	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  class Parsing[A](parse: String => A, serialize: A => String, error: (String, Exception) => String)$/;"	c
Parsing	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  class Parsing[A](parse: String => A, serialize: A => String, error: (String, Exception) => String)(implicit codec: Codec)$/;"	c
PartHandler	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^      type PartHandler[A] = PartialFunction[Map[String, String], Iteratee[Array[Byte], A]]$/;"	T
PartialContent	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val PartialContent = new Status(PARTIAL_CONTENT)$/;"	C
PathBindable	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^trait PathBindable[A] {$/;"	t
PathPart	framework/src/play/src/main/scala/play/core/router/Router.scala	/^trait PathPart$/;"	t
PlayAssetsCompiler	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^trait PlayAssetsCompiler {$/;"	t
PlayCommands	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^trait PlayCommands extends PlayAssetsCompiler with PlayEclipse with PlayInternalKeys {$/;"	t
PlayEclipse	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^trait PlayEclipse {$/;"	t
PlayExceptions	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^trait PlayExceptions {$/;"	t
PlayInteractionMode	framework/src/sbt-plugin/src/main/scala/play/PlayInteractionMode.scala	/^trait PlayInteractionMode {$/;"	t
PlayInternalKeys	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^trait PlayInternalKeys {$/;"	t
PlayPipelineFactory	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  class PlayPipelineFactory(secure: Boolean = false) extends ChannelPipelineFactory {$/;"	c
PlayPositionMapper	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^trait PlayPositionMapper {$/;"	t
PlayPromise	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^class PlayPromise[+A](fu: scala.concurrent.Future[A]) {$/;"	c
PlayRedeemable	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^class PlayRedeemable[-A](p: scala.concurrent.Promise[A]) extends Redeemable[A] {$/;"	c
PlayReloader	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^trait PlayReloader {$/;"	t
PlayRun	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^trait PlayRun extends PlayInternalKeys {$/;"	t
PlayRunHook	framework/src/sbt-plugin/src/main/scala/play/PlayRunHooks.scala	/^trait PlayRunHook {$/;"	t
PlayRunners	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^trait PlayRunners {$/;"	t
PlaySourceGenerators	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^trait PlaySourceGenerators {$/;"	t
PlaySpecification	framework/src/play-test/src/main/scala/play/api/test/PlaySpecification.scala	/^trait PlaySpecification extends Specification$/;"	t
Plugin	framework/src/play/src/main/scala/play/api/Plugins.scala	/^trait Plugin {$/;"	t
PluginDeclaration	framework/src/play/src/main/scala/play/api/Application.scala	/^    val PluginDeclaration = """([0-9_]+):(.*)""".r$/;"	C
Port	framework/src/play-test/src/main/scala/play/api/test/package.scala	/^  type Port = Int$/;"	T
PostCompile	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  def PostCompile(scope: Configuration) = (sourceDirectory in scope, dependencyClasspath in scope, compile in scope, javaSource in scope, sourceManaged in scope, classDirectory in scope, cacheDirectory in scope) map { (src, deps, analysis, javaSrc, srcManaged, classes, cacheDir) =>$/;"	m
PreconditionFailed	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val PreconditionFailed = new Status(PRECONDITION_FAILED)$/;"	C
PriorityEight	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait PriorityEight extends PrioritySeven {$/;"	t
PriorityFive	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait PriorityFive extends PriorityFour {$/;"	t
PriorityFour	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait PriorityFour extends PriorityThree {$/;"	t
PriorityNine	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait PriorityNine extends PriorityEight {$/;"	t
PriorityOne	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait PriorityOne {$/;"	t
PrioritySeven	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait PrioritySeven extends PrioritySix {$/;"	t
PrioritySix	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait PrioritySix extends PriorityFive {$/;"	t
PriorityThree	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait PriorityThree extends PriorityTwo {$/;"	t
PriorityTwo	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait PriorityTwo extends PriorityOne {$/;"	t
ProxyDriver	framework/src/play/src/main/scala/play/utils/ProxyDriver.scala	/^class ProxyDriver(proxied: Driver) extends Driver {$/;"	c
QueryStringBindable	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^trait QueryStringBindable[A] {$/;"	t
RANGE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val RANGE = "Range"$/;"	C
REFERER	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val REFERER = "Referer"$/;"	C
REQUESTED_RANGE_NOT_SATISFIABLE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val REQUESTED_RANGE_NOT_SATISFIABLE = 416$/;"	C
REQUEST_ENTITY_TOO_LARGE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val REQUEST_ENTITY_TOO_LARGE = 413$/;"	C
REQUEST_TIMEOUT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val REQUEST_TIMEOUT = 408$/;"	C
REQUEST_URI_TOO_LONG	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val REQUEST_URI_TOO_LONG = 414$/;"	C
RESET_CONTENT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val RESET_CONTENT = 205$/;"	C
RETRY_AFTER	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val RETRY_AFTER = "Retry-After"$/;"	C
ROUTE_ACTION_METHOD	framework/src/play/src/main/scala/play/api/Routes.scala	/^    val ROUTE_ACTION_METHOD = "ROUTE_ACTION_METHOD"$/;"	C
ROUTE_COMMENTS	framework/src/play/src/main/scala/play/api/Routes.scala	/^    val ROUTE_COMMENTS = "ROUTE_COMMENTS"$/;"	C
ROUTE_CONTROLLER	framework/src/play/src/main/scala/play/api/Routes.scala	/^    val ROUTE_CONTROLLER = "ROUTE_CONTROLLER"$/;"	C
ROUTE_PATTERN	framework/src/play/src/main/scala/play/api/Routes.scala	/^    val ROUTE_PATTERN = "ROUTE_PATTERN"$/;"	C
ROUTE_VERB	framework/src/play/src/main/scala/play/api/Routes.scala	/^    val ROUTE_VERB = "ROUTE_VERB"$/;"	C
Redeemable	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^trait Redeemable[-A] {$/;"	t
RedeemablePromise	framework/src/play/src/main/scala/play/api/libs/concurrent/package.scala	/^    type RedeemablePromise[A] = Future[A] with Redeemable[A]$/;"	T
Redirect	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def Redirect(call: Call): SimpleResult = Redirect(call.url)$/;"	m
Redirect	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def Redirect(url: String, queryString: Map[String, Seq[String]] = Map.empty, status: Int = SEE_OTHER) = {$/;"	m
Redirect	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def Redirect(url: String, status: Int): SimpleResult = Redirect(url, Map.empty, status)$/;"	m
ReloadableApplication	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^class ReloadableApplication(sbtLink: SBTLink, sbtDocHandler: SBTDocHandler) extends ApplicationProvider {$/;"	c
Rendering	framework/src/play/src/main/scala/play/api/mvc/Render.scala	/^trait Rendering {$/;"	t
Request	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^  trait Request[+A] extends RequestHeader {$/;"	t
RequestExtractors	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^trait RequestExtractors extends AcceptExtractors {$/;"	t
RequestHeader	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^  trait RequestHeader {$/;"	t
RequestTaggingHandler	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^trait RequestTaggingHandler extends Handler {$/;"	t
RequestTimeout	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val RequestTimeout = new Status(REQUEST_TIMEOUT)$/;"	C
ResetContent	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val ResetContent = SimpleResult(header = ResponseHeader(RESET_CONTENT), body = Enumerator.empty,$/;"	C
Resolver	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  trait Resolver {$/;"	t
ResultExtractors	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^trait ResultExtractors {$/;"	t
ResultSet	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  type ResultSet = Stream[Row]$/;"	T
ResultSetParser	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^trait ResultSetParser[+A] extends (ResultSet => SqlResult[A]) {$/;"	t
Results	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^trait Results {$/;"	t
Right	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val Right(sk) = complete.DefaultParsers.result(parser, task)$/;"	C
RouteFiles	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^  val RouteFiles = (state: State, sourceDirectories: Seq[File], generatedDir: File, additionalImports: Seq[String], reverseRouter: Boolean, namespaceReverseRouter: Boolean) => {$/;"	C
RouteInvokers	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^trait RouteInvokers {$/;"	t
RouterCacheLifecycle	framework/src/play/src/main/scala/play/core/router/Router.scala	/^class RouterCacheLifecycle(app: play.api.Application) extends Plugin {$/;"	c
Routes	framework/src/play/src/main/scala/play/core/router/Router.scala	/^  trait Routes {$/;"	t
Row	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait Row {$/;"	t
RowParser	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^trait RowParser[+A] extends (Row => SqlResult[A]) {$/;"	t
RunActor	framework/src/play/src/main/scala/play/core/j/OrderedExecutionContext.scala	/^  class RunActor extends Actor {$/;"	c
SCALA	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val SCALA = "scala"$/;"	C
SEE_OTHER	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val SEE_OTHER = 303$/;"	C
SERVER	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val SERVER = "Server"$/;"	C
SERVICE_UNAVAILABLE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val SERVICE_UNAVAILABLE = 503$/;"	C
SET_COOKIE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val SET_COOKIE = "Set-Cookie"$/;"	C
SET_COOKIE2	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val SET_COOKIE2 = "Set-Cookie2"$/;"	C
SQL	framework/src/anorm/src/main/scala/anorm/package.scala	/^  def SQL(stmt: String) = Sql.sql(stmt)$/;"	m
SWITCHING_PROTOCOLS	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val SWITCHING_PROTOCOLS = 101$/;"	C
SbtClassifiers	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val SbtClassifiers = "sbt-classifiers"$/;"	C
ScalaTemplates	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^  val ScalaTemplates = (state: State, sourceDirectories: Seq[File], generatedDir: File, templateTypes: Map[String, String], additionalImports: Seq[String]) => {$/;"	C
SeeOther	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def SeeOther(url: String): SimpleResult = Redirect(url, SEE_OTHER)$/;"	m
Server	framework/src/play/src/main/scala/play/core/server/Server.scala	/^trait Server {$/;"	t
ServerWithStop	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^trait ServerWithStop {$/;"	t
ServiceUnavailable	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val ServiceUnavailable = new Status(SERVICE_UNAVAILABLE)$/;"	C
Settings	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^trait Settings {$/;"	t
SignatureCalculator	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^trait SignatureCalculator {$/;"	t
SourceMapper	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^trait SourceMapper {$/;"	t
Sql	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait Sql {$/;"	t
SqlResult	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^trait SqlResult[+A] {$/;"	t
StaticApplication	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^class StaticApplication(applicationPath: File) extends ApplicationProvider {$/;"	c
Status	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^trait Status {$/;"	t
Status	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  class Status(status: Int) extends SimpleResult(header = ResponseHeader(status), body = Enumerator.empty,$/;"	c
Status	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def Status(code: Int) = new Status(code)$/;"	m
TE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val TE = "Te"$/;"	C
TEMPORARY_REDIRECT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val TEMPORARY_REDIRECT = 307$/;"	C
TEXT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  def TEXT(implicit codec: Codec) = withCharset(MimeTypes.TEXT)$/;"	m
TEXT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val TEXT = "text\/plain"$/;"	C
TODO	framework/src/play/src/main/scala/play/api/mvc/Controller.scala	/^  val TODO = Action {$/;"	C
TOO_MANY_REQUEST	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val TOO_MANY_REQUEST = 429$/;"	C
TRAILER	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val TRAILER = "Trailer"$/;"	C
TRANSFER_ENCODING	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val TRANSFER_ENCODING = "Transfer-Encoding"$/;"	C
Template0	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template0[Result] { def render(): Result }$/;"	t
Template1	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template1[A, Result] { def render(a: A): Result }$/;"	t
Template10	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template10[A, B, C, D, E, F, G, H, I, J, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J): Result }$/;"	t
Template11	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template11[A, B, C, D, E, F, G, H, I, J, K, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K): Result }$/;"	t
Template12	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template12[A, B, C, D, E, F, G, H, I, J, K, L, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L): Result }$/;"	t
Template13	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template13[A, B, C, D, E, F, G, H, I, J, K, L, M, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M): Result }$/;"	t
Template14	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N): Result }$/;"	t
Template15	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O): Result }$/;"	t
Template16	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P): Result }$/;"	t
Template17	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q): Result }$/;"	t
Template18	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R): Result }$/;"	t
Template19	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S): Result }$/;"	t
Template2	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template2[A, B, Result] { def render(a: A, b: B): Result }$/;"	t
Template20	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T): Result }$/;"	t
Template21	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U): Result }$/;"	t
Template22	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U, v: V): Result }$/;"	t
Template3	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template3[A, B, C, Result] { def render(a: A, b: B, c: C): Result }$/;"	t
Template4	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template4[A, B, C, D, Result] { def render(a: A, b: B, c: C, d: D): Result }$/;"	t
Template5	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template5[A, B, C, D, E, Result] { def render(a: A, b: B, c: C, d: D, e: E): Result }$/;"	t
Template6	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template6[A, B, C, D, E, F, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F): Result }$/;"	t
Template7	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template7[A, B, C, D, E, F, G, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G): Result }$/;"	t
Template8	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template8[A, B, C, D, E, F, G, H, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H): Result }$/;"	t
Template9	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^  trait Template9[A, B, C, D, E, F, G, H, I, Result] { def render(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I): Result }$/;"	t
TemporaryRedirect	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def TemporaryRedirect(url: String): SimpleResult = Redirect(url, TEMPORARY_REDIRECT)$/;"	m
TestApplication	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^class TestApplication(application: Application) extends ApplicationProvider {$/;"	c
TestSuite	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^  class TestSuite(val name: String) {$/;"	c
ToStatement	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^trait ToStatement[A] { def set(s: java.sql.PreparedStatement, index: Int, aValue: A): Unit }$/;"	t
TooManyRequest	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val TooManyRequest = new Status(TOO_MANY_REQUEST)$/;"	C
Txt	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^class Txt(buffer: StringBuilder) extends BufferedContent[Txt](buffer) {$/;"	c
UNAUTHORIZED	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val UNAUTHORIZED = 401$/;"	C
UNLIMITED	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    val UNLIMITED: Int = Integer.MAX_VALUE$/;"	C
UNPROCESSABLE_ENTITY	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val UNPROCESSABLE_ENTITY = 422$/;"	C
UNSUPPORTED_MEDIA_TYPE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val UNSUPPORTED_MEDIA_TYPE = 415$/;"	C
UPGRADE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val UPGRADE = "Upgrade"$/;"	C
USER_AGENT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val USER_AGENT = "User-Agent"$/;"	C
USE_PROXY	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val USE_PROXY = 305$/;"	C
Unauthorized	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val Unauthorized = new Status(UNAUTHORIZED)$/;"	C
UnprocessableEntity	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val UnprocessableEntity = new Status(UNPROCESSABLE_ENTITY)$/;"	C
UnsupportedMediaType	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val UnsupportedMediaType = new Status(UNSUPPORTED_MEDIA_TYPE)$/;"	C
UriTooLong	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val UriTooLong = new Status(REQUEST_URI_TOO_LONG)$/;"	C
VARY	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val VARY = "Vary"$/;"	C
VIA	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val VIA = "Via"$/;"	C
WARNING	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val WARNING = "Warning"$/;"	C
WSRequest	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  class WSRequest(_method: String, _auth: Option[Tuple3[String, String, AuthScheme]], _calc: Option[SignatureCalculator]) extends RequestBuilderBase[WSRequest](classOf[WSRequest], _method, false) {$/;"	c
WSRequestAdapter	framework/src/play/src/main/scala/play/api/libs/oauth/OAuth.scala	/^  class WSRequestAdapter(request: WSRequest) extends HttpRequest {$/;"	c
WWW_AUTHENTICATE	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val WWW_AUTHENTICATE = "WWW-Authenticate"$/;"	C
WebSocketable	framework/src/play/src/main/scala/play/core/server/Server.scala	/^trait WebSocketable {$/;"	t
WithDefaultConfiguration	framework/src/play/src/main/scala/play/api/Application.scala	/^trait WithDefaultConfiguration {$/;"	t
WithDefaultGlobal	framework/src/play/src/main/scala/play/api/Application.scala	/^trait WithDefaultGlobal {$/;"	t
WithDefaultPlugins	framework/src/play/src/main/scala/play/api/Application.scala	/^trait WithDefaultPlugins {$/;"	t
WithFilters	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^class WithFilters(filters: EssentialFilter*) extends GlobalSettings {$/;"	c
WithSources	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val WithSources = "with-sources=yes"$/;"	C
WrappedRequest	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^  class WrappedRequest[A](request: Request[A]) extends Request[A] {$/;"	c
Writeables	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^trait Writeables {$/;"	t
WsTestClient	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^trait WsTestClient {$/;"	t
XML	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  def XML(implicit codec: Codec) = withCharset(MimeTypes.XML)$/;"	m
XML	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val XML = "application\/xml"$/;"	C
X_FORWARDED_FOR	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val X_FORWARDED_FOR = "X-Forwarded-For"$/;"	C
X_FORWARDED_HOST	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val X_FORWARDED_HOST = "X-Forwarded-Host"$/;"	C
X_FORWARDED_PORT	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val X_FORWARDED_PORT = "X-Forwarded-Port"$/;"	C
X_FORWARDED_PROTO	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  val X_FORWARDED_PROTO = "X-Forwarded-Proto"$/;"	C
Xml	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^    val Xml = Accepting(MimeTypes.XML)$/;"	C
Xml	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^class Xml(buffer: StringBuilder) extends BufferedContent[Xml](buffer) {$/;"	c
XrdsResolver	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  class XrdsResolver extends Resolver {$/;"	c
_changed	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          var _changed = true$/;"	l
_display_	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^    def _display_(o: Any)(implicit ct: ClassTag[T]): T = {$/;"	m
_render	framework/src/play/src/main/scala/play/api/mvc/Render.scala	/^      def _render(ms: Seq[MediaRange]): Future[SimpleResult] = ms match {$/;"	m
_render	framework/src/play/src/main/scala/play/api/mvc/Render.scala	/^      def _render(ms: Seq[MediaRange]): SimpleResult = ms match {$/;"	m
a	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val a = EssentialAction { rh =>$/;"	C
a	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val a = EssentialAction(_ => Done(Results.BadRequest,Input.Empty))$/;"	C
a	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val a = EssentialAction(_ => Iteratee.flatten(e.map(result => Done(result, Input.Empty))))$/;"	C
a1	framework/src/play/src/main/scala/play/api/data/Form.scala	/^      val a1 = field1.unbind(v1)$/;"	C
a1	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a1 = field1.unbind(v1)$/;"	C
a10	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a10 = field10.unbind(v10)$/;"	C
a11	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a11 = field11.unbind(v11)$/;"	C
a12	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a12 = field12.unbind(v12)$/;"	C
a13	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a13 = field13.unbind(v13)$/;"	C
a14	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a14 = field14.unbind(v14)$/;"	C
a15	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a15 = field15.unbind(v15)$/;"	C
a16	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a16 = field16.unbind(v16)$/;"	C
a17	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a17 = field17.unbind(v17)$/;"	C
a18	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a18 = field18.unbind(v18)$/;"	C
a2	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a2 = field2.unbind(v2)$/;"	C
a3	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a3 = field3.unbind(v3)$/;"	C
a4	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a4 = field4.unbind(v4)$/;"	C
a5	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a5 = field5.unbind(v5)$/;"	C
a6	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a6 = field6.unbind(v6)$/;"	C
a7	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a7 = field7.unbind(v7)$/;"	C
a8	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a8 = field8.unbind(v8)$/;"	C
a9	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^      val a9 = field9.unbind(v9)$/;"	C
absoluteURL	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def absoluteURL(secure: Boolean = false)(implicit request: RequestHeader) = {$/;"	m
accept	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def accept = req.accept.asJava$/;"	m
acceptExtensions	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val acceptExtensions: Seq[(String, Option[String])]) extends MediaType(mediaType, mediaSubType, parameters) {$/;"	C
acceptLanguages	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def acceptLanguages = req.acceptLanguages.map(new play.i18n.Lang(_)).asJava$/;"	m
acceptedTypes	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def acceptedTypes = req.acceptedTypes.asJava$/;"	m
accepts	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^  def accepts(mimeType: String): Boolean =$/;"	m
accepts	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def accepts(mimeType: String): Boolean = {$/;"	m
accepts	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def accepts(mediaType: String) = req.accepts(mediaType)$/;"	m
acceptsURL	framework/src/play/src/main/scala/play/utils/ProxyDriver.scala	/^  def acceptsURL(url: String) = proxied.acceptsURL(url)$/;"	m
action	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^        val action = a.asInstanceOf[Action[T]]$/;"	C
action	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^          val action = global.underlying.onRequest(javaContext.request, annotations.method)$/;"	C
action	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^        val action = global.getControllerInstance(actionClass).asInstanceOf[play.mvc.Action[Object]]$/;"	C
actionMixins	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^  val actionMixins = {$/;"	C
actor	framework/src/play/src/main/scala/play/core/j/OrderedExecutionContext.scala	/^    val actor = actors((id % size).toInt)$/;"	C
actualAlgorithm	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^    val actualAlgorithm = cert.get(X509CertImpl.SIG_ALG).asInstanceOf[AlgorithmId]$/;"	C
adapter	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^  def adapter[A](f: RequestHeader => Enumeratee[A, A])(implicit frameFormatter: FrameFormatter[A]): WebSocket[A] = {$/;"	m
addBatch	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def addBatch(args: (String, ParameterValue[_])*): BatchSql = this.copy(params = (this.params) :+ args)$/;"	m
addBatchList	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def addBatchList(paramsMapList: TraversableOnce[Seq[(String, ParameterValue[_])]]): BatchSql = this.copy(params = (this.params) ++ paramsMapList)$/;"	m
addBatchParams	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def addBatchParams(args: ParameterValue[_]*): BatchSql = this.copy(params = (this.params) :+ sql.argsInitialOrder.zip(args))$/;"	m
addBatchParamsList	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def addBatchParamsList(paramsSeqList: TraversableOnce[Seq[ParameterValue[_]]]): BatchSql = this.copy(params = (this.params) ++ paramsSeqList.map(paramsSeq => sql.argsInitialOrder.zip(paramsSeq)))$/;"	m
addEvent	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^    def addEvent(e: TEvent) = {$/;"	m
addPart	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          def addPart() = {$/;"	m
addWatch	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^              def addWatch(directoryToWatch: String): Int = 0$/;"	m
addWatch	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def addWatch(directoryToWatch: String): Int = {$/;"	m
addWatchMethod	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val addWatchMethod = jnotifyClass.getMethod("addWatch", classOf[String], classOf[Int], classOf[Boolean], jnotifyListenerClass)$/;"	C
additionalConfiguration	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  val additionalConfiguration: Map[String, _ <: Any] = Map.empty,$/;"	C
additionalPlugins	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  val additionalPlugins: Seq[String] = Nil,$/;"	C
afterStarted	framework/src/sbt-plugin/src/main/scala/play/PlayRunHooks.scala	/^  def afterStarted(addr: InetSocketAddress): Unit = ()$/;"	m
afterStopped	framework/src/sbt-plugin/src/main/scala/play/PlayRunHooks.scala	/^  def afterStopped(): Unit = ()$/;"	m
algorithm	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^        val algorithm = System.getProperty("https.keyStoreAlgorithm", KeyManagerFactory.getDefaultAlgorithm)$/;"	C
algorithm	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^    val algorithm = new AlgorithmId(AlgorithmId.sha1WithRSAEncryption_oid)$/;"	C
all	framework/src/play/src/main/scala/play/api/data/Form.scala	/^    val all: Seq[Either[Seq[FormError], Seq[Any]]] = results.map(_.right.map(Seq(_)))$/;"	C
all	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    val all = availables$/;"	C
all	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val all = extracted.runTask(playMonitoredFiles, state)._2.map(f => new File(f))$/;"	C
allChannels	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  val allChannels = new DefaultChannelGroup$/;"	C
allErrorsOrItems	framework/src/play/src/main/scala/play/api/data/Form.scala	/^    val allErrorsOrItems: Seq[Either[Seq[FormError], T]] = RepeatedMapping.indexes(key, data).map(i => wrapped.withPrefix(key + "[" + i + "]").bind(data))$/;"	C
allHeaders	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def allHeaders: Map[String, Seq[String]] = {$/;"	m
allowed	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^      val allowed = segmentChars.get(b & 0xFF)$/;"	C
alphaDigit	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    val alphaDigit = for ((min, max) <- Seq(('a', 'z'), ('A', 'Z'), ('0', '9')); c <- min to max) yield c$/;"	C
alreadyClean	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        val alreadyClean = new java.util.concurrent.atomic.AtomicBoolean(false)$/;"	C
annotations	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^  val annotations: JavaActionAnnotations$/;"	C
annotations	framework/src/play/src/main/scala/play/core/router/Router.scala	/^          val annotations = javaAction.annotations$/;"	C
annotations	framework/src/play/src/main/scala/play/core/router/Router.scala	/^          val annotations = javaActionAnnotations.getOrElseUpdate(handlerDef, {$/;"	C
anorm	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^package anorm$/;"	p
anorm	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^package anorm$/;"	p
anorm	framework/src/anorm/src/main/scala/anorm/SqlStatementParser.scala	/^package anorm$/;"	p
anorm	framework/src/anorm/src/main/scala/anorm/Utils.scala	/^package anorm$/;"	p
anorm	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val anorm = "com.typesafe.play" %% "anorm" % play.core.PlayVersion.current$/;"	C
any	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val any = acceptIf(_ => true)(_ => "Expected any character")$/;"	C
anyContent	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def anyContent: BodyParser[AnyContent] = BodyParser("anyContent") { request =>$/;"	m
anyContent	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def anyContent(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.anyContent).map {$/;"	m
api	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def api = messages$/;"	m
app	framework/src/play-test/src/main/scala/play/api/test/Specs.scala	/^    val app: FakeApplication = FakeApplication(),$/;"	C
appProvider	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^        val appProvider = new ReloadableApplication(sbtLink, sbtDocHandler)$/;"	C
application	framework/src/play/src/main/scala/play/api/Play.scala	/^  def application(implicit app: Application): Application = app$/;"	m
application	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  val application = new DefaultApplication(applicationPath, this.getClass.getClassLoader, None, Mode.Prod)$/;"	C
applicationFile	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^        val applicationFile = new File(applicationPath)$/;"	C
applicationProvider	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def applicationProvider = appProvider$/;"	m
applicationProvider	framework/src/play/src/main/scala/play/core/server/Server.scala	/^  def applicationProvider: ApplicationProvider$/;"	m
applicationTypes	framework/src/play/src/main/scala/play/api/libs/MimeTypes.scala	/^  def applicationTypes: Map[String, String] = play.api.Play.maybeApplication.flatMap { application =>$/;"	m
apply	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    def apply(value: Any, meta: MetaDataItem): MayErr[SqlRequestError, A] = transformer(value, meta)$/;"	m
apply	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def apply()(implicit connection: java.sql.Connection) = Sql.resultSetToStream(resultSet())$/;"	m
apply	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def apply[A](transformer: ((Any, MetaDataItem) => MayErr[SqlRequestError, A])): Column[A] = new Column[A] {$/;"	m
apply	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def apply[B](a: String)(implicit c: Column[B]): B = get[B](a)(c).get$/;"	m
apply	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^    def apply(row: Row): SqlResult[A] = f(row)$/;"	m
apply	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^    def apply(rows: ResultSet): SqlResult[A] = f(rows)$/;"	m
apply	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def apply[A](f: ResultSet => SqlResult[A]): ResultSetParser[A] = new ResultSetParser[A] { rows =>$/;"	m
apply	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def apply[A](f: Row => SqlResult[A]): RowParser[A] = new RowParser[A] {$/;"	m
apply	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def apply(): FakeRequest[AnyContentAsEmpty.type] = {$/;"	m
apply	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def apply(call: Call): FakeRequest[AnyContentAsEmpty.type] = {$/;"	m
apply	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def apply(method: String, path: String): FakeRequest[AnyContentAsEmpty.type] = {$/;"	m
apply	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^      def apply(driver: WebDriver): T = {$/;"	m
apply	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def apply[D <: WebDriver](clazz: Class[D]): WebDriver = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def apply(name: String): Logger = new Logger(LoggerFactory.getLogger(name))$/;"	m
apply	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def apply[T](clazz: Class[T]): Logger = new Logger(LoggerFactory.getLogger(clazz))$/;"	m
apply	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def apply(key: String): Field = Field($/;"	m
apply	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def apply(key: String): Field = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def apply[T](mapping: (String, Mapping[T])): Form[T] = Form(mapping._2.withPrefix(mapping._1), Map.empty, Nil, None)$/;"	m
apply	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def apply[T](mapping: Mapping[T]): Form[T] = Form(mapping, Map.empty, Nil, None)$/;"	m
apply	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def apply(error: String, args: Any*): Invalid = Invalid(Seq(ValidationError(error, args: _*)))$/;"	m
apply	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def apply(error: ValidationError): Invalid = Invalid(Seq(error))$/;"	m
apply	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def apply(t: T): ValidationResult = f(t)$/;"	m
apply	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def apply[T](f: (T => ValidationResult)): Constraint[T] = apply(None, Nil)(f)$/;"	m
apply	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def apply[T](name: String, args: Any*)(f: (T => ValidationResult)): Constraint[T] = apply(Some(name), args.toSeq)(f)$/;"	m
apply	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def apply(in: Input): ParseResult[List[MediaRange]] = mediaRanges(in)$/;"	m
apply	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def apply(mediaRanges: String): Seq[MediaRange] = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def apply(mediaType: String): Option[MediaType] = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^  def apply(mediaRange: String): MediaType = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/http/Writeable.scala	/^  def apply[A](transform: A => Array[Byte])(implicit ct: ContentTypeOf[A]): Writeable[A] = Writeable(transform, ct.mimeType)$/;"	m
apply	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def apply(code: String): Lang = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def apply(key: String, args: Any*)(implicit lang: Lang): String = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/libs/Comet.scala	/^  def apply[E](callback: String, initialChunk: Html = Html(Array.fill[Char](5 * 1024)(' ').mkString + "<html><body>"))(implicit encoder: CometMessage[E]) = new Enumeratee[E, Html] {$/;"	m
apply	framework/src/play/src/main/scala/play/api/libs/EventSource.scala	/^  def apply[E]()(implicit encoder: Comet.CometMessage[E], eventNameExtractor: EventNameExtractor[E], eventIdExtractor: EventIdExtractor[E]) = Enumeratee.map[E] { chunk =>$/;"	m
apply	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^    def apply(prefix: String = "", suffix: String = ""): TemporaryFile = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def apply[A](): scala.concurrent.Promise[A] = scala.concurrent.Promise[A]()$/;"	m
apply	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def apply[A](lazyA: => A): scala.concurrent.Future[A] = (try (scala.concurrent.Promise.successful(lazyA)) catch {$/;"	m
apply	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  def apply(queryString: Map[String, Seq[String]]): UserInfo = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^    def apply(request: RequestHeader) = self(request).flatMap {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^    def apply(request: RequestHeader) = self(request).map(_.right.map(f(_)))$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^    def apply(request: Request[A]) = try {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^    def apply(rh: RequestHeader) = f(rh)$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def apply() = this$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def apply(f: RequestHeader => Iteratee[Array[Byte], SimpleResult]): EssentialAction = new EssentialAction {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def apply(request: Request[A]): Future[SimpleResult]$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def apply(rh: RequestHeader): Iteratee[Array[Byte], SimpleResult] = parser(rh).mapM {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def apply[T](debugName: String)(f: RequestHeader => Iteratee[Array[Byte], Either[SimpleResult, T]]): BodyParser[T] = new BodyParser[T] {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def apply[T](f: RequestHeader => Iteratee[Array[Byte], Either[SimpleResult, T]]): BodyParser[T] = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^      def apply(rh: RequestHeader): Iteratee[Array[Byte], SimpleResult] = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^    def apply(f: RequestHeader => Future[SimpleResult])(rh: RequestHeader): Future[SimpleResult] = filter(f, rh)$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^    def apply(rh: RequestHeader): Iteratee[Array[Byte], SimpleResult] = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^  def apply(f: RequestHeader => Future[SimpleResult])(rh: RequestHeader): Future[SimpleResult]$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^  def apply(filter: (RequestHeader => Future[SimpleResult], RequestHeader) => Future[SimpleResult]): Filter = new Filter {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^  def apply(h: EssentialAction, filters: EssentialFilter*) = h match {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^  def apply(next: EssentialAction): EssentialAction = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^  def apply(next: EssentialAction): EssentialAction$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^  def apply[A](action: EssentialAction, filters: List[EssentialFilter]): EssentialAction = new EssentialAction {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def apply(header: Option[String]) = new Cookies {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def apply(key: String) = data(key)$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def apply(key: String): String = get(key).getOrElse(scala.sys.error("Header doesn't exist"))$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def apply(name: String): Cookie = get(name).getOrElse(scala.sys.error("Cookie doesn't exist"))$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def apply[A](rh: RequestHeader, a: A) = new Request[A] {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Render.scala	/^    def apply(f: PartialFunction[MediaRange, SimpleResult])(implicit request: RequestHeader): SimpleResult = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def apply[C](content: C)(implicit writeable: Writeable[C]): SimpleResult = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def apply[C](i: Iteratee[A, C]): Future[Iteratee[A, C]] = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def apply[A](header: ResponseHeader, chunks: Iteratee[A, Unit] => _)(implicit writeable: Writeable[A]) =$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Security.scala	/^    def apply(): AuthenticatedBuilder[String] = apply[String](req => req.session.get(username))$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/Security.scala	/^    def apply[U](userinfo: RequestHeader => Option[U],$/;"	m
apply	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^  def apply() = this$/;"	m
apply	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def apply(content: String) = new JavaScript(new StringBuilder(content))$/;"	m
apply	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def apply(text: String): Html = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def apply(text: String): Txt = {$/;"	m
apply	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def apply(text: String): Xml = {$/;"	m
apply	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^          def apply(result: JResult) = result match {$/;"	m
apply	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^        def apply(nothing: String) = finalAction.call(javaContext)$/;"	m
apply	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^  def apply(req: Request[play.mvc.Http.RequestBody]): Future[SimpleResult] = {$/;"	m
apply	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^    def apply(a: A) = f.apply(a)$/;"	m
apply	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^  def apply(e: Either[A, B]): play.libs.F.Either[A, B] = e.fold(play.libs.F.Either.Left(_), play.libs.F.Either.Right(_))$/;"	m
apply	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^      def apply[C](i: Iteratee[A, C]) = {$/;"	m
apply	framework/src/play/src/main/scala/play/core/router/Router.scala	/^          def apply(rh: RequestHeader) = action(rh)$/;"	m
apply	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def apply(method: String, pathPattern: PathPattern) = new ParamsExtractor {$/;"	m
apply	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def apply(router: Router.Routes) = new {$/;"	m
apply	framework/src/play/src/main/scala/play/core/router/Router.scala	/^  def apply(path: String): Option[Map[String, Either[Throwable, String]]] = {$/;"	m
apply	framework/src/play/src/main/scala/play/core/server/netty/NettyPromise.scala	/^  def apply(channelPromise: ChannelFuture) = {$/;"	m
apply	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^      def apply[R](i: Iteratee[A, R]) = {$/;"	m
apply	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^      def apply(elts: FieldElements) = f(elts)$/;"	m
apply	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def apply(elts: FieldElements): Html$/;"	m
apply	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def apply(f: FieldElements => Html): FieldConstructor = new FieldConstructor {$/;"	m
apply	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def apply(field: play.api.data.Field, min: Int = 1)(f: play.api.data.Field => Html) = {$/;"	m
apply	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def apply(options: (String, String)*) = options.toSeq$/;"	m
apply	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def apply(options: List[String]) = options.map(v => v -> v)$/;"	m
apply	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def apply(options: Map[String, String]) = options.toSeq$/;"	m
apply	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def apply(options: java.util.List[String]) = options.asScala.map(v => v -> v)$/;"	m
apply	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def apply(options: java.util.Map[String, String]) = options.asScala.toSeq$/;"	m
apply	framework/src/play/src/main/scala/views/helper/twitterBootstrap/package.scala	/^    def apply(elts: FieldElements) = twitterBootstrapFieldConstructor(elts)$/;"	m
apply	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def apply(log: Logger, connectInput: Boolean) =$/;"	m
apply	framework/src/sbt-plugin/src/main/scala/play/Project.scala	/^  def apply(name: String, applicationVersion: String = "1.0", dependencies: Seq[ModuleID] = Nil, path: File = file("."), settings: => Seq[Setting[_]] = Seq()): sbt.Project = {$/;"	m
applyOn	framework/src/play/src/main/scala/play/api/libs/Comet.scala	/^    def applyOn[A](inner: Iteratee[Html, A]): Iteratee[E, Iteratee[Html, A]] = {$/;"	m
applyOn	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^      def applyOn[A](inner: Iteratee[Array[Byte], A]) = {$/;"	m
args	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val args = (Space ~> NoClassifiers | Space ~> SbtClassifiers | Space ~> NoFsc | Space ~> NoTypeHighlighting | Space ~> NoSbtBuildModule | Space ~> WithSources | Space ~> NoSources).*$/;"	C
argsMap	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^      val argsMap = Map(ps: _*)$/;"	C
argsMap	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val argsMap = Map(params: _*)$/;"	C
as	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def as[T](parser: ResultSetParser[T])(implicit connection: java.sql.Connection): T = Sql.as[T](parser, resultSet())$/;"	m
as	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def as[T](parser: ResultSetParser[T], rs: java.sql.ResultSet): T =$/;"	m
as	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def as(binder: Formatter[T]): Mapping[T] = {$/;"	m
as	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def as(contentType: String): A$/;"	m
as	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def as(contentType: String): AsyncResult = {$/;"	m
as	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def as(contentType: String): SimpleResult = withHeaders(CONTENT_TYPE -> contentType)$/;"	m
asBatch	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def asBatch[T]: BatchSql = BatchSql(this, Nil)$/;"	m
asBytes	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def asBytes(maxLength: Int = memoryThreshold): Option[Array[Byte]] = {$/;"	m
asBytes	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^          def asBytes = rawBuffer.asBytes().orNull$/;"	m
asBytes	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^          def asBytes(maxLength: Int) = rawBuffer.asBytes(maxLength).orNull$/;"	m
asFile	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def asFile: File = {$/;"	m
asFile	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^          def asFile = rawBuffer.asFile$/;"	m
asFormUrlEncoded	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def asFormUrlEncoded: Map[String, Seq[String]] = dataParts$/;"	m
asFormUrlEncoded	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def asFormUrlEncoded: Option[Map[String, Seq[String]]] = this match {$/;"	m
asJavaRecursively	framework/src/play/src/main/scala/play/api/Configuration.scala	/^    def asJavaRecursively[A](data: Map[A, Any]): Map[A, Any] = {$/;"	m
asJson	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def asJson: Option[JsValue] = this match {$/;"	m
asMultipartFormData	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def asMultipartFormData: Option[MultipartFormData[TemporaryFile]] = this match {$/;"	m
asRaw	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def asRaw: Option[RawBuffer] = this match {$/;"	m
asSimple	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def asSimple: SimpleSql[Row] = SimpleSql(this, Nil, defaultParser)$/;"	m
asSimple	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def asSimple[T](parser: RowParser[T] = defaultParser): SimpleSql[T] = SimpleSql(this, Nil, parser)$/;"	m
asTableRow	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^        def asTableRow(module: Map[Symbol, Any]): Seq[(String, String, String, Boolean)] = {$/;"	m
asText	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def asText: Option[String] = this match {$/;"	m
asXml	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def asXml: Option[NodeSeq] = this match {$/;"	m
assets	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val assets = inAllDependencies(ref, playAssetsDirectories, SbtProject structure state).foldLeft(Seq.empty[File])(_ ++ _)$/;"	C
assetsMapping	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val assetsMapping = mappings ++ externalMappings$/;"	C
async	framework/src/play/src/main/scala/play/api/mvc/Render.scala	/^    def async(f: PartialFunction[MediaRange, Future[SimpleResult]])(implicit request: RequestHeader): Future[SimpleResult] = {$/;"	m
async	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^  def async[A](f: RequestHeader => Future[(Iteratee[A, _], Enumerator[A])])(implicit frameFormatter: FrameFormatter[A]): WebSocket[A] = {$/;"	m
async	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def async(p: scala.concurrent.Future[Result]) = AsyncResult(p)$/;"	m
asyncHttpConfig	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    val asyncHttpConfig = new AsyncHttpClientConfig.Builder()$/;"	C
at	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^  def at(path: String, file: String): Action[AnyContent] = Action { request =>$/;"	m
at	framework/src/play/src/main/scala/play/api/controllers/ExternalAssets.scala	/^  def at(rootPath: String, file: String): Action[AnyContent] = Action { request =>$/;"	m
authenticate	framework/src/play/src/main/scala/play/api/mvc/Security.scala	/^    def authenticate[A](request: Request[A], block: (AuthenticatedRequest[A, U]) => Future[SimpleResult]) = {$/;"	m
availables	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def availables(implicit app: Application): Seq[Lang] = {$/;"	m
await	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def await[T](future: Future[T])(implicit timeout: Timeout): T = Await.result(future, timeout.duration)$/;"	m
await	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def await[T](future: Future[T], timeout: Long, unit: TimeUnit = TimeUnit.MILLISECONDS): T =$/;"	m
await	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def await(timeout: Long, unit: TimeUnit = TimeUnit.MILLISECONDS): NotWaiting[A] = {$/;"	m
await	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def await: NotWaiting[A] = await(Promise.defaultTimeout)$/;"	m
axAttributes	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    def axAttributes = params.foldLeft(Map[String, String]()) {$/;"	m
axOptionalParams	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      val axOptionalParams = if (axOptional.isEmpty) Nil$/;"	C
axRequiredParams	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      val axRequiredParams = if (axRequired.isEmpty) Nil$/;"	C
az	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          val az = parts.collect { case Right(a) => a }$/;"	C
b	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^      val b = array(i) & 0xff$/;"	C
b	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^        val b = ChannelBuffers.wrappedBuffer(x)$/;"	C
b	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^      val b = in(inPos) & 0xFF$/;"	C
b	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^      val b = next()$/;"	C
backingThreadFactory	framework/src/play/src/main/scala/play/core/system/Execution.scala	/^      val backingThreadFactory = Executors.defaultThreadFactory()$/;"	C
backingThreadFactory	framework/src/play/src/main/scala/play/core/system/NamedThreadFactory.scala	/^  val backingThreadFactory = Executors.defaultThreadFactory()$/;"	C
bad	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          val bad = parts.collect { case Left(b @ BadPart(_)) => b }$/;"	C
badMediaType	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val badMediaType = badPart(c => c != ',', "Bad media type")$/;"	C
badParameter	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val badParameter = badPart(c => c != ',' && c != ';', "Bad media type parameter")$/;"	C
badPart	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def badPart(p: Char => Boolean, msg: => String) = rep1(acceptIf(p)(ignoreErrors)) ^^ {$/;"	m
badRequest	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def badRequest(error: String) = Action.async { request =>$/;"	m
bar	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^          def bar(length: Int) = (1 to length).map(_ => "-").mkString$/;"	m
baseAction	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^    val baseAction = play.api.Play.maybeApplication.map { app =>$/;"	C
bd	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^            val bd = BigDecimal(s)$/;"	C
beforeStart	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def beforeStart(app: Application) {$/;"	m
beforeStarted	framework/src/sbt-plugin/src/main/scala/play/PlayRunHooks.scala	/^  def beforeStarted(): Unit = ()$/;"	m
bigDecimal	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def bigDecimal(precision: Int, scale: Int): Mapping[BigDecimal] = of[BigDecimal] as bigDecimalFormat(Some(precision, scale))$/;"	m
bigDecimal	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val bigDecimal: Mapping[BigDecimal] = of[BigDecimal]$/;"	C
bigDecimalFormat	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^  def bigDecimalFormat(precision: Option[(Int, Int)]): Formatter[BigDecimal] = new Formatter[BigDecimal] {$/;"	m
binaryFrame	framework/src/play/src/main/scala/play/core/server/websocket/Frame.scala	/^  val binaryFrame = FrameFormatter[Array[Byte]]($/;"	C
bind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bind(data: Map[String, String]) = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bind(data: Map[String, String]): Either[Seq[FormError], B] = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bind(data: Map[String, String]): Either[Seq[FormError], List[T]] = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bind(data: Map[String, String]): Either[Seq[FormError], Option[T]] = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bind(data: Map[String, String]): Either[Seq[FormError], T] = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bind(data: Map[String, String]): Either[Seq[FormError], T]$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bind(data: Map[String, String]): Form[T] = mapping.bind(data).fold($/;"	m
bind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bind(data: play.api.libs.json.JsValue): Form[T] = bind(FormUtils.fromJson(js = data))$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def bind(key: String, data: Map[String, String]) = Right(value)$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def bind(key: String, data: Map[String, String]) = data.get(key).toRight(Seq(FormError(key, "error.required", Nil)))$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def bind(key: String, data: Map[String, String]) = parsing(dateParse, "error.date", Nil)(key, data)$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def bind(key: String, data: Map[String, String]) = parsing(formatter.parseDateTime, "error.date", Nil)(key, data)$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def bind(key: String, data: Map[String, String]) = parsing(jodaLocalDateParse, "error.date", Nil)(key, data)$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def bind(key: String, data: Map[String, String]) = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def bind(key: String, data: Map[String, String]) =$/;"	m
bind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^  def bind(key: String, data: Map[String, String]): Either[Seq[FormError], T]$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def bind(key: String, params: Map[String, Seq[String]]) = Some(Right(bindList[T](key, params)))$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def bind(key: String, params: Map[String, Seq[String]]) = Some(Right(bindList[T](key, params).asJava))$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def bind(key: String, params: Map[String, Seq[String]]) = params.get(key).flatMap(_.headOption).map { p =>$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def bind(key: String, params: Map[String, Seq[String]]) = params.get(key).flatMap(_.headOption).map(Right(_)) \/\/ No need to URL decode from query string since netty already does that$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def bind(key: String, params: Map[String, Seq[String]]) = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def bind(key: String, params: Map[String, Seq[String]]): Option[Either[String, B]] = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def bind(key: String, value: String) = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def bind(key: String, value: String): Either[String, A] = {$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def bind(key: String, value: String): Either[String, B] = self.bind(key, value).right.map(toB)$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  def bind(key: String, params: Map[String, Seq[String]]): Option[Either[String, A]]$/;"	m
bind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  def bind(key: String, value: String): Either[String, A]$/;"	m
bind	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def bind(data: Map[String, String]): Either[Seq[FormError], R] = {$/;"	m
bindFromRequest	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bindFromRequest()(implicit request: play.api.mvc.Request[_]): Form[T] = {$/;"	m
bindFromRequest	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def bindFromRequest(data: Map[String, Seq[String]]): Form[T] = {$/;"	m
bits	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    val bits = new BitSet(256)$/;"	C
black	framework/src/console/src/main/scala/Console.scala	/^  def black(str: String): String = if (isANSISupported) (BLACK + str + RESET) else str$/;"	m
black	framework/src/play/src/main/scala/play/utils/Colors.scala	/^  def black(str: String): String = if (isANSISupported) (BLACK + str + RESET) else str$/;"	m
blankLine	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def blankLine = ignoreWhiteSpace <~ newLine ^^ { case _ => Comment("") }$/;"	m
blue	framework/src/console/src/main/scala/Console.scala	/^  def blue(str: String): String = if (isANSISupported) (BLUE + str + RESET) else str$/;"	m
blue	framework/src/play/src/main/scala/play/utils/Colors.scala	/^  def blue(str: String): String = if (isANSISupported) (BLUE + str + RESET) else str$/;"	m
body	framework/src/play/src/main/scala/play/api/mvc/Content.scala	/^  def body: String$/;"	m
body	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      val body = a$/;"	C
body	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def body = request.body$/;"	m
body	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def body: A$/;"	m
body	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def body = toString$/;"	m
body	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def body = null$/;"	m
body	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def body = req.body$/;"	m
body	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^              val body = {$/;"	C
bodyEnumerator	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val bodyEnumerator = {$/;"	C
bodyGenerator	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^      val bodyGenerator = new FileBodyGenerator(body);$/;"	C
bodyHandlerResult	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^    val bodyHandlerResult = Promise[Iteratee[Array[Byte], A]]()$/;"	C
bodyIteratee	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^        val bodyIteratee = Promise[Iteratee[Array[Byte], SimpleResult]]$/;"	C
bodyIteratee	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^        val bodyIteratee = if (httpVersion == HttpVersion.HTTP_1_0) {$/;"	C
bodyIteratee	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    val bodyIteratee: Iteratee[Array[Byte], ChannelStatus] = result match {$/;"	C
bodyParser	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^        val bodyParser: Iteratee[Array[Byte], Either[SimpleResult, Either[Future[SimpleResult], A]]] =$/;"	C
bodyParser	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^          val bodyParser = Iteratee.flatten($/;"	C
bodyParserTimeout	framework/src/play/src/main/scala/play/core/server/Server.scala	/^  val bodyParserTimeout = {$/;"	C
bool	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def bool(columnName: String): RowParser[Boolean] = get[Boolean](columnName)(implicitly[Column[Boolean]])$/;"	m
boolean	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val boolean: Mapping[Boolean] = of[Boolean]$/;"	C
bootstrap	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^    val bootstrap = newBootstrap$/;"	C
browser	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^    var browser: TestBrowser = null$/;"	l
buffer	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          var buffer = new StringBuffer$/;"	l
buffer	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^        val buffer = new Array[Byte](inMemorySize)$/;"	C
buffer	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^      val buffer = RawBuffer(memoryThreshold)$/;"	C
buffer	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^        val buffer = chunk.map(ChannelBuffers.wrappedBuffer).getOrElse(ChannelBuffers.EMPTY_BUFFER)$/;"	C
buffer	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^      val buffer = new Array[Byte](BufferSize)$/;"	C
bufferedAsEnumerator	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^        val bufferedAsEnumerator = Enumerator(chunk)$/;"	C
bufferingIteratee	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^  def bufferingIteratee(nettyResponse: HttpResponse, startSequence: Int, closeConnection: Boolean, httpVersion: HttpVersion)(implicit ctx: ChannelHandlerContext, e: OrderedUpstreamMessageEvent): Iteratee[Array[Byte], ChannelStatus] = {$/;"	m
buildDesc	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val buildDesc = crossTarget \/ "classes" \/ "public" \/ buildDescName$/;"	C
buildDescName	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val buildDescName = "app.build.js"$/;"	C
buildRequire	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val buildRequire = TaskKey[Seq[(File, File)]]("play-build-require-assets")$/;"	C
buildRequireTask	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val buildRequireTask = (copyResources in Compile, crossTarget, requireJs, requireJsFolder, requireJsShim, requireNativePath, streams) map { (cr, crossTarget, requireJs, requireJsFolder, requireJsShim, requireNativePath, s) =>$/;"	C
builder	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val builder = new JProcessBuilder(args: _*)$/;"	C
builder	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^          val builder = new JProcessBuilder(Seq($/;"	C
byteCount	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^        val byteCount = in.read(buffer)$/;"	C
bytes	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^    val bytes = new Array[Byte](12)$/;"	C
bytes	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^                val bytes = new Array[Byte](cBuffer.readableBytes())$/;"	C
bytes	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^            val bytes = new Array[Byte](cBuffer.readableBytes())$/;"	C
c1Size	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^          val c1Size = modules.flatten.map(_._1.size).max$/;"	C
c2Size	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^          val c2Size = modules.flatten.map(_._2.size).max$/;"	C
c3Size	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^          val c3Size = modules.flatten.map(_._3.size).max$/;"	C
cBuffer	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^                val cBuffer = nettyHttpRequest.getContent$/;"	C
cBuffer	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^            val cBuffer = chunk.getContent$/;"	C
cache	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val cache = "com.typesafe.play" %% "play-cache" % play.core.PlayVersion.current$/;"	C
cacheFile	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^      val cacheFile = cache \/ name$/;"	C
cacheFile	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val cacheFile = c \/ "copy-assets"$/;"	C
cacheableResult	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^      def cacheableResult[A <: Result](url: java.net.URL, r: A) = {$/;"	m
cachedLastModified	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^    def cachedLastModified(resource: java.net.URL)(orElseAction: => Option[String]): Option[String] =$/;"	m
cachedResponse	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^        val cachedResponse = lastModifiedResponse.withHeaders(CACHE_CONTROL -> {$/;"	C
calculateTimestamps	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def calculateTimestamps = monitoredFiles.map(f => f.getAbsolutePath -> f.lastModified).toMap$/;"	m
call	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^      def call(ctx: JContext): JPromise[JSimpleResult] = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^      def call(call: => A, handler: HandlerDef): Handler = call$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^      def call(call: => JPromise[JResult], handlerDef: HandlerDef) = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^      def call(call: => JResult, handlerDef: HandlerDef) = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^      def call(call: => play.mvc.WebSocket[Array[Byte]], handler: HandlerDef): Handler = play.core.j.JavaWebSocket.ofBytes(call)$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^      def call(call: => play.mvc.WebSocket[String], handler: HandlerDef): Handler = play.core.j.JavaWebSocket.ofString(call)$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^      def call(call: => play.mvc.WebSocket[com.fasterxml.jackson.databind.JsonNode], handler: HandlerDef): Handler = play.core.j.JavaWebSocket.ofJson(call)$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call(call: => T, handler: HandlerDef): Handler$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call(generator: => Handler): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12], pa13: Param[A13], pa14: Param[A14], pa15: Param[A15], pa16: Param[A16], pa17: Param[A17], pa18: Param[A18], pa19: Param[A19], pa20: Param[A20], pa21: Param[A21])(generator: Function21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12], pa13: Param[A13], pa14: Param[A14], pa15: Param[A15], pa16: Param[A16], pa17: Param[A17], pa18: Param[A18], pa19: Param[A19], pa20: Param[A20])(generator: Function20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12], pa13: Param[A13], pa14: Param[A14], pa15: Param[A15], pa16: Param[A16], pa17: Param[A17], pa18: Param[A18], pa19: Param[A19])(generator: Function19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12], pa13: Param[A13], pa14: Param[A14], pa15: Param[A15], pa16: Param[A16], pa17: Param[A17], pa18: Param[A18])(generator: Function18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12], pa13: Param[A13], pa14: Param[A14], pa15: Param[A15], pa16: Param[A16], pa17: Param[A17])(generator: Function17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12], pa13: Param[A13], pa14: Param[A14], pa15: Param[A15], pa16: Param[A16])(generator: Function16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12], pa13: Param[A13], pa14: Param[A14], pa15: Param[A15])(generator: Function15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12], pa13: Param[A13], pa14: Param[A14])(generator: Function14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12], pa13: Param[A13])(generator: Function13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11], pa12: Param[A12])(generator: Function12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10], pa11: Param[A11])(generator: Function11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9], pa10: Param[A10])(generator: Function10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8, A9](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8], pa9: Param[A9])(generator: Function9[A1, A2, A3, A4, A5, A6, A7, A8, A9, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7, A8](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7], pa8: Param[A8])(generator: Function8[A1, A2, A3, A4, A5, A6, A7, A8, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6, A7](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6], pa7: Param[A7])(generator: Function7[A1, A2, A3, A4, A5, A6, A7, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5, A6](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5], pa6: Param[A6])(generator: Function6[A1, A2, A3, A4, A5, A6, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4, A5](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4], pa5: Param[A5])(generator: Function5[A1, A2, A3, A4, A5, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3, A4](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3], pa4: Param[A4])(generator: Function4[A1, A2, A3, A4, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2, A3](pa1: Param[A1], pa2: Param[A2], pa3: Param[A3])(generator: Function3[A1, A2, A3, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[A1, A2](pa1: Param[A1], pa2: Param[A2])(generator: Function2[A1, A2, Handler]): Handler = {$/;"	m
call	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def call[P](pa: Param[P])(generator: (P) => Handler): Handler = {$/;"	m
category	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                def category = ""$/;"	m
category	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def category = ""$/;"	m
cert	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^        val cert = createSelfSignedCertificate(keyPair)$/;"	C
cert	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^    val cert = new X509CertImpl(certInfo)$/;"	C
certInfo	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^    val certInfo = new X509CertInfo()$/;"	C
certs	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def certs = Future.successful(IndexedSeq.empty)$/;"	m
chain	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^      val chain = filters.reverse.foldLeft(action) { (a, i) => i(a) }$/;"	C
changed	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^              def changed(): Unit = ()$/;"	m
changed	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def changed() { _changed = true }$/;"	m
channel	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^    val channel = bootstrap.bind(new InetSocketAddress(address, port))$/;"	C
channel	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^          val channel = oue.getChannel;$/;"	C
channel	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^    val channel = ctx.getChannel()$/;"	C
char	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val char = acceptIf(_ < 0x80)(_ => "Expected an ascii character")$/;"	C
charSeqToString	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def charSeqToString(chars: Seq[Char]) = new String(chars.toArray)$/;"	m
charset	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def charset(of: Future[SimpleResult])(implicit timeout: Timeout): Option[String] = header(CONTENT_TYPE, of) match {$/;"	m
charset	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    val charset = Option(AsyncHttpProviderUtils.parseCharset(contentType)).getOrElse {$/;"	C
check	framework/src/play/src/main/scala/play/core/server/Server.scala	/^  def check: Boolean$/;"	m
check	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^    def check =$/;"	m
checkClientTrusted	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def checkClientTrusted(x509Certificates: Array[X509Certificate], s: String) {}$/;"	m
checkServerTrusted	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def checkServerTrusted(x509Certificates: Array[X509Certificate], s: String) {}$/;"	m
checked	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def checked(msg: String): Mapping[Boolean] = boolean verifying (msg, _ == true)$/;"	m
chunk	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^      val chunk = new Array[Byte](chunkSize.length + data.length + 4)$/;"	C
chunk	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def chunk(trailers: Option[Iteratee[Array[Byte], Seq[(String, String)]]] = None): Enumeratee[Array[Byte], Array[Byte]] = {$/;"	m
chunk	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def chunk: Enumeratee[Array[Byte], Array[Byte]] = chunk(None)$/;"	m
chunkParser	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    val chunkParser: Iteratee[Array[Byte], Either[Array[Byte], Seq[(String, String)]]] = for {$/;"	C
chunkSize	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^      val chunkSize = Integer.toHexString(data.length).getBytes("UTF-8")$/;"	C
chunked	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def chunked[C](content: Enumerator[C])(implicit writeable: Writeable[C]): SimpleResult = {$/;"	m
chunked	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def chunked(file: java.io.File, chunkSize: Int) = Enumerator.fromFile(file, chunkSize)$/;"	m
chunked	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def chunked(stream: java.io.InputStream, chunkSize: Int): Enumerator[Array[Byte]] = Enumerator.fromStream(stream, chunkSize)$/;"	m
chunked	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def chunked[A](onConnected: play.libs.F.Callback[Channel[A]], onDisconnected: play.libs.F.Callback0): Enumerator[A] = {$/;"	m
chunkedInner	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^        val chunkedInner: Iteratee[Array[Byte], Iteratee[Array[Byte], A]] = formatChunks ><> Enumeratee.passAlong &> inner$/;"	C
cipher	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^    val cipher = provider.map(p => Cipher.getInstance(transformation, p)).getOrElse(Cipher.getInstance(transformation))$/;"	C
cl	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^        val cl = ClassLoader.getSystemClassLoader$/;"	C
claimedId	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    val claimedId = discovery.normalizeIdentifier(openID)$/;"	C
classFiles	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val classFiles = newAnalysis.stamps.allProducts ++ watchFiles$/;"	C
classPathTransformers	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^    val classPathTransformers = if (mainLang == SCALA) Seq(addSourcesManaged) else Seq(addClassesManaged, addScalaLib)$/;"	C
classloader	framework/src/play/src/main/scala/play/api/Application.scala	/^  def classloader: ClassLoader$/;"	m
classloader	framework/src/play/src/main/scala/play/api/Play.scala	/^  def classloader(implicit app: Application): ClassLoader = app.classloader$/;"	m
classpath	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val classpath = (deps.map(_.data.getAbsolutePath).toArray :+ classes.getAbsolutePath).mkString(java.io.File.pathSeparator)$/;"	C
classpath	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val classpath = SbtProject.runTask(classpathTask, state).map(_._2).get.toEither.right.get$/;"	C
classpath	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^          val classpath = dependencies.map(_.data).map(_.getCanonicalPath).reduceLeft(_ + java.io.File.pathSeparator + _)$/;"	C
classpathCommand	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val classpathCommand = Command.command("classpath") { state: State =>$/;"	C
clean	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^    def clean(): Boolean = {$/;"	m
clean	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def clean() {$/;"	m
cleanFlashCookie	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        def cleanFlashCookie(result: SimpleResult): SimpleResult = {$/;"	m
cleanup	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        def cleanup() {$/;"	m
cleanup	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^    val cleanup = ctx.getAttachment$/;"	C
clearingLang	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def clearingLang(implicit app: Application): A = discardingCookies(DiscardingCookie(Play.langCookieName))$/;"	m
client	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^            val client = newClient()$/;"	C
client	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def client: AsyncHttpClient = {$/;"	m
close	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^        def close() {$/;"	m
closeEvent	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^          val closeEvent = new DownstreamChannelStateEvent($/;"	C
closureCompilerOptions	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val closureCompilerOptions = SettingKey[Seq[String]]("play-closure-compiler-options")$/;"	C
closureCompilerSettings	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^  def closureCompilerSettings(optionCompilerOptions: com.google.javascript.jscomp.CompilerOptions) = Seq[Setting[_]]($/;"	m
coffee	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^          val coffee = scope.get("CoffeeScript", scope).asInstanceOf[NativeObject]$/;"	C
coffeeCode	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^          val coffeeCode = Path(source).string.replace("\\r", "")$/;"	C
coffeescriptEntryPoints	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val coffeescriptEntryPoints = SettingKey[PathFinder]("play-coffeescript-entry-points")$/;"	C
coffeescriptOptions	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val coffeescriptOptions = SettingKey[Seq[String]]("play-coffeescript-options")$/;"	C
collect	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def collect[B](otherwise: String)(f: PartialFunction[A, B]): RowParser[B] = RowParser(row => parent(row).flatMap(a => if (f.isDefinedAt(a)) Success(f(a)) else Error(SqlMappingError(otherwise))))$/;"	m
collectHeaders	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^            val collectHeaders = maxHeaderBuffer.map { buffer =>$/;"	C
column	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^      val column = m.column.qualified.split('.').last;$/;"	C
columnUpper	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val columnUpper = aliasName.toUpperCase()$/;"	C
columnUpper	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val columnUpper = columnName.toUpperCase()$/;"	C
columns	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val columns = List.range(1, rsMetaData.columnCount + 1)$/;"	C
combineResources	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        def combineResources(resources1: java.util.Enumeration[URL], resources2: java.util.Enumeration[URL]) =$/;"	m
comment	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def comment = """#.*""".r ^^ { case s => Comment(s) }$/;"	m
commonLoader	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val commonLoader = SbtProject.runTask(playCommonClassloader, state).get._2.toEither.right.get$/;"	C
compare	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def compare(a: play.api.http.MediaRange, b: play.api.http.MediaRange) = {$/;"	m
compare	framework/src/play/src/main/scala/play/utils/CaseInsensitiveOrdered.scala	/^  def compare(x: String, y: String): Int = x.compareToIgnoreCase(y)$/;"	m
compareQValues	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def compareQValues(x: Option[BigDecimal], y: Option[BigDecimal]) = {$/;"	m
compareSignedTokens	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def compareSignedTokens(tokenA: String, tokenB: String) = {$/;"	m
compile	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^  def compile(source: File, options: Seq[String]): String = {$/;"	m
compile	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^  def compile(source: File, simpleCompilerOptions: Seq[String], fullCompilerOptions: Option[CompilerOptions]): (String, Option[String], Seq[File]) = {$/;"	m
compile	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^                var compile = function(source) {$/;"	l
compile	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^  def compile(source: File): (String, Option[String], Seq[File]) = {$/;"	m
compiled	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^                    var compiled;$/;"	l
compiler	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val compiler = new Compiler()$/;"	C
compilerFunction	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^          val compilerFunction = coffee.get("compile", scope).asInstanceOf[Function]$/;"	C
compilerFunction	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^    val compilerFunction = scope.get("compile", scope).asInstanceOf[Function]$/;"	C
component	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  def component(id: String) = "com.typesafe.play" %% id % play.core.PlayVersion.current$/;"	m
computeDependencies	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val computeDependencies = TaskKey[Seq[Map[Symbol, Any]]]("ivy-dependencies")$/;"	C
computeDependenciesCommand	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val computeDependenciesCommand = Command.command("dependencies") { state: State =>$/;"	C
computeDependenciesTask	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val computeDependenciesTask = (deliverLocal, ivySbt, streams, organizationName, moduleName, version, scalaBinaryVersion) map { (_, ivySbt, s, org, id, version, scalaVersion) =>$/;"	C
concurrent	framework/src/play/src/main/scala/play/api/libs/concurrent/package.scala	/^package concurrent {$/;"	p
confDirectory	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val confDirectory = SettingKey[File]("play-conf")$/;"	C
confDirectoryLen	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^        val confDirectoryLen = confDirectory.getCanonicalPath.length$/;"	C
config	framework/src/play/src/main/scala/play/api/Configuration.scala	/^      val config = Option(System.getProperty("config.resource"))$/;"	C
config	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^        val config = new PerRequestConfig()$/;"	C
config	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^        val config = Option(System.getProperty("config.resource"))$/;"	C
configResource	framework/src/play/src/main/scala/play/api/Logger.scala	/^          val configResource =$/;"	C
configuration	framework/src/play/src/main/scala/play/api/Application.scala	/^  def configuration: Configuration = fullConfiguration$/;"	m
configuration	framework/src/play/src/main/scala/play/api/Application.scala	/^  def configuration: Configuration$/;"	m
configuration	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def configuration: Configuration = Configuration.empty$/;"	m
configuration	framework/src/play/src/main/scala/play/api/Play.scala	/^  def configuration(implicit app: Application): Configuration = app.configuration$/;"	m
configurator	framework/src/play/src/main/scala/play/api/Logger.scala	/^        val configurator = new JoranConfigurator$/;"	C
configure	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def configure(properties: Map[String, String] = Map.empty, levels: Map[String, ch.qos.logback.classic.Level] = Map.empty, mode: Mode.Value) {$/;"	m
connect	framework/src/play/src/main/scala/play/utils/ProxyDriver.scala	/^  def connect(user: String, properties: java.util.Properties) = proxied.connect(user, properties)$/;"	m
connectSystemIn	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def connectSystemIn(out: OutputStream) = transfer(System.in, out)$/;"	m
consoleReader	framework/src/console/src/main/scala/Console.scala	/^  val consoleReader = new jline.console.ConsoleReader$/;"	C
consoleReader	framework/src/sbt-plugin/src/main/scala/play/PlayInteractionMode.scala	/^    val consoleReader = new ConsoleReader$/;"	C
constantTimeEquals	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def constantTimeEquals(a: String, b: String) = {$/;"	m
constraints	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val constraints: Map[String, Seq[(String, Seq[Any])]] = mapping.mappings.map { m =>$/;"	C
constraints	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val constraints: Seq[Constraint[B]] = wrapped.constraints.map { constraintOfT =>$/;"	C
constraints	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val constraints: Seq[Constraint[T]]$/;"	C
consumer	framework/src/play/src/main/scala/play/api/libs/oauth/OAuth.scala	/^    val consumer = new DefaultOAuthConsumer(info.key.key, info.key.secret)$/;"	C
contains	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def contains[TT: Column, T <: TT](columnName: String, t: T): RowParser[Unit] =$/;"	m
content	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val content = """({appDir: """" + jsFolder + """",$/;"	C
contentAsBytes	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def contentAsBytes(of: Content)(implicit timeout: Timeout): Array[Byte] = of.body.getBytes$/;"	m
contentAsBytes	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def contentAsBytes(of: Future[SimpleResult])(implicit timeout: Timeout): Array[Byte] =$/;"	m
contentAsJson	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def contentAsJson(of: Content)(implicit timeout: Timeout): JsValue = Json.parse(of.body)$/;"	m
contentAsJson	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def contentAsJson(of: Future[SimpleResult])(implicit timeout: Timeout): JsValue = Json.parse(contentAsString(of))$/;"	m
contentAsString	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def contentAsString(of: Content)(implicit timeout: Timeout): String = of.body$/;"	m
contentAsString	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def contentAsString(of: Future[SimpleResult])(implicit timeout: Timeout): String = new String(contentAsBytes(of), charset(of).getOrElse("utf-8"))$/;"	m
contentType	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def contentType(of: Content)(implicit timeout: Timeout): String = of.contentType$/;"	m
contentType	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def contentType(of: Future[SimpleResult])(implicit timeout: Timeout): Option[String] = header(CONTENT_TYPE, of).map(_.split(";").take(1).mkString.trim)$/;"	m
contentType	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    val contentType = Option(ahcResponse.getContentType).getOrElse("application\/octet-stream")$/;"	C
contentType	framework/src/play/src/main/scala/play/api/mvc/Content.scala	/^  def contentType: String$/;"	m
contentType	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def contentType = MimeTypes.TEXT$/;"	m
contentType	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def contentType = MimeTypes.XML$/;"	m
contentType	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  val contentType = MimeTypes.HTML$/;"	C
contentType	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  val contentType = MimeTypes.JAVASCRIPT$/;"	C
contentTypeOfBytes	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def contentTypeOfBytes(mimeType: String): ContentTypeOf[Array[Byte]] = ContentTypeOf(Option(mimeType).orElse(Some("application\/octet-stream")))$/;"	m
context	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^                    var context = [source];$/;"	l
continue	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^      def continue(it: Iteratee[Array[Byte], A]) {$/;"	m
control	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def control(event: ControlEvent.Value, message: => String) = log(Level.Info, message)$/;"	m
controller	framework/src/play/src/main/scala/play/core/router/Router.scala	/^            val controller = handlerDef.ref.getClass.getClassLoader.loadClass(handlerDef.controller)$/;"	C
controllerAnnotations	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^  val controllerAnnotations = play.api.libs.Collections.unfoldLeft[Seq[java.lang.annotation.Annotation], Option[Class[_]]](Option(controller)) { clazz =>$/;"	C
controllers	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^package controllers$/;"	p
controllers	framework/src/play/src/main/scala/play/api/controllers/Default.scala	/^package controllers$/;"	p
controllers	framework/src/play/src/main/scala/play/api/controllers/ExternalAssets.scala	/^package controllers$/;"	p
convert	framework/src/play/src/main/scala/play/api/Logger.scala	/^    def convert(event: ILoggingEvent): String = {$/;"	m
cookie	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def cookie(name: String): Option[Cookie] = cookies.find(_.name == Option(name))$/;"	m
cookie	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      val cookie = encode(serialize(data))$/;"	C
cookieValues	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^        val cookieValues = Cookies.decode(value).map {$/;"	C
cookies	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def cookies(of: Future[SimpleResult])(implicit timeout: Timeout): Cookies = Cookies(header(SET_COOKIE, of))$/;"	m
cookies	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def cookies: Seq[Cookie] = {$/;"	m
cookies	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def cookies = new JCookies {$/;"	m
copy	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def copy($/;"	m
copyFile	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^  def copyFile(from: File, to: File, copyAttributes: Boolean = true, replaceExisting: Boolean = true): Path = {$/;"	m
copyRecursively	framework/src/console/src/main/scala/Console.scala	/^    def copyRecursively(from: Path, target: Path) {$/;"	m
coreSettings	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^    val coreSettings = new File(settingsDir.toString + java.io.File.separator + "org.eclipse.core.resources.prefs")$/;"	C
count	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    var count = n$/;"	l
count	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^    def count(): (Int, Int, Int) = {$/;"	m
counter	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^    val counter = Ref(0)$/;"	C
cp	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^        val cp = deps.map(_.data.toURI.toURL).toArray :+ classes.toURI.toURL$/;"	C
createDelegatedResourcesClassLoader	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^  val createDelegatedResourcesClassLoader: ClassLoaderCreator = (name, urls, parent) => new java.net.URLClassLoader(urls, parent) {$/;"	C
createDirectory	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^  def createDirectory(path: File): Path = Path(path).createDirectory(failIfExists = false)$/;"	m
createJavaContext	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^  def createJavaContext(req: RequestHeader): JContext = {$/;"	m
createJavaContext	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^  def createJavaContext(req: Request[RequestBody]): JContext = {$/;"	m
createJavaRequest	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^  def createJavaRequest(req: RequestHeader): JRequest = {$/;"	m
createNettyResponse	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^  def createNettyResponse(header: ResponseHeader, closeConnection: Boolean, httpVersion: HttpVersion) = {$/;"	m
createRequestHeader	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        def createRequestHeader(parameters: Map[String, Seq[String]] = Map.empty[String, Seq[String]]) = {$/;"	m
createResult	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^  def createResult(javaContext: JContext, javaResult: JSimpleResult): SimpleResult = {$/;"	m
createSelfSignedCertificate	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^  def createSelfSignedCertificate(keyPair: KeyPair): X509Certificate = {$/;"	m
createServer	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def createServer(applicationPath: File): Option[NettyServer] = {$/;"	m
createURLClassLoader	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^  val createURLClassLoader: ClassLoaderCreator = (name, urls, parent) => new java.net.URLClassLoader(urls, parent) {$/;"	C
css	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^      val css = ScriptableObject.getProperty(result, "css").toString$/;"	C
ctl	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val ctl = acceptIf { c =>$/;"	C
ctx	framework/src/play/src/main/scala/play/api/Logger.scala	/^        val ctx = LoggerFactory.getILoggerFactory.asInstanceOf[LoggerContext]$/;"	C
ctx	framework/src/play/src/main/scala/play/api/Logger.scala	/^    val ctx = LoggerFactory.getILoggerFactory.asInstanceOf[LoggerContext]$/;"	C
ctx	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^    val ctx = Context.enter$/;"	C
ctx	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val ctx = Context.enter; ctx.setOptimizationLevel(-1)$/;"	C
ctx	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^    val ctx = Context.enter$/;"	C
current	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^      val current = atomic { implicit txn =>$/;"	C
current	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^        val current = iterateeRef.single.swap(Iteratee.flatten(eventuallyNext.future))$/;"	C
currentAnalysis	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      var currentAnalysis = Option.empty[sbt.inc.Analysis]$/;"	l
currentApplicationClassLoader	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      var currentApplicationClassLoader: Option[ClassLoader] = None$/;"	l
currentInfos	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^      val currentInfos = watch(src).get.map(f => f -> FileInfo.lastModified(f)).toMap$/;"	C
currentMode	framework/src/play/src/main/scala/play/api/Configuration.scala	/^      val currentMode = Play.maybeApplication.map(_.mode).getOrElse(mode)$/;"	C
currentProducts	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      var currentProducts = Map.empty[java.io.File, Long]$/;"	l
cyan	framework/src/console/src/main/scala/Console.scala	/^  def cyan(str: String): String = if (isANSISupported) (CYAN + str + RESET) else str$/;"	m
cyan	framework/src/play/src/main/scala/play/utils/Colors.scala	/^  def cyan(str: String): String = if (isANSISupported) (CYAN + str + RESET) else str$/;"	m
d	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^      val d = dfp.parseDateTime(date.replace(parsableTimezoneCode, "")).toDate$/;"	C
d	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^      val d = "com.typesafe.play" %% "play" % play.core.PlayVersion.current$/;"	C
data	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    def data(rs: java.sql.ResultSet) = columns.map(nb => rs.getObject(nb))$/;"	m
data	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          val data = parts.collect { case Left(DataPart(key, value)) => (key, value) }.groupBy(_._1).mapValues(_.map(_._2))$/;"	C
date	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def date(columnName: String): RowParser[Date] = get[Date](columnName)(implicitly[Column[Date]])$/;"	m
date	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def date(pattern: String, timeZone: java.util.TimeZone = java.util.TimeZone.getDefault): Mapping[java.util.Date] = of[java.util.Date] as dateFormat(pattern, timeZone)$/;"	m
date	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val date: Mapping[java.util.Date] = of[java.util.Date]$/;"	C
dateFormat	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^  def dateFormat(pattern: String, timeZone: TimeZone = TimeZone.getDefault): Formatter[Date] = new Formatter[Date] {$/;"	m
dateFormat	framework/src/play/src/main/scala/play/api/http/package.scala	/^  val dateFormat = DateTimeFormat.forPattern("EEE, dd MMM yyyy HH:mm:ss 'GMT'").withLocale(java.util.Locale.ENGLISH).withZone(DateTimeZone.forID("GMT"))$/;"	C
dateFormatter	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    val dateFormatter = dateFormat(pattern, timeZone)$/;"	C
dateParse	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def dateParse(data: String) = formatter.parseDateTime(data).toDate$/;"	m
debug	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def debug(message: => String) {$/;"	m
debug	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def debug(message: => String, error: => Throwable) {$/;"	m
debug	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^      val debug = debugCompiler(source)$/;"	C
dechunk	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def dechunk: Enumeratee[Array[Byte], Array[Byte]] = {$/;"	m
decode	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def decode(cookieHeader: String): Seq[Cookie] = {$/;"	m
decode	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def decode(data: String): Map[String, String] = {$/;"	m
decodeFromCookie	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def decodeFromCookie(cookie: Option[Cookie]): T = {$/;"	m
decodePath	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^  def decodePath(s: String, outputCharset: String): String = {$/;"	m
decodePathSegment	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^  def decodePathSegment(s: String, outputCharset: String): String = {$/;"	m
decodedFile	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^    val decodedFile = UriEncoding.decodePath(file, "utf-8")$/;"	C
decryptAES	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def decryptAES(value: String): String = {$/;"	m
decryptAES	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def decryptAES(value: String, privateKey: String): String = {$/;"	m
default	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def default(baseUrl: Option[String] = None) = of(classOf[HtmlUnitDriver], baseUrl)$/;"	m
default	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def default[A](mapping: Mapping[A], value: A): Mapping[A] = OptionalMapping(mapping).transform(_.getOrElse(value), Some(_))$/;"	m
defaultContext	framework/src/play/src/main/scala/play/api/libs/concurrent/Execution.scala	/^  val defaultContext = Implicits.defaultContext$/;"	C
defaultField	framework/src/play/src/main/scala/views/html/helper/package.scala	/^  val defaultField = defaultFieldConstructor.f$/;"	C
defaultJavaTemplatesImport	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val defaultJavaTemplatesImport = Seq($/;"	C
defaultLocale	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    val defaultLocale = java.util.Locale.getDefault$/;"	C
defaultName	framework/src/console/src/main/scala/Console.scala	/^    val defaultName = path.getName$/;"	C
defaultOptions	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^      val defaultOptions = new CompilerOptions()$/;"	C
defaultScalaTemplatesImport	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val defaultScalaTemplatesImport = Seq($/;"	C
defaultTemplatesImport	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val defaultTemplatesImport = Seq("play.api.templates._", "play.api.templates.PlayMagic._")$/;"	C
defaultTimeout	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  val defaultTimeout = DeprecatedPlayPromise.defaultTimeout$/;"	C
defaultUpStreamHandler	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  val defaultUpStreamHandler = new PlayDefaultUpstreamHandler(this, allChannels)$/;"	C
defineArguments	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^      val defineArguments = """arguments = ['-o', '""" + source.getAbsolutePath + "']"$/;"	C
defining	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^    def defining[T](t: T)(handler: T => Any) = {$/;"	m
definitions	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      val definitions = (axRequired ++ axOptional).map(attribute => ("openid.ax.type." + attribute._1 -> attribute._2))$/;"	C
delayed	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def delayed[A](callable: Callable[A], duration: Long, unit: TimeUnit, ec: ExecutionContext): F.Promise[A] =$/;"	m
delayed	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def delayed[A](function: F.Function0[A], duration: Long, unit: TimeUnit, ec: ExecutionContext): F.Promise[A] =$/;"	m
delegate	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^        val delegate: Option[String] = localidRegex.findFirstIn(response.body)$/;"	C
delete	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def delete(): Future[Response] = prepare("DELETE").execute$/;"	m
dependencies	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^        val dependencies = previousRelation.filter((original, compiled) => changedFiles.contains(original))._2s$/;"	C
dependencies	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^                    var dependencies = [source];$/;"	l
dependencies	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^      val dependencies = ScriptableObject.getProperty(result, "dependencies").asInstanceOf[NativeArray]$/;"	C
deps	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val deps: Seq[Map[Symbol, Any]] = (report \\ "dependencies" \\ "module").flatMap { module =>$/;"	C
deps	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    def deps(ref: ProjectRef): Seq[ProjectRef] =$/;"	m
deserialize	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def deserialize(data: Map[String, String]) = new Flash(data)$/;"	m
deserialize	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def deserialize(data: Map[String, String]) = new Session(data)$/;"	m
devSettings	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def devSettings: Map[String, String]$/;"	m
devSettings	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val devSettings = SettingKey[Seq[(String, String)]]("play-dev-settings")$/;"	C
digest	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^    val digest = MessageDigest.getInstance("MD5")$/;"	C
digest	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^    val digest = MessageDigest.getInstance("SHA-1")$/;"	C
directories	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val directories = dir.listFiles(new FileFilter {$/;"	C
discard	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def discard = DiscardingCookie(COOKIE_NAME, path, domain, secure)$/;"	m
discardingCookies	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def discardingCookies(cookies: DiscardingCookie*): A$/;"	m
discardingCookies	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def discardingCookies(cookies: DiscardingCookie*): AsyncResult = {$/;"	m
discardingCookies	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def discardingCookies(cookies: DiscardingCookie*): SimpleResult = {$/;"	m
discardingCookies	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def discardingCookies(name: String, names: String*): A = discardingCookies((name :: names.toList).map(n => DiscardingCookie(n)): _*)$/;"	m
discardingErrors	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def discardingErrors: Form[T] = this.copy(errors = Seq.empty)$/;"	m
discoverServer	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  def discoverServer(openID: String): Future[OpenIDServer] = {$/;"	m
discovery	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  val discovery = new Discovery(ws)$/;"	C
discoveryUrl	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    val discoveryUrl = normalizeIdentifier(openID)$/;"	C
display	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^        def display(modules: Seq[Seq[(String, String, String, Boolean)]]) {$/;"	m
doFilter	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def doFilter(next: EssentialAction): EssentialAction = next$/;"	m
doFilter	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def doFilter(next: RequestHeader => Handler): (RequestHeader => Handler) = {$/;"	m
doWithoutEcho	framework/src/sbt-plugin/src/main/scala/play/PlayInteractionMode.scala	/^  def doWithoutEcho(f: => Unit): Unit = {$/;"	m
doWithoutEcho	framework/src/sbt-plugin/src/main/scala/play/PlayInteractionMode.scala	/^  def doWithoutEcho(f: => Unit): Unit$/;"	m
docDirectoryLen	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^        val docDirectoryLen = docDirectory.getCanonicalPath.length$/;"	C
docHandlerFactoryClass	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^          val docHandlerFactoryClass = docsLoader.loadClass("play.docs.SBTDocHandlerFactory")$/;"	C
docsJarFile	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val docsJarFile = {$/;"	C
docsLoader	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val docsLoader = new URLClassLoader(urls(docsAppClasspath), applicationLoader)$/;"	C
documentation	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^      def documentation = parentRoutes.map(_.documentation).getOrElse(Nil)$/;"	m
documentation	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def documentation: Seq[(String, String, String)]$/;"	m
domain	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def domain: String = ahcCookie.getDomain$/;"	m
domain	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def domain: String$/;"	m
domain	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def domain: Option[String] = None$/;"	m
done	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^        val done = Done[Array[Byte], ChannelStatus](new ChannelStatus(closeConnection, startSequence))$/;"	C
doneIteratee	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^      val doneIteratee = Promise[Iteratee[A, C]]$/;"	C
doneOrError	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^      var doneOrError = false$/;"	l
driver	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^    val driver = clazz.newInstance$/;"	C
drop	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def drop[A](these: Var[Stream[A]], n: Int): Stream[A] = {$/;"	m
dropPrefix	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^    def dropPrefix(s: String, prefix: String) = if (s.startsWith(prefix)) {$/;"	m
duration	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^                val duration = System.currentTimeMillis - start$/;"	C
duration	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^      val duration = end - start$/;"	C
dynamicString	framework/src/play/src/main/scala/play/core/router/Router.scala	/^  def dynamicString(dynamic: String): String = {$/;"	m
e	framework/src/sbt-plugin/src/main/scala/test/PlayTestListener.scala	/^                  val e = SbtOptionalThrowable.unapply(te.throwable).getOrElse(new RuntimeException("some unexpected error occurred during test execution"))$/;"	C
eRegex	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^      val eRegex = """.*Parse error on line (\\d+):.*""".r$/;"	C
eRegex	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^      val eRegex = """.*Parse error on line (\\d+):.*""".r$/;"	C
eToScript	framework/src/play/src/main/scala/play/api/libs/Comet.scala	/^      val eToScript = Enumeratee.map[E](data => Html("""<script type="text\/javascript">""" + callback + """(""" + encoder.toJavascriptMessage(data) + """);<\/script>"""))$/;"	C
ebeanEnabled	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val ebeanEnabled = SettingKey[Boolean]("play-ebean-enabled")$/;"	C
eclipseCommandSettings	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^  def eclipseCommandSettings(mainLang: String) = {$/;"	m
elOrEmpty	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def elOrEmpty(data: Array[Byte]) = {$/;"	m
email	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val email: Mapping[String] = of[String] verifying Constraints.pattern($/;"	C
empty	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def empty = Configuration(ConfigFactory.empty())$/;"	m
empty	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def empty: BodyParser[Option[Any]] = BodyParser("empty") { request =>$/;"	m
empty	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def empty = new Txt(new StringBuilder)$/;"	m
empty	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def empty = new Xml(new StringBuilder)$/;"	m
empty	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def empty: Html = new Html(new StringBuilder)$/;"	m
empty	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def empty = Results.EmptyContent()$/;"	m
emptyCookie	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def emptyCookie: T$/;"	m
emptyCookie	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    val emptyCookie = new Flash$/;"	C
emptyCookie	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    val emptyCookie = new Session$/;"	C
emptyHeaders	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def emptyHeaders = Map.empty[String, String]$/;"	m
enabled	framework/src/play/src/main/scala/play/api/Plugins.scala	/^  def enabled: Boolean = true$/;"	m
encode	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def encode(cookies: Seq[Cookie]): String = {$/;"	m
encode	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def encode(data: Map[String, String]): String = {$/;"	m
encodeAsCookie	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def encodeAsCookie(data: T): Cookie = {$/;"	m
encodePathSegment	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^  def encodePathSegment(s: String, inputCharset: String): String = {$/;"	m
encoded	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      val encoded = data.map {$/;"	C
encoder	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      val encoder = new CookieEncoder(true)$/;"	C
encryptAES	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def encryptAES(value: String): String = {$/;"	m
encryptAES	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def encryptAES(value: String, privateKey: String): String = {$/;"	m
end	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val end = not(any)$/;"	C
end	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def end = """\\s*""".r$/;"	m
end	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^      var end = s.indexOf(c, start)$/;"	l
end	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^    var end = System.currentTimeMillis$/;"	l
entrySet	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def entrySet: Set[(String, ConfigValue)] = underlying.entrySet().asScala.map(e => e.getKey -> e.getValue).toSet$/;"	m
enum	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^      val enum = Enumerator.flatten(p.map(_._2))$/;"	C
enumerator	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val enumerator = websocketHandshake(ctx, nettyHttpRequest, e)(ws.frameFormatter)$/;"	C
enumerator	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^    val enumerator = new Enumerator[A] {$/;"	C
env	framework/src/play/src/main/scala/play/api/libs/JNDI.scala	/^    val env = new java.util.Hashtable[String, String]$/;"	C
equal	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^      var equal = 0$/;"	l
equal	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^          var equal = 0$/;"	l
err	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^    def err(node: Node) = throw new RuntimeException("error proccessing " + Node)$/;"	m
err	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^    var err = List[String]()$/;"	l
err	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    var err = List[String]()$/;"	l
errReverse	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^      val errReverse = err.reverse$/;"	C
errReverse	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^      val errReverse = err.reverse$/;"	C
error	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def error(message: => String) {$/;"	m
error	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def error(message: => String, error: => Throwable) {$/;"	m
error	framework/src/play/src/main/scala/play/api/controllers/Default.scala	/^  def error: Action[AnyContent] = Action {$/;"	m
error	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def error(key: String): Option[FormError] = errors.find(_.key == key)$/;"	m
error	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def error[A](result: Future[SimpleResult]): BodyParser[A] = BodyParser("error, result=" + result) { request =>$/;"	m
error	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^        val error = Results.HttpVersionNotSupported("The response to this request is chunked and hence requires HTTP 1.1 to be sent, but this is a HTTP 1.0 request.")$/;"	C
error	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^                  val error = new RuntimeException("Body parser iteratee in error: " + msg)$/;"	C
error	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^        val error = e.getValue.asInstanceOf[Scriptable]$/;"	C
error	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^        val error = compiler.getErrors().head$/;"	C
error	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^      val error = "error in: " + in + " \\n" + errReverse.mkString("\\n")$/;"	C
error	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^        val error = e.getValue.asInstanceOf[Scriptable]$/;"	C
errorFile	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^        val errorFile = all.find(f => f.getAbsolutePath() == error.sourceName)$/;"	C
errors	framework/src/play/src/main/scala/play/api/data/Form.scala	/^    val errors = collectErrors(value)$/;"	C
errors	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def errors(key: String): Seq[FormError] = errors.filter(_.key == key)$/;"	m
errors	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def errors(implicit lang: play.api.i18n.Lang): Seq[String] = {$/;"	m
errors	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^      var errors, failures = 0$/;"	l
errorsAsJson	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def errorsAsJson(implicit lang: play.api.i18n.Lang): play.api.libs.json.JsValue = {$/;"	m
escape	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          var escape: Boolean = false$/;"	l
escape	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def escape(text: String) = Txt(text)$/;"	m
escape	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def escape(text: String) = Xml(org.apache.commons.lang3.StringEscapeUtils.escapeXml(text))$/;"	m
escape	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def escape(text: String): Html = {$/;"	m
escape	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def escape(text: String): JavaScript = JavaScript(StringEscapeUtils.escapeEcmaScript(text))$/;"	m
escape	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^    def escape(text: String): T$/;"	m
eu.henkelmann.sbt	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^package eu.henkelmann.sbt$/;"	p
events	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^    val events: ListBuffer[TEvent] = new ListBuffer()$/;"	C
eventuallyIteratee	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^      val eventuallyIteratee = Promise[Iteratee[A, Any]]()$/;"	C
eventuallyNext	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^        val eventuallyNext = Promise[Iteratee[A, Any]]()$/;"	C
eventuallyResult	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^          val eventuallyResult: Future[SimpleResult] = if (nettyHttpRequest.isChunked) {$/;"	C
eventuallyResultWithSequence	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^          val eventuallyResultWithSequence: Future[(SimpleResult, Int)] = expectContinue match {$/;"	C
execute	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def execute()(implicit connection: java.sql.Connection): Array[Int] = getFilledStatement(connection).executeBatch()$/;"	m
execute	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def execute()(implicit connection: java.sql.Connection): Boolean = getFilledStatement(connection).execute()$/;"	m
execute	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def execute(method: String): Future[Response] = prepare(method).execute$/;"	m
execute	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^    def execute(runnable: Runnable) = delegate.execute(runnable) \/\/ FIXME: Make calling this an error once SI-7383 is fixed$/;"	m
execute	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^  def execute(runnable: Runnable) = delegate.execute(new Runnable {$/;"	m
execute	framework/src/play/src/main/scala/play/core/j/OrderedExecutionContext.scala	/^  def execute(runnable: Runnable) = {$/;"	m
execute1	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def execute1(getGeneratedKeys: Boolean = false)(implicit connection: java.sql.Connection): (java.sql.PreparedStatement, Int) = {$/;"	m
executeInsert	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def executeInsert[A](generatedKeysParser: ResultSetParser[A] = scalar[Long].singleOpt)(implicit connection: java.sql.Connection): A = {$/;"	m
executeNativeCompiler	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^  def executeNativeCompiler(in: String, source: File): String = {$/;"	m
executeUpdate	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def executeUpdate()(implicit connection: java.sql.Connection): Int =$/;"	m
executionContext	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def executionContext: ExecutionContext = play.api.libs.concurrent.Execution.defaultContext$/;"	m
executionContext	framework/src/play/src/main/scala/play/core/system/Invoker.scala	/^  val executionContext: scala.concurrent.ExecutionContext = system.dispatcher$/;"	C
exit	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^    val exit = qb ! ProcessLogger((s) => out ::= s, (s) => err ::= s)$/;"	C
exit	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val exit = qb ! ProcessLogger((s) => out ::= s, (s) => err ::= s)$/;"	C
expectContinue	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^          val expectContinue: Option[_] = requestHeader.headers.get("Expect").filter(_.equalsIgnoreCase("100-continue"))$/;"	C
extend	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def extend[B](k: Function1[Future[A], B])(implicit ec: ExecutionContext): Future[B] = {$/;"	m
extend1	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def extend1[B](k: Function1[NotWaiting[A], B])(implicit ec: ExecutionContext): Future[B] = extend[B](p => k(p.value.get match { case scala.util.Failure(e) => Thrown(e); case scala.util.Success(a) => Redeemed(a) }))(ec)$/;"	m
extension	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^        val extension = p.name.split('.').last$/;"	C
externalMappings	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val externalMappings = externals.map {$/;"	C
extractAxAttribute	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    val extractAxAttribute: PartialFunction[String, (String, String)] = {$/;"	C
extractSignedToken	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def extractSignedToken(token: String): Option[String] = {$/;"	m
extracted	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val extracted = SbtProject.extract(state)$/;"	C
extracted	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^    val extracted = SbtProject.extract(state)$/;"	C
extracted	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val extracted = SbtProject.extract(state)$/;"	C
extracted	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^    val extracted = SbtProject.extract(state)$/;"	C
extractor	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    val extractor = new UserInfoExtractor(queryString)$/;"	C
exts	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^        val exts = templateTypes(extension)$/;"	C
f	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^    val f = new Function[WebDriver, T]() {$/;"	C
f	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^    val f = java.io.File.separator$/;"	C
f	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^          val f = docsAppClasspath.map(_.data).filter(_.getName.startsWith("play-docs")).head$/;"	C
factory	framework/src/play/src/main/scala/play/core/server/websocket/WebSocketHandshake.scala	/^    val factory = new WebSocketServerHandshakerFactory(getWebSocketLocation(req),$/;"	C
factoryMethod	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^          val factoryMethod = docHandlerFactoryClass.getMethod("fromJar", classOf[JarFile], classOf[String])$/;"	C
fedWithInitialChunk	framework/src/play/src/main/scala/play/api/libs/Comet.scala	/^      val fedWithInitialChunk = Iteratee.flatten(Enumerator(initialChunk) |>> inner)$/;"	C
feed	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def feed[C](content: Enumerator[C])(implicit writeable: Writeable[C]): SimpleResult = {$/;"	m
field1	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val field1 = f1._2.withPrefix(f1._1).withPrefix(key)$/;"	C
field1	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field1 = f1._2.withPrefix(f1._1).withPrefix(key)$/;"	C
field10	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field10 = f10._2.withPrefix(f10._1).withPrefix(key)$/;"	C
field11	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field11 = f11._2.withPrefix(f11._1).withPrefix(key)$/;"	C
field12	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field12 = f12._2.withPrefix(f12._1).withPrefix(key)$/;"	C
field13	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field13 = f13._2.withPrefix(f13._1).withPrefix(key)$/;"	C
field14	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field14 = f14._2.withPrefix(f14._1).withPrefix(key)$/;"	C
field15	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field15 = f15._2.withPrefix(f15._1).withPrefix(key)$/;"	C
field16	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field16 = f16._2.withPrefix(f16._1).withPrefix(key)$/;"	C
field17	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field17 = f17._2.withPrefix(f17._1).withPrefix(key)$/;"	C
field18	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field18 = f18._2.withPrefix(f18._1).withPrefix(key)$/;"	C
field2	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field2 = f2._2.withPrefix(f2._1).withPrefix(key)$/;"	C
field3	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field3 = f3._2.withPrefix(f3._1).withPrefix(key)$/;"	C
field4	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field4 = f4._2.withPrefix(f4._1).withPrefix(key)$/;"	C
field5	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field5 = f5._2.withPrefix(f5._1).withPrefix(key)$/;"	C
field6	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field6 = f6._2.withPrefix(f6._1).withPrefix(key)$/;"	C
field7	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field7 = f7._2.withPrefix(f7._1).withPrefix(key)$/;"	C
field8	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field8 = f8._2.withPrefix(f8._1).withPrefix(key)$/;"	C
field9	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val field9 = f9._2.withPrefix(f9._1).withPrefix(key)$/;"	C
fieldSysPath	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val fieldSysPath = classOf[ClassLoader].getDeclaredField("sys_paths")$/;"	C
fields	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    val fields = (queryString - "openid.mode" + ("openid.mode" -> Seq("check_authentication")))$/;"	C
file	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def file(to: File): BodyParser[File] = BodyParser("file, to=" + to) { request =>$/;"	m
file	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def file(key: String): Option[FilePart[A]] = files.find(_.key == key)$/;"	m
file	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^        val file = new File(path)$/;"	C
file	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^        val file = new File(filename)$/;"	C
fileChanged	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val fileChanged = fileTimestamps.get(f.getAbsolutePath).map { timestamp =>$/;"	C
fileTimestamps	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      var fileTimestamps = calculateTimestamps$/;"	l
fileToServe	framework/src/play/src/main/scala/play/api/controllers/ExternalAssets.scala	/^        val fileToServe = rootPath match {$/;"	C
fileWriterMkdirs	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^    def fileWriterMkdirs(file: File): FileWriter = {$/;"	m
filename	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^        val filename = ScriptableObject.getProperty(error, "filename").toString$/;"	C
fill	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def fill(value: T): Form[T] = {$/;"	m
fillAndValidate	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def fillAndValidate(value: T): Form[T] = {$/;"	m
filledStatement	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def filledStatement(implicit connection: java.sql.Connection) = getFilledStatement(connection)$/;"	m
filter	framework/src/anorm/src/main/scala/anorm/Utils.scala	/^  def filter[EE >: E](p: A => Boolean, error: EE): MayErr[EE, A] = MayErr(e.right.filter(p).getOrElse(Left(error)))$/;"	m
filter	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def filter(p: A => Boolean): Future[A] = null$/;"	m
filterAnnoyingErrorMessages	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^  def filterAnnoyingErrorMessages(message: String): String = {$/;"	m
filters	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val filters = "com.typesafe.play" %% "filters-helpers" % play.core.PlayVersion.current$/;"	C
finalAction	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^    val finalAction = annotations.actionMixins.foldLeft[JAction[_ <: Any]](baseAction) {$/;"	C
findSource	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def findSource(className: String, line: java.lang.Integer): Array[java.lang.Object] = {$/;"	m
finish	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^      def finish(result: Try[Iteratee[Array[Byte], A]]) {$/;"	m
firefox	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def firefox(baseUrl: Option[String] = None) = of(classOf[FirefoxDriver], baseUrl)$/;"	m
first	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^              var first: (Option[(String, String, String)], Option[Int]) = (None, None)$/;"	l
flash	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def flash(of: Future[SimpleResult])(implicit timeout: Timeout): Flash = Flash.decodeFromCookie(cookies(of).get(Flash.COOKIE_NAME))$/;"	m
flashCookie	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^          val flashCookie = {$/;"	C
flashing	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def flashing(flash: Flash): A$/;"	m
flashing	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def flashing(flash: Flash): AsyncResult = {$/;"	m
flashing	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def flashing(flash: Flash): SimpleResult = {$/;"	m
flashing	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def flashing(values: (String, String)*): A$/;"	m
flashing	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def flashing(values: (String, String)*): AsyncResult = {$/;"	m
flashing	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def flashing(values: (String, String)*): SimpleResult = flashing(Flash(values.toMap))$/;"	m
flatMap	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def flatMap[B](f: ID => Option[B]) = toOption.flatMap(f)$/;"	m
flatMap	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def flatMap[B](k: A => RowParser[B]): RowParser[B] = RowParser(row => parent(row).flatMap(a => k(a)(row)))$/;"	m
flatMap	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def flatMap[B](k: A => SqlResult[B]): SqlResult[B] = self match {$/;"	m
flatMap	framework/src/anorm/src/main/scala/anorm/Utils.scala	/^  def flatMap[B, EE >: E](f: A => MayErr[EE, B]): MayErr[EE, B] = {$/;"	m
flatMap	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def flatMap[B](f: A => BodyParser[B]): BodyParser[B] = new BodyParser[B] {$/;"	m
flatMap	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def flatMap[A, B](promise: F.Promise[A], function: F.Function[A, F.Promise[B]], ec: ExecutionContext): F.Promise[B] =$/;"	m
flatten	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def flatten[T1, T2, R](implicit f: anorm.TupleFlattener[(T1 ~ T2) => R]): ((T1 ~ T2) => R) = f.f$/;"	m
flavor	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^    val flavor = if (mainLang == SCALA) EclipseProjectFlavor.Scala else EclipseProjectFlavor.Java$/;"	C
fold	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def fold[R](hasErrors: Form[T] => R, success: T => R): R = value match {$/;"	m
fold	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def fold[B](onError: Throwable => B, onSuccess: A => B): B = this match {$/;"	m
forExtension	framework/src/play/src/main/scala/play/api/libs/MimeTypes.scala	/^  def forExtension(ext: String): Option[String] = types.get(ext)$/;"	m
forField	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def forField[R](key: String)(handler: Field => R): R = handler(this(key))$/;"	m
forFileName	framework/src/play/src/main/scala/play/api/libs/MimeTypes.scala	/^  def forFileName(name: String) = name.split('.').takeRight(1).headOption.flatMap(forExtension(_))$/;"	m
forceReload	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def forceReload() {$/;"	m
foreach	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def foreach(f: ID => Unit) = toOption.foreach(f)$/;"	m
foreach	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def foreach[U](f: (Cookie) => U) {$/;"	m
formUrlEncoded	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def formUrlEncoded(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.urlFormEncoded(Integer.MAX_VALUE)).map {$/;"	m
format	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val format: Option[(String, Seq[Any])] = None$/;"	C
format	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^  val format: Option[(String, Seq[Any])] = None$/;"	C
format	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^      def format(pattern: String) = {$/;"	m
formatChunks	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    val formatChunks = Enumeratee.map[Array[Byte]] { data =>$/;"	C
formatLastModified	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^    def formatLastModified(lastModified: Long): String = df.print(lastModified)$/;"	m
formatTestCase	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^  def formatTestCase(className: String, event: TEvent) = {$/;"	m
formats	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val formats: Map[String, (String, Seq[Any])] = mapping.mappings.map { m =>$/;"	C
formatted	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^          val formatted = (Seq(module.get('module).map {$/;"	C
formatted	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^                val formatted = duration match {$/;"	C
formatter	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    val formatter = org.joda.time.format.DateTimeFormat.forPattern(pattern)$/;"	C
formatter	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    val formatter = org.joda.time.format.DateTimeFormat.forPattern(pattern).withZone(jodaTimeZone)$/;"	C
formatter	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    val formatter = org.joda.time.format.DateTimeFormat.forPattern(pattern).withZone(timeZone)$/;"	C
frameReceived	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^      def frameReceived(ctx: ChannelHandlerContext, input: Input[A]) {$/;"	m
from	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def from(data: Map[String, Any]) = {$/;"	m
fromJson	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def fromJson(prefix: String = "", js: JsValue): Map[String, String] = js match {$/;"	m
fromPath	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def fromPath[T](key: String, default: Option[T] = None)(implicit binder: PathBindable[T]): Param[T] = {$/;"	m
fromQuery	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def fromQuery[T](key: String, default: Option[T] = None)(implicit binder: QueryStringBindable[T]): Param[T] = {$/;"	m
fromThread	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^  def fromThread(delegate: ExecutionContext): ExecutionContextExecutor =$/;"	m
ft	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^        val ft = new OfflineFileTransform(t, cl, classes.getAbsolutePath, classes.getAbsolutePath)$/;"	C
fullUrl	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    val fullUrl = url + Option(queryString).filterNot(_.isEmpty).map { params =>$/;"	C
future	framework/src/play/src/main/scala/play/api/libs/concurrent/Akka.scala	/^  def future[T](body: => T)(implicit app: Application): Future[T] = {$/;"	m
futures	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^    val futures = JavaConverters.iterableAsScalaIterableConverter(promises).asScala.toBuffer.map((_: F.Promise[_ <: A]).wrapped)$/;"	C
generateReverseRouter	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val generateReverseRouter = SettingKey[Boolean]("play-generate-reverse-router",$/;"	C
generateSignedToken	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def generateSignedToken = signToken(generateToken)$/;"	m
generateToken	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def generateToken = {$/;"	m
generated	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^        val generated: Seq[(File, java.io.File)] = (files x relativeTo(Seq(src \/ "assets"))).flatMap {$/;"	C
get	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def get(columnName: String) = {$/;"	m
get	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def get: ID = toOption.get$/;"	m
get	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def get[A](a: String)(implicit c: Column[A]): MayErr[SqlRequestError, A] = SqlParser.get(a)(c)(this) match {$/;"	m
get	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def get[T](columnName: String)(implicit extractor: anorm.Column[T]): RowParser[T] = RowParser { row =>$/;"	m
get	framework/src/anorm/src/main/scala/anorm/Utils.scala	/^  def get = e.fold(e => throw new RuntimeException(e.toString), a => a)$/;"	m
get	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def get: T = value.get$/;"	m
get	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def get(code: String): Option[Lang] = {$/;"	m
get	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def get: A = this match {$/;"	m
get	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def get(): Future[Response] = prepare("GET").execute$/;"	m
get	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def get[A](consumer: ResponseHeaders => Iteratee[Array[Byte], A]): Future[Iteratee[Array[Byte], A]] =$/;"	m
get	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def get(name: String) = cookies.get(name)$/;"	m
get	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def get(key: String) = data.get(key)$/;"	m
get	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def get(key: String): Option[String] = getAll(key).headOption$/;"	m
get	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def get(name: String): Option[Cookie]$/;"	m
get	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def get[A](promise: F.Promise[A], timeout: Long, unit: TimeUnit): A =$/;"	m
get	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^        def get(name: String) = (for (cookie <- req.cookies.get(name))$/;"	m
get	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^      def get(name: String) = {$/;"	m
get	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def get = Success(application)$/;"	m
get	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def get = {$/;"	m
get	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def get: Try[Application]$/;"	m
getAHCResponse	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def getAHCResponse = ahcResponse$/;"	m
getAcceptedIssuers	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def getAcceptedIssuers() = nullArray$/;"	m
getAliased	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def getAliased(aliasName: String) = {$/;"	m
getAliased	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def getAliased[T](aliasName: String)(implicit extractor: anorm.Column[T]): RowParser[T] = RowParser { row =>$/;"	m
getAll	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def getAll(key: String): Seq[String] = {$/;"	m
getBody	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def getBody(result: play.mvc.SimpleResult): Array[Byte] =$/;"	m
getBoolean	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getBoolean(path: String): Option[Boolean] = readValue(path, underlying.getBoolean(path))$/;"	m
getBooleanList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getBooleanList(path: String): Option[java.util.List[java.lang.Boolean]] = readValue(path, underlying.getBooleanList(path))$/;"	m
getBytes	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getBytes(path: String): Option[Long] = readValue(path, underlying.getBytes(path))$/;"	m
getBytesList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getBytesList(path: String): Option[java.util.List[java.lang.Long]] = readValue(path, underlying.getBytesList(path))$/;"	m
getConfig	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getConfig(path: String): Option[Configuration] = readValue(path, underlying.getConfig(path)).map(Configuration(_))$/;"	m
getConfigList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getConfigList(path: String): Option[java.util.List[Configuration]] = readValue[java.util.List[_ <: Config]](path, underlying.getConfigList(path)).map { configs => configs.asScala.map(Configuration(_)).asJava }$/;"	m
getControllerInstance	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def getControllerInstance[A](controllerClass: Class[A]): A = {$/;"	m
getCookies	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def getCookies(result: play.mvc.SimpleResult): JCookies =$/;"	m
getDouble	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getDouble(path: String): Option[Double] = readValue(path, underlying.getDouble(path))$/;"	m
getDoubleList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getDoubleList(path: String): Option[java.util.List[java.lang.Double]] = readValue(path, underlying.getDoubleList(path))$/;"	m
getExistingFile	framework/src/play/src/main/scala/play/api/Application.scala	/^  def getExistingFile(relativePath: String): Option[File] = Option(getFile(relativePath)).filter(_.exists)$/;"	m
getExistingFile	framework/src/play/src/main/scala/play/api/Play.scala	/^  def getExistingFile(relativePath: String)(implicit app: Application): Option[File] = {$/;"	m
getFile	framework/src/play/src/main/scala/play/api/Application.scala	/^  def getFile(relativePath: String): File = new File(path, relativePath)$/;"	m
getFile	framework/src/play/src/main/scala/play/api/Play.scala	/^  def getFile(relativePath: String)(implicit app: Application): File = {$/;"	m
getFilledStatement	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def getFilledStatement(connection: java.sql.Connection, getGeneratedKeys: Boolean = false) = {$/;"	m
getFilledStatement	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def getFilledStatement(connection: java.sql.Connection, getGeneratedKeys: Boolean = false): java.sql.PreparedStatement =$/;"	m
getFilledStatement	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def getFilledStatement(connection: java.sql.Connection, getGeneratedKeys: Boolean = false): java.sql.PreparedStatement$/;"	m
getFlash	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def getFlash(result: play.mvc.SimpleResult): JFlash = new JFlash(Flash.decodeFromCookie($/;"	m
getHandlerFor	framework/src/play/src/main/scala/play/core/server/Server.scala	/^  def getHandlerFor(request: RequestHeader): Either[Future[SimpleResult], (RequestHeader, Handler, Application)] = {$/;"	m
getHeader	framework/src/play/src/main/scala/play/core/server/Server.scala	/^  def getHeader(header: String): String$/;"	m
getHeader	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^    def getHeader(header: String) = req.getHeader(header)$/;"	m
getHeaders	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def getHeaders(result: play.mvc.SimpleResult): java.util.Map[String, String] = headers(result).asJava$/;"	m
getHeaders	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^  def getHeaders(nettyRequest: HttpRequest): Headers = {$/;"	m
getInt	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getInt(path: String): Option[Int] = readValue(path, underlying.getInt(path))$/;"	m
getIntList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getIntList(path: String): Option[java.util.List[java.lang.Integer]] = readValue(path, underlying.getIntList(path))$/;"	m
getList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getList(path: String): Option[ConfigList] = readValue(path, underlying.getList(path))$/;"	m
getLong	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getLong(path: String): Option[Long] = readValue(path, underlying.getLong(path))$/;"	m
getLongList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getLongList(path: String): Option[java.util.List[java.lang.Long]] = readValue(path, underlying.getLongList(path))$/;"	m
getMajorVersion	framework/src/play/src/main/scala/play/utils/ProxyDriver.scala	/^  def getMajorVersion() = proxied.getMajorVersion$/;"	m
getMilliseconds	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getMilliseconds(path: String): Option[Long] = readValue(path, underlying.getMilliseconds(path))$/;"	m
getMillisecondsList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getMillisecondsList(path: String): Option[java.util.List[java.lang.Long]] = readValue(path, underlying.getMillisecondsList(path))$/;"	m
getMinorVersion	framework/src/play/src/main/scala/play/utils/ProxyDriver.scala	/^  def getMinorVersion() = proxied.getMinorVersion$/;"	m
getNanoseconds	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getNanoseconds(path: String): Option[Long] = readValue(path, underlying.getNanoseconds(path))$/;"	m
getNanosecondsList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getNanosecondsList(path: String): Option[java.util.List[java.lang.Long]] = readValue(path, underlying.getNanosecondsList(path))$/;"	m
getNumber	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getNumber(path: String): Option[Number] = readValue(path, underlying.getNumber(path))$/;"	m
getNumberList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getNumberList(path: String): Option[java.util.List[java.lang.Number]] = readValue(path, underlying.getNumberList(path))$/;"	m
getObject	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getObject(path: String): Option[ConfigObject] = readValue(path, underlying.getObject(path))$/;"	m
getObjectList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getObjectList(path: String): Option[java.util.List[_ <: ConfigObject]] = readValue[java.util.List[_ <: ConfigObject]](path, underlying.getObjectList(path))$/;"	m
getOrElse	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def getOrElse[V >: ID](id: V): V = toOption.getOrElse(id)$/;"	m
getParentLogger	framework/src/play/src/main/scala/play/utils/ProxyDriver.scala	/^  def getParentLogger(): Logger = null$/;"	m
getPipeline	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^    def getPipeline = {$/;"	m
getProblems	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def getProblems(incomplete: Incomplete): Seq[xsbti.Problem] = {$/;"	m
getPropertyInfo	framework/src/play/src/main/scala/play/utils/ProxyDriver.scala	/^  def getPropertyInfo(user: String, properties: java.util.Properties) = proxied.getPropertyInfo(user, properties)$/;"	m
getQueryString	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def getQueryString(key: String): Option[String] = queryString.get(key).flatMap(_.headOption)$/;"	m
getSession	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def getSession(result: play.mvc.SimpleResult): JSession =$/;"	m
getString	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getString(path: String, validValues: Option[Set[String]] = None): Option[String] = readValue(path, underlying.getString(path)).map { value =>$/;"	m
getStringData	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def getStringData = body.getOrElse("")$/;"	m
getStringList	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def getStringList(path: String): Option[java.util.List[java.lang.String]] = readValue(path, underlying.getStringList(path))$/;"	m
global	framework/src/play/src/main/scala/play/api/Application.scala	/^  def global: GlobalSettings = {$/;"	m
global	framework/src/play/src/main/scala/play/api/Application.scala	/^  def global: GlobalSettings$/;"	m
global	framework/src/play/src/main/scala/play/api/Play.scala	/^  def global(implicit app: Application): GlobalSettings = app.global$/;"	m
global	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^        val global = play.api.Play.maybeApplication.map(_.global).getOrElse(play.api.DefaultGlobal)$/;"	C
global	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^    val global = new Global$/;"	C
global	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val global = new Global; global.init(ctx)$/;"	C
global	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^    val global = new Global; global.init(ctx)$/;"	C
globalError	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def globalError(message: String, e: Option[Throwable] = None): PlayException = {$/;"	m
globalError	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def globalError: Option[FormError] = globalErrors.headOption$/;"	m
globalErrors	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def globalErrors: Seq[FormError] = errors.filter(_.key.isEmpty)$/;"	m
green	framework/src/console/src/main/scala/Console.scala	/^  def green(str: String): String = if (isANSISupported) (GREEN + str + RESET) else str$/;"	m
green	framework/src/play/src/main/scala/play/utils/Colors.scala	/^  def green(str: String): String = if (isANSISupported) (GREEN + str + RESET) else str$/;"	m
group	framework/src/play/src/main/scala/play/core/router/Router.scala	/^        val group = matcher.group(groupCount)$/;"	C
gzippedResource	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^      val gzippedResource = Play.resource(resourceName + ".gz")$/;"	C
gzippedResponse	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^              val gzippedResponse = (gzippedResource.isDefined, isGzipped) match {$/;"	C
h2Command	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val h2Command = Command.command("h2-browser") { state: State =>$/;"	C
h2ServerClass	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val h2ServerClass = commonLoader.loadClass(classOf[org.h2.tools.Server].getName)$/;"	C
handleAction	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        def handleAction(action: EssentialAction, app: Option[Application]){$/;"	m
handleDataPart	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^      def handleDataPart: PartHandler[Part] = {$/;"	m
handleFilePart	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^      def handleFilePart[A](handler: FileInfo => Iteratee[Array[Byte], A]): PartHandler[FilePart[A]] = {$/;"	m
handleFilePartAsTemporaryFile	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^      def handleFilePartAsTemporaryFile: PartHandler[FilePart[TemporaryFile]] = {$/;"	m
handlePart	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^            val handlePart = Enumeratee.map[MatchInfo[Array[Byte]]](_.content).transform(readPart)$/;"	C
handlePart	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^      def handlePart(fileHandler: PartHandler[FilePart[File]]): PartHandler[Part] = {$/;"	m
handleWebCommand	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def handleWebCommand(request: play.api.mvc.RequestHeader, sbtLink: play.core.SBTLink, path: java.io.File): Option[SimpleResult]$/;"	m
handleWebCommand	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def handleWebCommand(requestHeader: play.api.mvc.RequestHeader): Option[SimpleResult] = None$/;"	m
handler	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^    val handler = app.global.onRouteRequest(rhWithCt)$/;"	C
handler	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def handler: play.api.mvc.Handler = {$/;"	m
handler	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^      val handler: Multipart.PartHandler[Either[Part, FilePart[A]]] =$/;"	C
handlerFor	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def handlerFor(request: RequestHeader): Option[Handler] = {$/;"	m
hasChanged	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^              def hasChanged = true$/;"	m
hasChanged	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def hasChanged = _changed$/;"	m
hasChangedFiles	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def hasChangedFiles: Boolean = monitoredFiles.exists { f =>$/;"	m
hasErrors	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def hasErrors: Boolean = !errors.isEmpty$/;"	m
hasErrors	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def hasErrors: Boolean = {$/;"	m
hasGlobalErrors	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def hasGlobalErrors: Boolean = !globalErrors.isEmpty$/;"	m
head	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def head(): Future[Response] = prepare("HEAD").execute$/;"	m
header	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def header(header: String, of: Future[SimpleResult])(implicit timeout: Timeout): Option[String] = headers(of).get(header)$/;"	m
header	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def header(name: String): Option[String] = headers.get(name).flatMap(_.headOption)$/;"	m
header	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def header(key: String): Option[String] = Option(ahcResponse.getHeader(key))$/;"	m
header	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val header: ResponseHeader$/;"	C
header	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^          val header = result.header$/;"	C
headerString	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^              val headerString = new String(headerBytes, "utf-8")$/;"	C
headers	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def headers(of: Future[SimpleResult])(implicit timeout: Timeout): Map[String, String] = Await.result(of, timeout.duration).header.headers$/;"	m
headers	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^          val headers = h.getHeaders()$/;"	C
headers	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^      val headers = hdrs.foldLeft(this.headers)((m, hdr) =>$/;"	C
headers	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^              val headers = headerString.lines.map { header =>$/;"	C
headers	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^        val headers = _headers$/;"	C
headers	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def headers = rh.headers$/;"	m
headers	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def headers = self.headers$/;"	m
headers	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def headers = request.headers$/;"	m
headers	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def headers: Headers$/;"	m
headers	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def headers = req.headers.toMap.map(e => e._1 -> e._2.toArray).asJava$/;"	m
headers	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            def headers = rHeaders$/;"	m
helpCommand	framework/src/console/src/main/scala/Console.scala	/^  def helpCommand(args: Array[String]): (String, Int) = {$/;"	m
hexStringToByte	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^  def hexStringToByte(hexString: String): Array[Byte] = {$/;"	m
high	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^        val high = fromHex(next())$/;"	C
host	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def host = req.host$/;"	m
hostname	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^  val hostname = InetAddress.getLocalHost.getHostName$/;"	C
httpContext	framework/src/play/src/main/scala/play/core/j/OrderedExecutionContext.scala	/^    val httpContext = Http.Context.current.get()$/;"	C
httpOnly	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def httpOnly = true$/;"	m
httpPort	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^    val httpPort = Option(System.getProperty("http.port"))$/;"	C
httpsPort	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^    val httpsPort = Option(System.getProperty("https.port"))$/;"	C
iRedeemed	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^        val iRedeemed = ref.single.getAndTransform(_ => true)$/;"	C
id	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    def id = params.get("openid.claimed_id").flatMap(_.headOption).orElse(params.get("openid.identity").flatMap(_.headOption))$/;"	m
id	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    val id = extractor.id getOrElse (throw Errors.BAD_RESPONSE)$/;"	C
id	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^        val id = _id$/;"	C
id	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def id = rh.id$/;"	m
id	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def id = self.id$/;"	m
id	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def id = request.id$/;"	m
id	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def id: Long$/;"	m
id	framework/src/play/src/main/scala/play/core/j/OrderedExecutionContext.scala	/^    val id: Long = if (httpContext == null) 0L else httpContext.id()$/;"	C
id	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val id = requestIDs.incrementAndGet$/;"	C
ignoreErrors	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def ignoreErrors(c: Char) = ""$/;"	m
ignoreOutputStream	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def ignoreOutputStream = (out: OutputStream) => ()$/;"	m
ignoreWhiteSpace	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def ignoreWhiteSpace = opt(whiteSpace)$/;"	m
ignored	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def ignored[A](value: A): Mapping[A] = of(ignoredFormat(value))$/;"	m
ignoredFormat	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^  def ignoredFormat[A](value: A): Formatter[A] = new Formatter[A] {$/;"	m
imported	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^                        var imported = LessCompiler.resolve(context[context.length - 1], path);$/;"	l
importedName	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^                        var importedName = String(imported.getAbsolutePath());$/;"	l
in	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    val in = s.getBytes("US-ASCII")$/;"	C
in	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    val in = s.getBytes(inputCharset)$/;"	C
inAllDependencies	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  def inAllDependencies[T](base: ProjectRef, key: SettingKey[T], structure: Load.BuildStructure): Seq[T] = {$/;"	m
inAllDeps	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  def inAllDeps[T](base: ProjectRef, deps: ProjectRef => Seq[ProjectRef], key: SettingKey[T], data: SbtSettings[Scope]): Seq[T] =$/;"	m
inAllProjects	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  def inAllProjects[T](allProjects: Seq[Reference], key: SettingKey[T], data: SbtSettings[Scope]): Seq[T] =$/;"	m
inMemoryDatabase	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def inMemoryDatabase(name: String = "default", options: Map[String, String] = Map.empty[String, String]): Map[String, String] = {$/;"	m
inPos	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    var inPos = 0$/;"	l
indent	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^          val indent = if (Colors.isANSISupported) 9 else 0$/;"	C
indexes	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def indexes(key: String, data: Map[String, String]): Seq[Int] = {$/;"	m
info	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def info(message: => String) {$/;"	m
info	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def info(message: => String, error: => Throwable) {$/;"	m
infos	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def infos(implicit lang: play.api.i18n.Lang): Seq[String] = {$/;"	m
init	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def init(home: java.io.File) {$/;"	m
input	framework/src/play/src/main/scala/play/api/Application.scala	/^          def input = source.map(_._1).map(scalax.file.Path(_).string).orNull$/;"	m
input	framework/src/play/src/main/scala/play/api/Configuration.scala	/^      def input = Option(origin.url).map(_.asInput.string).orNull$/;"	m
input	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^            def input = messageInput.string$/;"	m
input	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def input = problem.position.sourceFile.map(scalax.file.Path(_).string).orNull$/;"	m
input	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def input = scalax.file.Path(source).string$/;"	m
input	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def input = source.filter(_.exists()).map(scalax.file.Path(_).string).orNull$/;"	m
input	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def input(connectInput: Boolean): OutputStream => Unit =$/;"	m
input	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    def input = scalax.file.Path(jsFile).string$/;"	m
input	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val input = Array[JSSourceFile](JSSourceFile.fromCode(name.getOrElse("unknown"), source))$/;"	C
input	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val input = if (!simpleCheck) all.map(f => JSSourceFile.fromFile(f)).toArray else Array(JSSourceFile.fromFile(source))$/;"	C
input	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^                        var input = String(LessCompiler.readContent(imported));$/;"	l
inputSource	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^        val inputSource = new InputSource(new ByteArrayInputStream(bytes))$/;"	C
instr	framework/src/anorm/src/main/scala/anorm/SqlStatementParser.scala	/^  def instr: Parser[List[(String, Option[String])]] = rep(literal | variable | other)$/;"	m
int	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def int(columnName: String): RowParser[Int] = get[Int](columnName)(implicitly[Column[Int]])$/;"	m
intellijCommandSettings	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  def intellijCommandSettings = {$/;"	m
interaction	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val interaction = extracted.get(playInteractionMode)$/;"	C
interaction	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^    val interaction = extracted.get(playInteractionMode)$/;"	C
invocation	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^  def invocation: JPromise[JResult]$/;"	m
invocation	framework/src/play/src/main/scala/play/core/router/Router.scala	/^          def invocation = JPromise.pure(call)$/;"	m
invocation	framework/src/play/src/main/scala/play/core/router/Router.scala	/^          def invocation = call$/;"	m
invocation	framework/src/play/src/main/scala/play/core/router/Router.scala	/^          def invocation = javaAction.invocation$/;"	m
invoke	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def invoke(proxy: AnyRef, m: java.lang.reflect.Method, args: scala.Array[AnyRef]): AnyRef = {$/;"	m
invokeBlock	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def invokeBlock[A](request: Request[A], block: (Request[A]) => Future[SimpleResult]) = block(request)$/;"	m
invokeBlock	framework/src/play/src/main/scala/play/api/mvc/Security.scala	/^    def invokeBlock[A](request: Request[A], block: (AuthenticatedRequest[A, U]) => Future[SimpleResult]) =$/;"	m
invokeHandler	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def invokeHandler[T](call: => T, handler: HandlerDef)(implicit d: HandlerInvoker[T]): Handler = {$/;"	m
invokeWithContext	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^  def invokeWithContext(request: RequestHeader, f: JRequest => Option[F.Promise[JSimpleResult]]): Option[Future[SimpleResult]] = {$/;"	m
isDebugEnabled	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def isDebugEnabled = logger.isDebugEnabled$/;"	m
isDefined	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def isDefined: Boolean = toOption.isDefined$/;"	m
isDefined	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def isDefined = this match { case Waiting => false; case _ => true }$/;"	m
isDefinedAt	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^        def isDefinedAt(rh: RequestHeader) = withRoutes.isDefinedAt((rh.method, rh.path))$/;"	m
isDefinedAt	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^        def isDefinedAt(x: RequestHeader) = parentRoutes.map(_.routes.isDefinedAt(x)).getOrElse(false)$/;"	m
isDefinedAt	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def isDefinedAt(key: String)(implicit lang: Lang): Boolean = {$/;"	m
isDefinedAt	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^    def isDefinedAt(x: A) = true$/;"	m
isDev	framework/src/play/src/main/scala/play/api/Play.scala	/^  def isDev(implicit app: Application): Boolean = (app.mode == Mode.Dev)$/;"	m
isEOF	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        def isEOF(c: Int): Boolean = c == 4$/;"	m
isEmpty	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def isEmpty: Boolean = data.isEmpty$/;"	m
isErrorEnabled	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def isErrorEnabled = logger.isErrorEnabled$/;"	m
isHexDigit	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^        def isHexDigit(c: Char) = Character.isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')$/;"	m
isInfoEnabled	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def isInfoEnabled = logger.isInfoEnabled$/;"	m
isProd	framework/src/play/src/main/scala/play/api/Play.scala	/^  def isProd(implicit app: Application): Boolean = (app.mode == Mode.Prod)$/;"	m
isSigned	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def isSigned: Boolean = false$/;"	m
isTest	framework/src/play/src/main/scala/play/api/Play.scala	/^  def isTest(implicit app: Application): Boolean = (app.mode == Mode.Test)$/;"	m
isText	framework/src/play/src/main/scala/play/api/libs/MimeTypes.scala	/^  def isText(mimeType: String): Boolean = {$/;"	m
isTraceEnabled	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def isTraceEnabled = logger.isTraceEnabled$/;"	m
isWarnEnabled	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def isWarnEnabled = logger.isWarnEnabled$/;"	m
iso_8859_1	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  val iso_8859_1 = javaSupported("iso-8859-1")$/;"	C
it	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^                val it = Done(a, e)$/;"	C
it	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^                val it = Error(e, input)$/;"	C
it	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^      val it = Iteratee.flatten(p.map(_._1))$/;"	C
itPromise	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^      val itPromise = Promise[Iteratee[Array[Byte], A]]()$/;"	C
iter	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^        val iter = System.getProperties.entrySet.iterator$/;"	C
iteratee	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^      var iteratee: Iteratee[Array[Byte], A] = null$/;"	l
iteratee	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^    val iteratee: Ref[Iteratee[Array[Byte], A]] = Ref(bodyHandler)$/;"	C
iterateeP	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^      val iterateeP = Promise[Iteratee[Array[Byte], A]]()$/;"	C
iterateeRef	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^      val iterateeRef = Ref[Iteratee[A, Any]](Iteratee.flatten(eventuallyIteratee.future))$/;"	C
jRoute	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def jRoute(app: Application, rh: RequestHeader): Option[Future[SimpleResult]] = route(app, rh, AnyContentAsEmpty)$/;"	m
jRoute	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def jRoute(app: Application, rh: RequestHeader, body: Array[Byte]): Option[Future[SimpleResult]] = route(app, rh, body)(Writeable.wBytes)$/;"	m
jRoute	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def jRoute(rh: RequestHeader, body: Array[Byte]): Option[Future[SimpleResult]] = jRoute(Play.current, rh, body)$/;"	m
jRoute	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def jRoute[T](app: Application, r: FakeRequest[T]): Option[Future[SimpleResult]] = {$/;"	m
javaClasses	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val javaClasses = (javaSrc ** "*.java").get flatMap { sourceFile =>$/;"	C
javaContext	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^    val javaContext = createJavaContext(req)$/;"	C
javaContext	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^    val javaContext = createJavaContext(request)$/;"	C
javaCore	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val javaCore = "com.typesafe.play" %% "play-java" % play.core.PlayVersion.current$/;"	C
javaEbean	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val javaEbean = "com.typesafe.play" %% "play-java-ebean" % play.core.PlayVersion.current$/;"	C
javaJdbc	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val javaJdbc = "com.typesafe.play" %% "play-java-jdbc" % play.core.PlayVersion.current$/;"	C
javaJpa	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val javaJpa = "com.typesafe.play" %% "play-java-jpa" % play.core.PlayVersion.current$/;"	C
javaProperties	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^    val javaProperties = properties.map(_.drop(2).split('=')).map(a => a(0) -> a(1)).toSeq$/;"	C
javaRoutes	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^    val javaRoutes = (generatedDir ** "routes.java")$/;"	C
javaSupported	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def javaSupported(charset: String) = Codec(charset)(str => str.getBytes(charset), bytes => new String(bytes, charset))$/;"	m
javaWebSocket	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^      val javaWebSocket = try {$/;"	C
javascriptEntryPoints	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val javascriptEntryPoints = SettingKey[PathFinder]("play-javascript-entry-points")$/;"	C
javascriptRouter	framework/src/play/src/main/scala/play/api/Routes.scala	/^    def javascriptRouter(name: String = "Router", ajaxMethod: Option[String] = Some("jQuery.ajax"))(routes: JavascriptReverseRoute*)(implicit request: RequestHeader): String = {$/;"	m
javascriptRouter	framework/src/play/src/main/scala/play/api/Routes.scala	/^    def javascriptRouter(name: String, ajaxMethod: Option[String], host: String, routes: JavascriptReverseRoute*): String = {$/;"	m
javascriptUnbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  def javascriptUnbind: String = """function(k,v) {return encodeURIComponent(k)+'='+encodeURIComponent(v)}"""$/;"	m
javascriptUnbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  def javascriptUnbind: String = """function(k,v) {return v}"""$/;"	m
jdbc	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val jdbc = "com.typesafe.play" %% "play-jdbc" % play.core.PlayVersion.current$/;"	C
jdbcCompliant	framework/src/play/src/main/scala/play/utils/ProxyDriver.scala	/^  def jdbcCompliant() = proxied.jdbcCompliant$/;"	m
jnotifyClass	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val jnotifyClass = sbtLoader.loadClass("net.contentobjects.jnotify.JNotify")$/;"	C
jnotifyJarFile	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          var jnotifyJarFile = this.getClass.getClassLoader.asInstanceOf[java.net.URLClassLoader].getURLs$/;"	l
jnotifyListenerClass	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val jnotifyListenerClass = sbtLoader.loadClass("net.contentobjects.jnotify.JNotifyListener")$/;"	C
jodaDate	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def jodaDate(pattern: String, timeZone: org.joda.time.DateTimeZone = org.joda.time.DateTimeZone.getDefault): Mapping[org.joda.time.DateTime] = of[org.joda.time.DateTime] as jodaDateTimeFormat(pattern, timeZone)$/;"	m
jodaDate	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val jodaDate: Mapping[org.joda.time.DateTime] = of[org.joda.time.DateTime]$/;"	C
jodaDateTimeFormat	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^  def jodaDateTimeFormat(pattern: String, timeZone: org.joda.time.DateTimeZone = org.joda.time.DateTimeZone.getDefault): Formatter[org.joda.time.DateTime] = new Formatter[org.joda.time.DateTime] {$/;"	m
jodaLocalDate	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def jodaLocalDate(pattern: String): Mapping[org.joda.time.LocalDate] = of[org.joda.time.LocalDate] as jodaLocalDateFormat(pattern)$/;"	m
jodaLocalDate	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val jodaLocalDate: Mapping[org.joda.time.LocalDate] = of[org.joda.time.LocalDate]$/;"	C
jodaLocalDateFormat	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^  def jodaLocalDateFormat(pattern: String): Formatter[org.joda.time.LocalDate] = new Formatter[org.joda.time.LocalDate] {$/;"	m
jodaLocalDateParse	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def jodaLocalDateParse(data: String) = LocalDate.parse(data, formatter)$/;"	m
jodaTimeZone	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    val jodaTimeZone = org.joda.time.DateTimeZone.forTimeZone(timeZone)$/;"	C
joined	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^    val joined = nonce + "-" + token$/;"	C
jsFiles	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val jsFiles = dir.listFiles(new FileFilter {$/;"	C
jsFilesChildren	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val jsFilesChildren = directories.map(d => allJsFilesIn(d)).flatten$/;"	C
jsFolder	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val jsFolder = if (!requireJsFolder.isEmpty) { requireJsFolder } else "javascripts"$/;"	C
jsSource	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^      val jsSource = play.core.coffeescript.CoffeescriptCompiler.compile(coffeeFile, options)$/;"	C
json	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def json(maxLength: Int): BodyParser[JsValue] = when($/;"	m
json	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def json: BodyParser[JsValue] = json(DEFAULT_MAX_TEXT_LENGTH)$/;"	m
json	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def json(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.json(Integer.MAX_VALUE)).map {$/;"	m
json	framework/src/play/src/main/scala/views/js/helper/package.scala	/^  def json[A: Writes](a: A): JavaScript = JavaScript(Json.toJson(a).toString)$/;"	m
jvm	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def jvm(message: String) = name.map(n => "[%s] %s" format (n, message)).getOrElse(message)$/;"	m
keepAlive	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        val keepAlive = isKeepAlive(nettyHttpRequest)$/;"	C
key	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val key = wrapped.key$/;"	C
key	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val key: String$/;"	C
key	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^                val key :: value = header.trim.split(":").toList$/;"	C
key	framework/src/play/src/main/scala/play/core/parsers/FormUrlEncodedParser.scala	/^        val key = URLDecoder.decode(parts.head, encoding)$/;"	C
keyManagerFactory	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^  def keyManagerFactory(appPath: File): Option[KeyManagerFactory] = {$/;"	m
keyPair	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^        val keyPair = keyPairGenerator.generateKeyPair()$/;"	C
keyPairGenerator	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^        val keyPairGenerator = KeyPairGenerator.getInstance("RSA")$/;"	C
keyStore	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^        val keyStore = KeyStore.getInstance(System.getProperty("https.keyStoreType", "JKS"))$/;"	C
keyStore	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^      val keyStore = KeyStore.getInstance("JKS")$/;"	C
keyStoreFile	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^      val keyStoreFile = new File(appPath, GeneratedKeyStore)$/;"	C
keyValue	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          val keyValue = """^([a-zA-Z_0-9]+)="(.*)"$""".r$/;"	C
keys	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def keys: Set[String] = underlying.entrySet.asScala.map(_.getKey).toSet$/;"	m
keys	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def keys: Set[String] = {$/;"	m
kmf	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^            val kmf = KeyManagerFactory.getInstance(algorithm)$/;"	C
kmf	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^      val kmf = KeyManagerFactory.getInstance("SunX509")$/;"	C
label	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^    def label(implicit lang: play.api.i18n.Lang): Any = {$/;"	m
langCookieName	framework/src/play/src/main/scala/play/api/Play.scala	/^  def langCookieName(implicit app: Application): String = app.configuration.getString("application.lang.cookie").getOrElse("PLAY_LANG")$/;"	m
langs	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      val langs = acceptHeader(HeaderNames.ACCEPT_LANGUAGE).map(item => (item._1, Lang.get(item._2)))$/;"	C
langsToTry	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    val langsToTry: List[Lang] = List(lang, Lang(lang.language, ""), Lang("default", ""))$/;"	C
langsToTry	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    val langsToTry: List[Lang] =$/;"	C
lastChunk	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^              val lastChunk = trailers.map(t => t._1 + ": " + t._2 + "\\r\\n").mkString("0\\r\\n", "", "\\r\\n").getBytes("UTF-8")$/;"	C
lastEnhanced	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val lastEnhanced = if (timestampFile.exists) IO.read(timestampFile).toLong else Long.MinValue$/;"	C
lastFailure	framework/src/sbt-plugin/src/main/scala/play/PlayRunHooks.scala	/^      var lastFailure: Option[Throwable] = None$/;"	l
lastModifiedResponse	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^        val lastModifiedResponse = lastModifiedFor(url).map(lastModified => taggedResponse.withHeaders(LAST_MODIFIED -> lastModified)).getOrElse(taggedResponse)$/;"	C
lastState	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  var lastState: Try[Application] = Failure(new PlayException("Not initialized", "?"))$/;"	l
left	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^              val left = rest.drop(CRLFCRLF.length)$/;"	C
lessEntryPoints	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val lessEntryPoints = SettingKey[PathFinder]("play-less-entry-points")$/;"	C
lessOptions	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val lessOptions = SettingKey[Seq[String]]("play-less-options")$/;"	C
lessScript	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^  val lessScript = "less-1.4.2.js"$/;"	C
libs	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val libs = new File(nativeLibrariesDirectory, System.getProperty("sun.arch.data.model") + "bits").getAbsolutePath$/;"	C
licenseCommand	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val licenseCommand = Command.command("license") { state: State =>$/;"	C
line	framework/src/play/src/main/scala/play/api/Application.scala	/^          def line = source.flatMap(_._2).map(_.asInstanceOf[java.lang.Integer]).orNull$/;"	m
line	framework/src/play/src/main/scala/play/api/Configuration.scala	/^      def line = Option(origin.lineNumber: java.lang.Integer).orNull$/;"	m
line	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^            def line = in.pos.line$/;"	m
line	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def line = atLine$/;"	m
line	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def line = atLine.map(_.asInstanceOf[java.lang.Integer]).orNull$/;"	m
line	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def line = problem.position.line.map(m => m.asInstanceOf[java.lang.Integer]).orNull$/;"	m
line	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^      val line = reader.readLine()$/;"	C
line	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                  def line = xsbti.Maybe.just(error._2.toInt)$/;"	m
line	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^        val line = """.*on line ([0-9]+).*""".r$/;"	C
line	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    def line = atLine.map(_.asInstanceOf[java.lang.Integer]).orNull$/;"	m
lineContent	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                  def lineContent = ""$/;"	m
lineFormat	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^          val lineFormat = "| %-" + (c1Size + indent) + "s | %-" + (c2Size + indent) + "s | %-" + (c3Size + indent) + "s |"$/;"	C
list	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def list()(implicit connection: java.sql.Connection): Seq[T] = as(defaultParser*)$/;"	m
list	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def list[A](rowParser: RowParser[A])(implicit connection: java.sql.Connection): Seq[A] = as(rowParser *)$/;"	m
list	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def list[A](p: RowParser[A]): ResultSetParser[List[A]] = {$/;"	m
list	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def list[A](mapping: Mapping[A]): Mapping[List[A]] = RepeatedMapping(mapping)$/;"	m
listener	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val listener = java.lang.reflect.Proxy.newProxyInstance(sbtLoader, Seq(jnotifyListenerClass).toArray, new java.lang.reflect.InvocationHandler {$/;"	C
literal	framework/src/anorm/src/main/scala/anorm/SqlStatementParser.scala	/^  def literal: Parser[(String, Option[String])] = (stringLiteral | simpleQuotes) ^^ { case s => (s, None) }$/;"	m
load	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def load(appPath: File, mode: Mode.Mode = Mode.Dev, devSettings: Map[String, String] = Map.empty) = {$/;"	m
loader	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val loader = createClassLoader(name, urls, baseLoader)$/;"	C
log	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def log(level: Level.Value, message: => String) = System.out.synchronized {$/;"	m
log	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^                val log = s.log$/;"	C
log	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^    val log = state.log$/;"	C
logAll	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def logAll(events: Seq[LogEvent]) = System.out.synchronized { events.foreach(log) }$/;"	m
logEvent	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^    def logEvent(event: TEvent) = {$/;"	m
logExceptionAndGetResult	framework/src/play/src/main/scala/play/core/server/Server.scala	/^    def logExceptionAndGetResult(e: Throwable) = {$/;"	m
logWith	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^      def logWith(color: String) = logger.info(color + " " + testNameFromTestEvent(event))$/;"	m
logger	framework/src/play/src/main/scala/play/api/Logger.scala	/^  val logger = LoggerFactory.getLogger("application")$/;"	C
logger	framework/src/play/src/main/scala/play/api/Logger.scala	/^  val logger: Slf4jLogger$/;"	C
logo	framework/src/console/src/main/scala/Console.scala	/^  val logo = Colors.yellow($/;"	C
long	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def long(columnName: String): RowParser[Long] = get[Long](columnName)(implicitly[Column[Long]])$/;"	m
longNumber	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def longNumber(min: Long = Long.MinValue, max: Long = Long.MaxValue, strict: Boolean = false): Mapping[Long] = (min, max) match {$/;"	m
longNumber	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val longNumber: Mapping[Long] = of[Long]$/;"	C
loop	framework/src/play/src/main/scala/play/api/libs/Collections.scala	/^    def loop(seed: B)(ls: List[A]): List[A] = f(seed) match {$/;"	m
low	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^        val low = fromHex(next())$/;"	C
mac	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^    val mac = provider.map(p => Mac.getInstance("HmacSHA1", p)).getOrElse(Mac.getInstance("HmacSHA1"))$/;"	C
magenta	framework/src/console/src/main/scala/Console.scala	/^  def magenta(str: String): String = if (isANSISupported) (MAGENTA + str + RESET) else str$/;"	m
magenta	framework/src/play/src/main/scala/play/utils/Colors.scala	/^  def magenta(str: String): String = if (isANSISupported) (MAGENTA + str + RESET) else str$/;"	m
main	framework/src/console/src/main/scala/Console.scala	/^  def main(args: Array[String]): Unit = {$/;"	m
main	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def main(args: Array[String]) {$/;"	m
mainAddress	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def mainAddress: InetSocketAddress$/;"	m
mainClass	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^          val mainClass = applicationLoader.loadClass("play.core.server.NettyServer")$/;"	C
mainDev	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^            val mainDev = mainClass.getMethod("mainDevHttpMode", classOf[SBTLink], classOf[SBTDocHandler], classOf[Int])$/;"	C
mainDev	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^            val mainDev = mainClass.getMethod("mainDevOnlyHttpsMode", classOf[SBTLink], classOf[SBTDocHandler], classOf[Int])$/;"	C
mainDevHttpMode	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def mainDevHttpMode(sbtLink: SBTLink, sbtDocHandler: SBTDocHandler, httpPort: Int): NettyServer = {$/;"	m
mainDevOnlyHttpsMode	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def mainDevOnlyHttpsMode(sbtLink: SBTLink, sbtDocHandler: SBTDocHandler, httpsPort: Int): NettyServer = {$/;"	m
makeRunHookFromOnStarted	framework/src/sbt-plugin/src/main/scala/play/PlayRunHooks.scala	/^  def makeRunHookFromOnStarted(f: (java.net.InetSocketAddress) => Unit): PlayRunHook = {$/;"	m
makeRunHookFromOnStopped	framework/src/sbt-plugin/src/main/scala/play/PlayRunHooks.scala	/^  def makeRunHookFromOnStopped(f: () => Unit): PlayRunHook = {$/;"	m
manage	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def manage: WebDriver.Options = super.getDriver.manage$/;"	m
manageClasspath	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^  def manageClasspath(config: Configuration) = managedClasspath in config <<= (classpathTypes in config, update) map { (ct, report) =>$/;"	m
managedClasses	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val managedClasses = ((srcManaged ** "*.scala").get ++ (srcManaged ** "*.java").get).map { managedSourceFile =>$/;"	C
managedClassesDirectory	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val managedClassesDirectory = classes.getParentFile \/ (classes.getName + "_managed")$/;"	C
managedSet	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val managedSet = IO.copy(managedClasses)$/;"	C
map	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def map[B](f: ID => B) = toOption.map(f)$/;"	m
map	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def map[B](f: A => B): ResultSetParser[B] = ResultSetParser(rs => parent(rs).map(f))$/;"	m
map	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def map[B](f: A => B): RowParser[B] = RowParser(parent.andThen(_.map(f)))$/;"	m
map	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def map[B](f: A => B): SqlResult[B] = self match {$/;"	m
map	framework/src/anorm/src/main/scala/anorm/Utils.scala	/^  def map[B](f: A => B): MayErr[E, B] = {$/;"	m
map	framework/src/play/src/main/scala/play/api/http/Writeable.scala	/^  def map[B](f: B => A): Writeable[B] = Writeable(b => transform(f(b)), contentType)$/;"	m
map	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def map[B](f: A => B): BodyParser[B] = new BodyParser[B] {$/;"	m
map	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def map[B](f: A => B): Request[B] = new Request[B] {$/;"	m
map	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def map(f: Result => Result)(implicit ec: ExecutionContext): AsyncResult = AsyncResult(result.map(f)(ec.prepare()))$/;"	m
map	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def map[A, B](promise: F.Promise[A], function: F.Function[A, B], ec: ExecutionContext): F.Promise[B] =$/;"	m
mappedPosition	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val mappedPosition = playPositionMapper(problem.position)$/;"	C
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14]), a15: (String, Mapping[A15]), a16: (String, Mapping[A16]), a17: (String, Mapping[A17]), a18: (String, Mapping[A18]))(apply: Function18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14]), a15: (String, Mapping[A15]), a16: (String, Mapping[A16]), a17: (String, Mapping[A17]))(apply: Function17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14]), a15: (String, Mapping[A15]), a16: (String, Mapping[A16]))(apply: Function16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14]), a15: (String, Mapping[A15]))(apply: Function15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14]))(apply: Function14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]))(apply: Function13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]))(apply: Function12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]))(apply: Function11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]))(apply: Function10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8, A9](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]))(apply: Function9[A1, A2, A3, A4, A5, A6, A7, A8, A9, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7, A8](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]))(apply: Function8[A1, A2, A3, A4, A5, A6, A7, A8, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7, A8)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6, A7](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]))(apply: Function7[A1, A2, A3, A4, A5, A6, A7, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6, A7)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5, A6](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]))(apply: Function6[A1, A2, A3, A4, A5, A6, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5, A6)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4, A5](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]))(apply: Function5[A1, A2, A3, A4, A5, R])(unapply: Function1[R, Option[(A1, A2, A3, A4, A5)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3, A4](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]))(apply: Function4[A1, A2, A3, A4, R])(unapply: Function1[R, Option[(A1, A2, A3, A4)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2, A3](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]))(apply: Function3[A1, A2, A3, R])(unapply: Function1[R, Option[(A1, A2, A3)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1, A2](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]))(apply: Function2[A1, A2, R])(unapply: Function1[R, Option[(A1, A2)]]): Mapping[R] = {$/;"	m
mapping	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def mapping[R, A1](a1: (String, Mapping[A1]))(apply: Function1[A1, R])(unapply: Function1[R, Option[(A1)]]): Mapping[R] = {$/;"	m
mappings	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val mappings = Seq(this) ++ field1.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val mappings = wrapped.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val mappings: Seq[Mapping[_]] = Seq(this)$/;"	C
mappings	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val mappings: Seq[Mapping[_]] = wrapped.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  val mappings: Seq[Mapping[_]]$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings ++ field10.mappings ++ field11.mappings ++ field12.mappings ++ field13.mappings ++ field14.mappings ++ field15.mappings ++ field16.mappings ++ field17.mappings ++ field18.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings ++ field10.mappings ++ field11.mappings ++ field12.mappings ++ field13.mappings ++ field14.mappings ++ field15.mappings ++ field16.mappings ++ field17.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings ++ field10.mappings ++ field11.mappings ++ field12.mappings ++ field13.mappings ++ field14.mappings ++ field15.mappings ++ field16.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings ++ field10.mappings ++ field11.mappings ++ field12.mappings ++ field13.mappings ++ field14.mappings ++ field15.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings ++ field10.mappings ++ field11.mappings ++ field12.mappings ++ field13.mappings ++ field14.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings ++ field10.mappings ++ field11.mappings ++ field12.mappings ++ field13.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings ++ field10.mappings ++ field11.mappings ++ field12.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings ++ field10.mappings ++ field11.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings ++ field10.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings ++ field9.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings ++ field8.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings ++ field7.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings ++ field6.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings ++ field5.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings ++ field4.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings ++ field3.mappings$/;"	C
mappings	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  val mappings = Seq(this) ++ field1.mappings ++ field2.mappings$/;"	C
mappings	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val mappings = (r.map(d => (d ***) --- (d ** HiddenFileFilter ***)).foldLeft(PathFinder.empty)(_ +++ _).filter(_.isFile) x relativeTo(b +: r.filterNot(_.getAbsolutePath.startsWith(b.getAbsolutePath))) map {$/;"	C
matcher	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    val matcher = regex.matcher(path)$/;"	C
max	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def max[T](maxValue: T, strict: Boolean = false)(implicit ordering: scala.math.Ordering[T]): Constraint[T] = Constraint[T]("constraint.max", maxValue) { o =>$/;"	m
maxAge	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def maxAge: Int = ahcCookie.getMaxAge$/;"	m
maxAge	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def maxAge: Int$/;"	m
maxAge	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def maxAge: Option[Int] = None$/;"	m
maxChunkSize	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^      val maxChunkSize = Option(System.getProperty("http.netty.maxChunkSize")).map(Integer.parseInt(_)).getOrElse(8192)$/;"	C
maxHeaderBuffer	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^            val maxHeaderBuffer = Traversable.takeUpTo[Array[Byte]](4 * 1024) transform Iteratee.consume[Array[Byte]]()$/;"	C
maxHeaderSize	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^      val maxHeaderSize = Option(System.getProperty("http.netty.maxHeaderSize")).map(Integer.parseInt(_)).getOrElse(8192)$/;"	C
maxInitialLineLength	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^      val maxInitialLineLength = Option(System.getProperty("http.netty.maxInitialLineLength")).map(Integer.parseInt(_)).getOrElse(4096)$/;"	C
maxLength	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def maxLength(length: Int): Constraint[String] = Constraint[String]("constraint.maxLength", length) { o =>$/;"	m
maxLength	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def maxLength[A](maxLength: Int, parser: BodyParser[A]): BodyParser[Either[MaxSizeExceeded, A]] = BodyParser("maxLength=" + maxLength + ", wrapping=" + parser.toString) { request =>$/;"	m
maxLines	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^          val maxLines = Seq(formatted._1.size, formatted._2.size, formatted._3.size).max$/;"	C
maybeApplication	framework/src/play/src/main/scala/play/api/Play.scala	/^  def maybeApplication: Option[Application] = Option(_currentApp)$/;"	m
maybeApplication	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^          val maybeApplication: Option[Try[Application]] = maybeClassLoader.map { projectClassloader =>$/;"	C
maybeBoundary	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^        val maybeBoundary = for {$/;"	C
maybeContinuous	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val maybeContinuous = state.get(Watched.Configuration).map { w =>$/;"	C
maybeEtag	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^      val maybeEtag = lastModifiedFor(resource).map(_ + " -> " + resource.toExternalForm).map("\\"" + Codecs.sha1(_) + "\\"")$/;"	C
maybeHttpsPort	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^    val maybeHttpsPort = javaProperties.toMap.get("https.port").orElse(httpsPort).map(parsePort)$/;"	C
maybeLangFromCookie	framework/src/play/src/main/scala/play/api/mvc/Controller.scala	/^      val maybeLangFromCookie = request.cookies.get(Play.langCookieName).flatMap(c => Lang.get(c.value))$/;"	C
maybeLastModified	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^    def maybeLastModified(resource: java.net.URL): Option[Long] = {$/;"	m
maybeNotModified	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^      def maybeNotModified(url: java.net.URL) = {$/;"	m
maybeOpenIdServer	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      val maybeOpenIdServer = new XrdsResolver().resolve(response) orElse new HtmlResolver().resolve(response)$/;"	C
maybePort	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^    val maybePort = others.headOption.orElse(javaProperties.toMap.get("http.port")).orElse(httpPort)$/;"	C
md5	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^  def md5(bytes: Array[Byte]): String = {$/;"	m
mediaRange	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val mediaRange = (mediaType | ('*' ~> parameters.map(ps => MediaType("*", "*", ps.flatten)))) ^^ { mediaType =>$/;"	C
mediaRanges	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val mediaRanges = rep1sep(tolerantMediaRange, ',' ~ rep(' ')).map(_.flatten)$/;"	C
mediaType	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val mediaType: Parser[MediaType] = (token <~ '\/') ~ (token <~ rep(' ')) ~ parameters ^^ {$/;"	C
merge	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def merge(results: Either[Seq[FormError], Any]*): Either[Seq[FormError], Seq[Any]] = {$/;"	m
merge	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def merge(cookieHeader: String, cookies: Seq[Cookie]): String = {$/;"	m
merge2	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def merge2(a: Either[Seq[FormError], Seq[Any]], b: Either[Seq[FormError], Seq[Any]]): Either[Seq[FormError], Seq[Any]] = (a, b) match {$/;"	m
message	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def message = ignoreWhiteSpace ~ messageKey ~ (ignoreWhiteSpace ~ "=" ~ ignoreWhiteSpace) ~ messagePattern ^^ {$/;"	m
message	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^          val message = splitted.tail.mkString("-")$/;"	C
message	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                def message = error._3$/;"	m
message	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def message = problem.message$/;"	m
messageKey	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def messageKey = namedError("""[a-zA-Z0-9_.-]+""".r, "Message key expected")$/;"	m
messagePattern	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def messagePattern = namedError($/;"	m
messages	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def messages(implicit app: Application): Map[String, Map[String, String]] = {$/;"	m
meta	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val meta = rs.getMetaData()$/;"	C
metaData	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def metaData(rs: java.sql.ResultSet) = {$/;"	m
metaData	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  val metaData: MetaData$/;"	C
method	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def method: String = _method$/;"	m
method	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^        val method = _method$/;"	C
method	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def method = rh.method$/;"	m
method	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def method = self.method$/;"	m
method	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def method = request.method$/;"	m
method	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def method: String$/;"	m
method	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def method = req.method$/;"	m
method	framework/src/play/src/main/scala/play/core/router/Router.scala	/^            val method = MethodUtils.getMatchingAccessibleMethod(controller, handlerDef.method, handlerDef.parameterTypes: _*)$/;"	C
method	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            def method = nettyHttpRequest.getMethod.getName$/;"	m
method	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val method = classOf[java.net.URLClassLoader].getDeclaredMethod("addURL", classOf[java.net.URL])$/;"	C
min	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def min[T](minValue: T, strict: Boolean = false)(implicit ordering: scala.math.Ordering[T]): Constraint[T] = Constraint[T]("constraint.min", minValue) { o =>$/;"	m
min	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^      val min = minCompiler(source)$/;"	C
minLength	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def minLength(length: Int): Constraint[String] = Constraint[String]("constraint.minLength", length) { o =>$/;"	m
minified	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^      val minified = catching(classOf[CompilationException]).opt(play.core.jscompile.JavascriptCompiler.minify(jsSource, Some(coffeeFile.getName())))$/;"	C
minify	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^  def minify(source: String, name: Option[String]): String = {$/;"	m
missing	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          val missing = parts.collect { case Left(missing @ MissingFilePart(_)) => missing }$/;"	C
mixedFrame	framework/src/play/src/main/scala/play/core/server/websocket/Frame.scala	/^  val mixedFrame = FrameFormatter[Either[String, Array[Byte]]]($/;"	C
mlm	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^      val mlm = maybeLastModified(resource).map(formatLastModified)$/;"	C
mode	framework/src/play/src/main/scala/play/api/Application.scala	/^  def mode: Mode.Mode$/;"	m
mode	framework/src/play/src/main/scala/play/api/Play.scala	/^  def mode(implicit app: Application): Mode.Mode = app.mode$/;"	m
mode	framework/src/play/src/main/scala/play/core/server/Server.scala	/^  def mode: Mode.Mode$/;"	m
models	framework/src/play/src/main/scala/models/DummyPlaceHolder.scala	/^package models$/;"	p
models	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^        val models = try {$/;"	C
moveFile	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^  def moveFile(from: File, to: File, replace: Boolean = true, atomicMove: Boolean = true): Path = {$/;"	m
moveTo	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^    def moveTo(to: File, replace: Boolean = false) {$/;"	m
multipartFormData	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def multipartFormData: BodyParser[MultipartFormData[TemporaryFile]] = multipartFormData(Multipart.handleFilePartAsTemporaryFile)$/;"	m
multipartFormData	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def multipartFormData[A](filePartHandler: Multipart.PartHandler[FilePart[A]]): BodyParser[MultipartFormData[A]] = BodyParser("multipartFormData") { request =>$/;"	m
multipartFormData	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def multipartFormData(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.multipartFormData).map {$/;"	m
multipartParser	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^      def multipartParser[A](partHandler: Map[String, String] => Iteratee[Array[Byte], A]): BodyParser[Seq[A]] = parse.using { request =>$/;"	m
name	framework/src/console/src/main/scala/Console.scala	/^        val name = readApplicationName(defaultName)$/;"	C
name	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def name: Option[String] = noneIfEmpty(ahcCookie.getName)$/;"	m
name	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def name: Option[String]$/;"	m
name	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^      val name = fileName(content)$/;"	C
name	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val name = "ReloadableClassLoader(v" + version + ")"$/;"	C
namedError	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def namedError[A](p: Parser[A], msg: String) = Parser[A] { i =>$/;"	m
namespaceReverseRouter	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val namespaceReverseRouter = SettingKey[Boolean]("play-namespace-reverse-router",$/;"	C
nativeLibrariesDirectory	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val nativeLibrariesDirectory = new File(targetDirectory, "native_libraries")$/;"	C
nativeWatcher	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val nativeWatcher = new {$/;"	C
nbColumns	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val nbColumns = meta.getColumnCount()$/;"	C
nc	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^          val nc = new DefaultCookie(c.name, c.value)$/;"	C
nettyExceptionLogger	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^  val nettyExceptionLogger = Logger("play.nettyException")$/;"	C
nettyFrameFormatter	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^    val nettyFrameFormatter = frameFormatter.asInstanceOf[play.core.server.websocket.FrameFormatter[A]]$/;"	C
nettyFrameFormatter	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^    val nettyFrameFormatter = frameFormatter.asInstanceOf[play.core.server.websocket.FrameFormatter[A]]$/;"	C
nettyResponse	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    val nettyResponse = createNettyResponse(result.header, closeConnection, httpVersion)$/;"	C
nettyResponse	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    val nettyResponse = new DefaultHttpResponse(httpVersion, HttpResponseStatus.valueOf(header.status))$/;"	C
nettyStreamIteratee	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^  def nettyStreamIteratee(nettyResponse: HttpResponse, startSequence: Int, closeConnection: Boolean)(implicit ctx: ChannelHandlerContext, e: OrderedUpstreamMessageEvent): Iteratee[Array[Byte], ChannelStatus] = {$/;"	m
nettyUri	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        val nettyUri = new QueryStringDecoder(nettyHttpRequest.getUri)$/;"	C
nettyVersion	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        var nettyVersion = nettyHttpRequest.getProtocolVersion$/;"	l
newApplication	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^              val newApplication = new DefaultApplication(reloadable.path, projectClassloader, Some(new SourceMapper {$/;"	C
newCert	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^    val newCert = new X509CertImpl(certInfo)$/;"	C
newChild	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^                val newChild = elem.child ++ <classpathentry path={ "target" + f + ct.getName + f + "src_managed" + f + "main" } kind="src"><\/classpathentry>$/;"	C
newChild	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^                val newChild = elem.child ++ <classpathentry path={ scalaLib } kind="lib"><\/classpathentry>$/;"	C
newCommand	framework/src/console/src/main/scala/Console.scala	/^  def newCommand(args: Array[String]): (String, Int) = {$/;"	m
newCookies	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      val newCookies = cookies.map { c =>$/;"	C
newData	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^      val newData = newHeaders.map {$/;"	C
newLine	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def newLine = namedError((("\\r"?) ~> "\\n"), "End of line expected")$/;"	m
newMap	framework/src/play/src/main/scala/play/utils/Conversions.scala	/^  def newMap[A, B](data: (A, B)*) = Map(data: _*)$/;"	m
newPipeline	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^      val newPipeline = pipeline()$/;"	C
newProducts	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val newProducts = classFiles.map { classFile =>$/;"	C
newReloader	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^  def newReloader(state: State, playReload: TaskKey[sbt.inc.Analysis], createClassLoader: ClassLoaderCreator, classpathTask: TaskKey[Classpath], baseLoader: ClassLoader) = {$/;"	m
newRequestBodyUpstreamHandler	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^  def newRequestBodyUpstreamHandler[A](bodyHandler: Iteratee[Array[Byte], A],$/;"	m
newSecret	framework/src/console/src/main/scala/Console.scala	/^    val newSecret = (1 to 64).map { _ =>$/;"	C
newState	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val newState = maybeContinuous match {$/;"	C
newThread	framework/src/play/src/main/scala/play/core/system/Execution.scala	/^      def newThread(fjp: ForkJoinPool) = {$/;"	m
newThread	framework/src/play/src/main/scala/play/core/system/NamedThreadFactory.scala	/^  def newThread(r: Runnable) = {$/;"	m
newWebSocketInHandler	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^  def newWebSocketInHandler[A](frameFormatter: play.api.mvc.WebSocket.FrameFormatter[A]) = {$/;"	m
next	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^            val next = k(input)$/;"	C
next	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^        val next = current.flatFold($/;"	C
next	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    def next(): Int = {$/;"	m
next	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^          val next = iter.next$/;"	C
nextWhenComplete	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^  def nextWhenComplete[E, A](future: ChannelFuture, step: (Input[E]) => Iteratee[E, A], done: A)(implicit ctx: ChannelHandlerContext): Iteratee[E, A] = {$/;"	m
nonEmpty	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def nonEmpty: Constraint[String] = Constraint[String]("constraint.required") { o =>$/;"	m
nonEmptyList	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def nonEmptyList[A](p: RowParser[A]): ResultSetParser[List[A]] = ResultSetParser(rows => if (rows.isEmpty) Error(SqlMappingError("Empty Result Set")) else list(p)(rows))$/;"	m
nonEmptyText	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def nonEmptyText(minLength: Int = 0, maxLength: Int = Int.MaxValue): Mapping[String] = text(minLength, maxLength) verifying Constraints.nonEmpty$/;"	m
nonEmptyText	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val nonEmptyText: Mapping[String] = text verifying Constraints.nonEmpty$/;"	C
nonNull	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def nonNull[A](transformer: ((Any, MetaDataItem) => MayErr[SqlRequestError, A])): Column[A] = Column[A] {$/;"	m
nonce	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^    val nonce = System.currentTimeMillis()$/;"	C
normalize	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    def normalize = catching(classOf[MalformedURLException], classOf[URISyntaxException]) opt {$/;"	m
normalizeIdentifier	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  def normalizeIdentifier(openID: String) = {$/;"	m
notFound	framework/src/play/src/main/scala/play/api/controllers/Default.scala	/^  def notFound: Action[AnyContent] = Action {$/;"	m
nullArray	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  val nullArray = Array[X509Certificate]()$/;"	C
num	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^                            var num = timers.length;$/;"	l
number	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def number(min: Int = Int.MinValue, max: Int = Int.MaxValue, strict: Boolean = false): Mapping[Int] = (min, max) match {$/;"	m
number	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val number: Mapping[Int] = of[Int]$/;"	C
numberOfThreads	framework/src/play/src/main/scala/play/core/system/Execution.scala	/^    val numberOfThreads = play.api.Play.maybeApplication.map(_.configuration.getInt("internal-threadpool-size")).flatten$/;"	C
o	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^        val o = ct.runtimeClass.newInstance.asInstanceOf[T].bind(key, params.mapValues(_.toArray).asJava)$/;"	C
object	framework/src/anorm/src/main/scala/anorm/package.scala	/^package object anorm {$/;"	p
object	framework/src/play-test/src/main/scala/play/api/test/package.scala	/^package object test {$/;"	p
object	framework/src/play/src/main/scala/play/api/data/format/package.scala	/^package object format/;"	p
object	framework/src/play/src/main/scala/play/api/data/package.scala	/^package object data$/;"	p
object	framework/src/play/src/main/scala/play/api/http/package.scala	/^package object http {$/;"	p
object	framework/src/play/src/main/scala/play/api/i18n/package.scala	/^package object i18n/;"	p
object	framework/src/play/src/main/scala/play/api/libs/concurrent/package.scala	/^  package object backwardCompatible {$/;"	p
object	framework/src/play/src/main/scala/play/api/libs/concurrent/package.scala	/^package object concurrent {$/;"	p
object	framework/src/play/src/main/scala/play/api/libs/oauth/package.scala	/^package object oauth/;"	p
object	framework/src/play/src/main/scala/play/api/libs/package.scala	/^package object libs/;"	p
object	framework/src/play/src/main/scala/play/api/libs/ws/package.scala	/^package object ws/;"	p
object	framework/src/play/src/main/scala/play/api/mvc/package.scala	/^package object mvc {$/;"	p
object	framework/src/play/src/main/scala/play/api/package.scala	/^  package object api$/;"	p
object	framework/src/play/src/main/scala/play/api/package.scala	/^package object play$/;"	p
object	framework/src/play/src/main/scala/play/api/templates/package.scala	/^package object templates/;"	p
object	framework/src/play/src/main/scala/views/defaultpages/package.scala	/^package object defaultpages/;"	p
object	framework/src/play/src/main/scala/views/helper/twitterBootstrap/package.scala	/^package object twitterBootstrap {$/;"	p
object	framework/src/play/src/main/scala/views/html/helper/package.scala	/^package object helper {$/;"	p
object	framework/src/play/src/main/scala/views/js/helper/package.scala	/^package object helper {$/;"	p
object	framework/src/play/src/main/scala/views/package.scala	/^  package object html$/;"	p
object	framework/src/play/src/main/scala/views/package.scala	/^  package object txt$/;"	p
object	framework/src/play/src/main/scala/views/package.scala	/^  package object xml$/;"	p
object	framework/src/play/src/main/scala/views/package.scala	/^package object views$/;"	p
ode	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^          val ode = new OrderedDownstreamChannelEvent(oue, cs.lastSubsequence + 1, true, closeEvent)$/;"	C
ode	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    val ode = new OrderedDownstreamChannelEvent(oue, subSequence, last, message)$/;"	C
ode	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^    val ode = new OrderedDownstreamChannelEvent(oue, subSequence, last, message)$/;"	C
of	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def of[WEBDRIVER <: WebDriver](webDriver: Class[WEBDRIVER], baseUrl: Option[String] = None) = TestBrowser(WebDriverFactory(webDriver), baseUrl)$/;"	m
of	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def of[T](implicit binder: Formatter[T]): FieldMapping[T] = FieldMapping[T]()(binder)$/;"	m
ofBytes	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^  def ofBytes(retrieveWebSocket: => play.mvc.WebSocket[Array[Byte]]): Handler = webSocketWrapper[Array[Byte]](retrieveWebSocket)$/;"	m
ofJson	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^  def ofJson(retrieveWebSocket: => play.mvc.WebSocket[com.fasterxml.jackson.databind.JsonNode]): Handler = webSocketWrapper[com.fasterxml.jackson.databind.JsonNode](retrieveWebSocket)$/;"	m
ofString	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^  def ofString(retrieveWebSocket: => play.mvc.WebSocket[String]): Handler = webSocketWrapper[String](retrieveWebSocket)$/;"	m
offset	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^          val offset = xsbti.Maybe.nothing[java.lang.Integer]$/;"	C
offset	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                  def offset = xsbti.Maybe.nothing[java.lang.Integer]$/;"	m
oldContextClassLoader	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^      val oldContextClassLoader = thread.getContextClassLoader()$/;"	C
oldEcho	framework/src/sbt-plugin/src/main/scala/play/PlayInteractionMode.scala	/^      val oldEcho = terminal.isEchoEnabled$/;"	C
oldHttpContext	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^      val oldHttpContext = Http.Context.current.get()$/;"	C
oldLoader	framework/src/play/src/main/scala/play/utils/Threads.scala	/^    val oldLoader = thread.getContextClassLoader$/;"	C
on	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def on(args: (Any, ParameterValue[_])*): SimpleSql[T] = this.copy(params = (this.params) ++ args.map {$/;"	m
onBadRequest	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def onBadRequest(request: RequestHeader, error: String): Future[SimpleResult] = {$/;"	m
onError	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def onError(request: RequestHeader, ex: Throwable): Future[SimpleResult] = {$/;"	m
onFailure	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def onFailure[A](promise: F.Promise[A], action: F.Callback[Throwable], ec: ExecutionContext) {$/;"	m
onHandlerNotFound	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def onHandlerNotFound(request: RequestHeader): Future[SimpleResult] = {$/;"	m
onLoadConfig	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def onLoadConfig(config: Configuration, path: File, classloader: ClassLoader, mode: Mode.Mode): Configuration =$/;"	m
onParams	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def onParams(args: ParameterValue[_]*): SimpleSql[T] = this.copy(params = (this.params) ++ sql.argsInitialOrder.zip(args))$/;"	m
onRedeem	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def onRedeem(k: A => Unit)(implicit ec: ExecutionContext): Unit = extend1 { case Redeemed(a) => k(a); case _ => }$/;"	m
onRedeem	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def onRedeem[A](promise: F.Promise[A], action: F.Callback[A], ec: ExecutionContext): Unit =$/;"	m
onRequestCompletion	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def onRequestCompletion(request: RequestHeader) {$/;"	m
onRequestReceived	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def onRequestReceived(request: RequestHeader): (RequestHeader, Handler) = {$/;"	m
onRouteRequest	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def onRouteRequest(request: RequestHeader): Option[Handler] = Play.maybeApplication.flatMap(_.routes.flatMap { router =>$/;"	m
onStart	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def onStart(app: Application) {$/;"	m
onStart	framework/src/play/src/main/scala/play/api/Plugins.scala	/^  def onStart() {}$/;"	m
onStop	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^  def onStop(app: Application) {$/;"	m
onStop	framework/src/play/src/main/scala/play/api/Plugins.scala	/^  def onStop() {}$/;"	m
operationComplete	framework/src/play/src/main/scala/play/core/server/netty/NettyPromise.scala	/^      def operationComplete(future: ChannelFuture) {$/;"	m
optional	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def optional[A](mapping: Mapping[A]): Mapping[Option[A]] = OptionalMapping(mapping)$/;"	m
options	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def options(): Future[Response] = prepare("OPTIONS").execute$/;"	m
options	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^          val options = ctx.newObject(scope)$/;"	C
options	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val options = fullCompilerOptions.getOrElse {$/;"	C
options	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val options = new CompilerOptions()$/;"	C
optionsForDbUrl	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^    val optionsForDbUrl = options.map { case (k, v) => k + "=" + v }.mkString(";", ";", "")$/;"	C
or	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def or[B](other: Future[B]): Future[Either[A, B]] = {$/;"	m
orTimeout	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def orTimeout(e: Throwable): Future[A] = orTimeout(e, Promise.defaultTimeout)(internalContext).map(_.fold(a => a, e => throw e))(internalContext)$/;"	m
orTimeout	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def orTimeout[B](message: => B, duration: Long, unit: TimeUnit = TimeUnit.MILLISECONDS)(implicit ec: ExecutionContext): Future[Either[A, B]] = {$/;"	m
orTimeout	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def orTimeout[B](message: B): Future[Either[A, B]] = orTimeout(message, Promise.defaultTimeout)(internalContext)$/;"	m
origin	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val origin = Path(source).string$/;"	C
originalContextClassLoader	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val originalContextClassLoader = Thread.currentThread.getContextClassLoader$/;"	C
other	framework/src/anorm/src/main/scala/anorm/SqlStatementParser.scala	/^  def other: Parser[(String, Option[String])] = """.""".r ^^ {$/;"	m
out	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    val out = new ByteArrayOutputStream()$/;"	C
out	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^              val out = new File(resources, "public\/" + naming(name, false))$/;"	C
out	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^    var out = List[String]()$/;"	l
out	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    var out = List[String]()$/;"	l
outMin	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^                val outMin = new File(resources, "public\/" + naming(name, true))$/;"	C
overloaded	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    val overloaded = """(?s)overloaded method value (.*) with alternatives:(.*)cannot be applied to(.*)""".r$/;"	C
owner	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^    val owner = new X500Name(DnName)$/;"	C
p	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^    val p = Promise[Either[A, B]]()$/;"	C
p	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^    val p = SPromise[A]()$/;"	C
p	framework/src/play/src/main/scala/play/api/libs/oauth/OAuth.scala	/^    val p = new CommonsHttpOAuthProvider(info.requestTokenURL, info.accessTokenURL, info.authorizationURL)$/;"	C
p	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^      val p = f(rh)$/;"	C
p	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^    val p = Promise[A]()$/;"	C
p	framework/src/play/src/main/scala/play/core/server/netty/NettyPromise.scala	/^    val p = scala.concurrent.Promise[Unit]()$/;"	C
p	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^    val p: ChannelPipeline = ctx.getChannel().getPipeline();$/;"	C
pairs	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^    val pairs = nettyRequest.getHeaders.asScala.groupBy(_.getKey).mapValues(_.map(_.getValue))$/;"	C
parameter	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val parameter = token ~ opt('=' ~> (token | quotedString)) <~ rep(' ') ^^ {$/;"	C
parameters	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val parameters = rep(';' ~> rep(' ') ~> tolerantParameter <~ rep(' '))$/;"	C
parameters	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      val parameters = Seq($/;"	C
parameters	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^          val parameters = Map.empty[String, Seq[String]] ++ nettyUri.getParameters.asScala.mapValues(_.asScala)$/;"	C
params	framework/src/play/src/main/scala/play/core/parsers/FormUrlEncodedParser.scala	/^    var params = HashMap.empty[String, Seq[String]]$/;"	l
parentRoutes	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^    val parentRoutes = loadRoutes$/;"	C
parse	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def parse[T](parser: ResultSetParser[T])(implicit connection: java.sql.Connection): T = Sql.parse[T](parser, resultSet())$/;"	m
parse	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def parse[T](parser: ResultSetParser[T], rs: java.sql.ResultSet): T =$/;"	m
parse	framework/src/anorm/src/main/scala/anorm/SqlStatementParser.scala	/^  def parse(in: String): (String, List[String]) = {$/;"	m
parse	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def parse = {$/;"	m
parse	framework/src/play/src/main/scala/play/core/parsers/FormUrlEncodedParser.scala	/^  def parse(data: String, encoding: String = "utf-8"): Map[String, Seq[String]] = {$/;"	m
parseDate	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^    def parseDate(date: String): Option[java.util.Date] = try {$/;"	m
parsed	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^              var parsed: (Option[(String, String, String)], Option[Int]) = (None, None)$/;"	l
parsedBody	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^        val parsedBody: Option[Either[SimpleResult, T]] = {$/;"	C
parser	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def parser = phrase((sentence | blankLine *) <~ end) ^^ {$/;"	m
parser	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^    def parser = composeParser(bodyParser)$/;"	m
parser	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def parser: BodyParser[A]$/;"	m
parser	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^  val parser: BodyParser[play.mvc.Http.RequestBody] =$/;"	C
parser	framework/src/play/src/main/scala/play/core/router/Router.scala	/^          val parser = annotations.parser$/;"	C
parser	framework/src/play/src/main/scala/play/core/router/Router.scala	/^          val parser = javaAction.annotations.parser$/;"	C
parser	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val parser = Act.scopedKeyParser(state)$/;"	C
parts	framework/src/play/src/main/scala/play/core/parsers/FormUrlEncodedParser.scala	/^        val parts = param.split('=')$/;"	C
password	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^        val password = System.getProperty("https.keyStorePassword", "").toCharArray$/;"	C
path	framework/src/console/src/main/scala/Console.scala	/^    val path = args.headOption.map(new File(_)).getOrElse(new File(".")).getCanonicalFile$/;"	C
path	framework/src/play/src/main/scala/play/api/Application.scala	/^  def path: File$/;"	m
path	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      def path(path: String) = if (null == path || path.isEmpty) "\/" else path$/;"	m
path	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def path: String = ahcCookie.getPath$/;"	m
path	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def path: String$/;"	m
path	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^        val path = _path$/;"	C
path	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def path = rh.path$/;"	m
path	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def path = self.path$/;"	m
path	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def path = "\/"$/;"	m
path	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def path = request.path$/;"	m
path	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def path: String$/;"	m
path	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def path = req.path$/;"	m
path	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            def path = new URI(nettyUri.getPath).getRawPath \/\/wrapping into URI to handle absoluteURI$/;"	m
path	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def path = application.path$/;"	m
path	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def path = applicationPath$/;"	m
path	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def path: File$/;"	m
pathFinder	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^        val pathFinder = baseDirectory * "README*"$/;"	C
pathFinder	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^        val pathFinder = confDirectory ** ("*" -- "routes")$/;"	C
pathFinder	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^        val pathFinder = docDirectory ** "*"$/;"	C
pattern	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^  def pattern(regex: => scala.util.matching.Regex, name: String = "constraint.pattern", error: String = "error.pattern"): Constraint[String] = Constraint[String](name, () => regex) { o =>$/;"	m
pattern	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    val pattern: Option[String] =$/;"	C
pec	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^    val pec = ec.prepare()$/;"	C
pidFile	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^      val pidFile = Option(System.getProperty("pidfile.path")).map(new File(_)).getOrElse(new File(applicationPath.getAbsolutePath, "RUNNING_PID"))$/;"	C
pipeline	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val pipeline = ctx.getChannel.getPipeline$/;"	C
pipeline	framework/src/play/src/main/scala/play/core/server/websocket/WebSocketHandshake.scala	/^    val pipeline = ctx.getChannel().getPipeline()$/;"	C
play	framework/src/play/src/main/scala/play/api/package.scala	/^package play {$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlaySettings.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/play/PlayInteractionMode.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/play/PlayRunHooks.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/play/Project.scala	/^package play$/;"	p
play	framework/src/sbt-plugin/src/main/scala/test/PlayTestListener.scala	/^package play$/;"	p
play.api	framework/src/play-test/src/main/scala/play/api/test/package.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/Application.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/Configuration.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/Exceptions.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/GlobalSettings.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/Logger.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/Play.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/Plugins.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/Routes.scala	/^package play.api {$/;"	p
play.api	framework/src/play/src/main/scala/play/api/data/package.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/http/package.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/i18n/package.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/libs/package.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/mvc/package.scala	/^package play.api$/;"	p
play.api	framework/src/play/src/main/scala/play/api/templates/package.scala	/^package play.api$/;"	p
play.api.data	framework/src/play/src/main/scala/play/api/data/Form.scala	/^package play.api.data$/;"	p
play.api.data	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^package play.api.data$/;"	p
play.api.data	framework/src/play/src/main/scala/play/api/data/format/package.scala	/^package play.api.data$/;"	p
play.api.data	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^package play.api.data$/;"	p
play.api.data.format	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^package play.api.data.format$/;"	p
play.api.data.validation	framework/src/play/src/main/scala/play/api/data/validation/Validation.scala	/^package play.api.data.validation$/;"	p
play.api.http	framework/src/play/src/main/scala/play/api/http/ContentTypeOf.scala	/^package play.api.http$/;"	p
play.api.http	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^package play.api.http$/;"	p
play.api.http	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^package play.api.http$/;"	p
play.api.http	framework/src/play/src/main/scala/play/api/http/Writeable.scala	/^package play.api.http$/;"	p
play.api.i18n	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^package play.api.i18n$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/Collections.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/Comet.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/EventSource.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/JNDI.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/Jsonp.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/MimeTypes.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/concurrent/package.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/oauth/package.scala	/^package play.api.libs$/;"	p
play.api.libs	framework/src/play/src/main/scala/play/api/libs/ws/package.scala	/^package play.api.libs$/;"	p
play.api.libs.concurrent	framework/src/play/src/main/scala/play/api/libs/concurrent/Akka.scala	/^package play.api.libs.concurrent$/;"	p
play.api.libs.concurrent	framework/src/play/src/main/scala/play/api/libs/concurrent/Execution.scala	/^package play.api.libs.concurrent$/;"	p
play.api.libs.concurrent	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^package play.api.libs.concurrent$/;"	p
play.api.libs.oauth	framework/src/play/src/main/scala/play/api/libs/oauth/OAuth.scala	/^package play.api.libs.oauth$/;"	p
play.api.libs.openid	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^package play.api.libs.openid$/;"	p
play.api.libs.openid	framework/src/play/src/main/scala/play/api/libs/openid/OpenIDError.scala	/^package play.api.libs.openid$/;"	p
play.api.libs.ws	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^package play.api.libs.ws$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/Content.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/Controller.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^package play.api.mvc {$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/Render.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/Security.scala	/^package play.api.mvc$/;"	p
play.api.mvc	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^package play.api.mvc$/;"	p
play.api.templates	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^package play.api.templates$/;"	p
play.api.templates	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^package play.api.templates {$/;"	p
play.api.test	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^package play.api.test$/;"	p
play.api.test	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^package play.api.test$/;"	p
play.api.test	framework/src/play-test/src/main/scala/play/api/test/PlaySpecification.scala	/^package play.api.test$/;"	p
play.api.test	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^package play.api.test$/;"	p
play.api.test	framework/src/play-test/src/main/scala/play/api/test/Specs.scala	/^package play.api.test$/;"	p
play.console	framework/src/console/src/main/scala/Console.scala	/^package play.console$/;"	p
play.core	framework/src/play/src/main/scala/play/core/router/Router.scala	/^package play.core$/;"	p
play.core	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^package play.core$/;"	p
play.core	framework/src/play/src/main/scala/play/core/system/Execution.scala	/^package play.core$/;"	p
play.core	framework/src/play/src/main/scala/play/core/system/Invoker.scala	/^package play.core$/;"	p
play.core	framework/src/play/src/main/scala/play/core/system/NamedThreadFactory.scala	/^package play.core$/;"	p
play.core.coffeescript	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^package play.core.coffeescript$/;"	p
play.core.j	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^package play.core.j$/;"	p
play.core.j	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^package play.core.j$/;"	p
play.core.j	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^package play.core.j$/;"	p
play.core.j	framework/src/play/src/main/scala/play/core/j/JavaGlobalSettingsAdapter.scala	/^package play.core.j$/;"	p
play.core.j	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^package play.core.j$/;"	p
play.core.j	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^package play.core.j$/;"	p
play.core.j	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^package play.core.j$/;"	p
play.core.j	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^package play.core.j$/;"	p
play.core.j	framework/src/play/src/main/scala/play/core/j/OrderedExecutionContext.scala	/^package play.core.j$/;"	p
play.core.jscompile	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^package play.core.jscompile$/;"	p
play.core.less	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^package play.core.less$/;"	p
play.core.parsers	framework/src/play/src/main/scala/play/core/parsers/FormUrlEncodedParser.scala	/^package play.core.parsers$/;"	p
play.core.server	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^package play.core.server$/;"	p
play.core.server	framework/src/play/src/main/scala/play/core/server/Server.scala	/^package play.core.server$/;"	p
play.core.server.netty	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^package play.core.server.netty$/;"	p
play.core.server.netty	framework/src/play/src/main/scala/play/core/server/netty/NettyPromise.scala	/^package play.core.server.netty$/;"	p
play.core.server.netty	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^package play.core.server.netty$/;"	p
play.core.server.netty	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^package play.core.server.netty$/;"	p
play.core.server.netty	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^package play.core.server.netty$/;"	p
play.core.server.netty	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^package play.core.server.netty$/;"	p
play.core.server.websocket	framework/src/play/src/main/scala/play/core/server/websocket/Frame.scala	/^package play.core.server.websocket$/;"	p
play.core.server.websocket	framework/src/play/src/main/scala/play/core/server/websocket/WebSocketHandshake.scala	/^package play.core.server.websocket$/;"	p
play.core.utils	framework/src/play/src/main/scala/play/utils/CaseInsensitiveOrdered.scala	/^package play.core.utils$/;"	p
play.templates	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^package play.templates {$/;"	p
play.utils	framework/src/play/src/main/scala/play/utils/Colors.scala	/^package play.utils$/;"	p
play.utils	framework/src/play/src/main/scala/play/utils/Conversions.scala	/^package play.utils$/;"	p
play.utils	framework/src/play/src/main/scala/play/utils/ProxyDriver.scala	/^package play.utils$/;"	p
play.utils	framework/src/play/src/main/scala/play/utils/Threads.scala	/^package play.utils$/;"	p
play.utils	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^package play.utils$/;"	p
playAssetsDirectories	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playAssetsDirectories = SettingKey[Seq[File]]("play-assets-directories")$/;"	C
playCommand	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val playCommand = Command.command("play", Help("play", ("play", "Enter the play console"), "Welcome to Play " + play.core.PlayVersion.current + """!$/;"	C
playCommonClassloader	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playCommonClassloader = TaskKey[ClassLoader]("play-common-classloader")$/;"	C
playCommonClassloaderTask	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val playCommonClassloaderTask = (dependencyClasspath in Compile) map { classpath =>$/;"	C
playCompileEverything	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playCompileEverything = TaskKey[Seq[sbt.inc.Analysis]]("play-compile-everything")$/;"	C
playCompileEverythingTask	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val playCompileEverythingTask = (state, thisProjectRef) flatMap { (s, r) =>$/;"	C
playConfig	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    val playConfig = play.api.Play.maybeApplication.map(_.configuration)$/;"	C
playCopyAssets	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val playCopyAssets = TaskKey[Seq[(File, File)]]("play-copy-assets")$/;"	C
playCopyAssetsTask	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val playCopyAssetsTask = (baseDirectory, managedResources in Compile, resourceManaged in Compile, playAssetsDirectories, playExternalAssets, classDirectory in Compile, cacheDirectory, streams, state) map { (b, resources, resourcesDirectories, r, externals, t, c, s, state) =>$/;"	C
playDefaultPort	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playDefaultPort = SettingKey[Int]("play-default-port")$/;"	C
playDependencyClassLoader	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playDependencyClassLoader = TaskKey[ClassLoaderCreator]("play-dependency-classloader")$/;"	C
playDependencyClasspath	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playDependencyClasspath = TaskKey[Classpath]("play-dependency-classpath")$/;"	C
playExternalAssets	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playExternalAssets = SettingKey[Seq[(File, File => PathFinder, String)]]("play-external-assets")$/;"	C
playInteractionMode	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playInteractionMode = SettingKey[play.PlayInteractionMode]("play-interaction-mode")$/;"	C
playMonitoredFiles	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val playMonitoredFiles = TaskKey[Seq[String]]("play-monitored-files")$/;"	C
playMonitoredFilesTask	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val playMonitoredFilesTask = (thisProjectRef, state) map { (ref, state) =>$/;"	C
playOnStarted	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playOnStarted = SettingKey[Seq[(java.net.InetSocketAddress) => Unit]]("play-onStarted")$/;"	C
playOnStopped	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playOnStopped = SettingKey[Seq[() => Unit]]("play-onStopped")$/;"	C
playPlugin	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playPlugin = SettingKey[Boolean]("play-plugin")$/;"	C
playPositionMapper	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^  val playPositionMapper = playPositionMappers.reduceLeft { (m1, m2) =>$/;"	C
playPositionMappers	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^  val playPositionMappers = Seq(templatePositionMapper, routesPositionMapper)$/;"	C
playPrompt	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val playPrompt = { state: State =>$/;"	C
playReload	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playReload = TaskKey[sbt.inc.Analysis]("play-reload")$/;"	C
playReloadTask	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val playReloadTask = (playCopyAssets, playCompileEverything) map { (_, analysises) =>$/;"	C
playReloaderClassLoader	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playReloaderClassLoader = TaskKey[ClassLoaderCreator]("play-reloader-classloader")$/;"	C
playReloaderClasspath	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playReloaderClasspath = TaskKey[Classpath]("play-reloader-classpath")$/;"	C
playRunHooks	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playRunHooks = TaskKey[Seq[play.PlayRunHook]]("play-run-hooks")$/;"	C
playRunSetting	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^  val playRunSetting: SbtProject.Initialize[InputTask[Unit]] = playRunTask(playRunHooks, playDependencyClasspath, playDependencyClassLoader, playReloaderClasspath, playReloaderClassLoader)$/;"	C
playRunTask	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^  def playRunTask($/;"	m
playStartCommand	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^  val playStartCommand = Command.args("start", "<port>") { (state: State, args: Seq[String]) =>$/;"	C
playVersion	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val playVersion = SettingKey[String]("play-version")$/;"	C
plugin	framework/src/play/src/main/scala/play/api/Application.scala	/^            val plugin = classloader.loadClass(className).getConstructor(classOf[play.Application]).newInstance(new play.Application(this)).asInstanceOf[Plugin]$/;"	C
plugin	framework/src/play/src/main/scala/play/api/Application.scala	/^        val plugin = classloader.loadClass(className).getConstructor(classOf[Application]).newInstance(this).asInstanceOf[Plugin]$/;"	C
plugin	framework/src/play/src/main/scala/play/api/Application.scala	/^  def plugin[T](implicit ct: ClassTag[T]): Option[T] = plugin(ct.runtimeClass).asInstanceOf[Option[T]]$/;"	m
plugin	framework/src/play/src/main/scala/play/api/Application.scala	/^  def plugin[T](pluginClass: Class[T]): Option[T] =$/;"	m
pluginFiles	framework/src/play/src/main/scala/play/api/Application.scala	/^    val pluginFiles = self.classloader.getResources("play.plugins").asScala.toList ++ self.classloader.getResources("conf\/play.plugins").asScala.toList$/;"	C
plugins	framework/src/play/src/main/scala/play/api/Application.scala	/^  def plugins: Seq[Plugin]$/;"	m
pointer	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^          val pointer = xsbti.Maybe.nothing[java.lang.Integer]$/;"	C
pointer	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                  def pointer = maybePosition.map(pos => xsbti.Maybe.just((pos - 1).asInstanceOf[java.lang.Integer])).getOrElse(xsbti.Maybe.nothing[java.lang.Integer])$/;"	m
pointerSpace	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^          val pointerSpace = xsbti.Maybe.nothing[String]$/;"	C
pointerSpace	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                  def pointerSpace = xsbti.Maybe.nothing[String]$/;"	m
port	framework/src/play-test/src/main/scala/play/api/test/Specs.scala	/^    val port: Int = Helpers.testServerPort) extends Around with Scope {$/;"	C
port	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      def port(p: Int) = p match {$/;"	m
position	framework/src/play/src/main/scala/play/api/Application.scala	/^          def position = null$/;"	m
position	framework/src/play/src/main/scala/play/api/Configuration.scala	/^      def position = null$/;"	m
position	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^            def position = in.pos.column - 1$/;"	m
position	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def position = column$/;"	m
position	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def position = column.map(_.asInstanceOf[java.lang.Integer]).orNull$/;"	m
position	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def position = problem.position.pointer.map(m => m.asInstanceOf[java.lang.Integer]).orNull$/;"	m
position	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                def position = new xsbti.Position {$/;"	m
position	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def position = pos$/;"	m
position	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    def position = null$/;"	m
post	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def post(body: File): Future[Response] = prepare("POST", body).execute$/;"	m
post	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def post[T](body: T)(implicit wrt: Writeable[T], ct: ContentTypeOf[T]): Future[Response] = prepare("POST", body).execute$/;"	m
postAndRetrieveStream	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def postAndRetrieveStream[A, T](body: T)(consumer: ResponseHeaders => Iteratee[Array[Byte], A])(implicit wrt: Writeable[T], ct: ContentTypeOf[T]): Future[Iteratee[Array[Byte], A]] = prepare("POST", body).executeStream(consumer)$/;"	m
postfix	framework/src/sbt-plugin/src/main/scala/test/PlayTestListener.scala	/^    val postfix = "Total " + totalCount + ", Failed " + failures + ", Errors " + errors + ", Passed " + passed + ", Skipped " + skipped$/;"	C
preferred	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def preferred(langs: Seq[Lang])(implicit app: Application): Lang = {$/;"	m
prefix	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^      def prefix = parentRoutes.map(_.prefix).getOrElse("")$/;"	m
prefix	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def prefix: String$/;"	m
process	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^    def process() {$/;"	m
processStream	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def processStream(log: Logger, level: Level.Value): InputStream => Unit =$/;"	m
processStream	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def processStream(processLine: String => Unit): InputStream => Unit = in => {$/;"	m
projectTransformers	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^    val projectTransformers = if (mainLang == SCALA) Seq[EclipseTransformerFactory[RewriteRule]]() else Seq(addJavaBuilder)$/;"	C
promise	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def promise[A](callable: Callable[A], ec: ExecutionContext): F.Promise[A] =$/;"	m
promise	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def promise[A](function: F.Function0[A], ec: ExecutionContext): F.Promise[A] =$/;"	m
promise	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^        val promise = NettyPromise(sendDownstream(startSequence, !closeConnection, nettyResponse))$/;"	C
promisedResult	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^        val promisedResult = Promise[SimpleResult]$/;"	C
properties	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^        val properties = Seq(("eclipse.preferences.version", "1"), ("templateImports", value))$/;"	C
properties	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^        val properties = new Properties$/;"	C
properties	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^  val properties =$/;"	C
props	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^        val props: ListBuffer[Node] = new ListBuffer()$/;"	C
pure	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def pure[A](a: => A): Future[A] = PurePromise(a)$/;"	m
pure	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def pure[A](a: A): F.Promise[A] = F.Promise.wrap(Future.successful(a))$/;"	m
pushChunk	framework/src/play/src/main/scala/play/core/server/netty/RequestBodyHandler.scala	/^    def pushChunk(ctx: ChannelHandlerContext, chunk: Input[Array[Byte]]) {$/;"	m
put	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def put(body: File): Future[Response] = prepare("PUT", body).execute$/;"	m
put	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def put[T](body: T)(implicit wrt: Writeable[T], ct: ContentTypeOf[T]): Future[Response] = prepare("PUT", body).execute$/;"	m
putAndRetrieveStream	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def putAndRetrieveStream[A, T](body: T)(consumer: ResponseHeaders => Iteratee[Array[Byte], A])(implicit wrt: Writeable[T], ct: ContentTypeOf[T]): Future[Iteratee[Array[Byte], A]] = prepare("PUT", body).executeStream(consumer)$/;"	m
qCompare	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^      val qCompare = compareQValues(a.qValue, b.qValue)$/;"	C
qPattern	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    val qPattern = ";\\\\s*q=([0-9.]+)".r$/;"	C
qValue	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^      val qValue = qValueStr.flatMap { q =>$/;"	C
qValue	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val qValue: Option[BigDecimal],$/;"	C
qb	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^    val qb = Process(in)$/;"	C
qb	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val qb = Process(in)$/;"	C
qbd	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^          val qbd = BigDecimal(q)$/;"	C
qdtext	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val qdtext = not('"') ~> text$/;"	C
queryString	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def queryString: Map[String, Seq[String]] = {$/;"	m
queryString	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^        val queryString = _queryString$/;"	C
queryString	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def queryString = rh.queryString$/;"	m
queryString	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def queryString = self.queryString$/;"	m
queryString	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def queryString = request.queryString$/;"	m
queryString	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def queryString: Map[String, Seq[String]]$/;"	m
queryString	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def queryString = {$/;"	m
queryString	framework/src/play/src/main/scala/play/core/router/Router.scala	/^  def queryString(items: List[Option[String]]) = {$/;"	m
queryString	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            def queryString = parameters$/;"	m
quote	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          var quote: Boolean = false$/;"	l
quotedPair	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val quotedPair = '\\\\' ~> char$/;"	C
quotedString	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val quotedString = '"' ~> rep(quotedPair | qdtext) <~ '"' ^^ charSeqToString$/;"	C
r	framework/src/anorm/src/main/scala/anorm/SqlStatementParser.scala	/^    val r = parse(instr, in.trim().replace("\\r", "").replace("\\n", " ")).get$/;"	C
r	framework/src/play/src/main/scala/play/core/j/JavaGlobalSettingsAdapter.scala	/^    val r = JavaHelpers.createJavaRequest(request)$/;"	C
r	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^                val r = server.applicationProvider.get.map(_.global).getOrElse(DefaultGlobal).onBadRequest(rh, e.getMessage)$/;"	C
r	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^      val r = eRegex.unapplySeq(errReverse.mkString("")).map(_.head.toInt)$/;"	C
r	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^      val r = ctx.evaluateReader(scope, new InputStreamReader($/;"	C
r	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^      val r = eRegex.unapplySeq(errReverse.mkString("")).map(_.head.toInt)$/;"	C
rHeaders	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        val rHeaders = getHeaders(nettyHttpRequest)$/;"	C
rRemoteAddress	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        def rRemoteAddress = e.getRemoteAddress match {$/;"	m
random	framework/src/console/src/main/scala/Console.scala	/^    val random = new java.security.SecureRandom$/;"	C
raw	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^    val raw = privateKey.getBytes("utf-8")$/;"	C
raw	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def raw(memoryThreshold: Int): BodyParser[RawBuffer] = BodyParser("raw, memoryThreshold=" + memoryThreshold) { request =>$/;"	m
raw	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def raw: BodyParser[RawBuffer] = raw(memoryThreshold = 100 * 1024)$/;"	m
raw	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def raw(text: String) = Txt(text)$/;"	m
raw	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def raw(text: String) = Xml(text)$/;"	m
raw	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def raw(text: String): Html = Html(text)$/;"	m
raw	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def raw(text: String): JavaScript = JavaScript(text)$/;"	m
raw	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def raw(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.raw).map { body =>$/;"	m
raw	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^    def raw(text: String): T$/;"	m
read	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^      def read() {$/;"	m
readApplicationName	framework/src/console/src/main/scala/Console.scala	/^  def readApplicationName(defaultName: String): String = {$/;"	m
readChunk	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def readChunk(size: Int) = for {$/;"	m
readChunkData	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def readChunkData(size: Int, chunk: List[Array[Byte]] = Nil): Iteratee[Array[Byte], Array[Byte]] = Cont {$/;"	m
readContent	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^  def readContent(file: File) = Path(file).string.replace("\\r", "")$/;"	m
readFile	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^  def readFile(path: File): String = Path(path).string$/;"	m
readLastChunk	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def readLastChunk: Iteratee[Array[Byte], List[(String, String)]] = for {$/;"	m
readLine	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def readLine(line: List[Array[Byte]] = Nil): Iteratee[Array[Byte], String] = Cont {$/;"	m
readPart	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^            val readPart = collectHeaders.flatMap { case (headers, left) => Iteratee.flatten(partHandler(headers).feed(Input.El(left))) }$/;"	C
reader	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^    val reader = new BufferedReader(new InputStreamReader(in))$/;"	C
receive	framework/src/play/src/main/scala/play/core/j/OrderedExecutionContext.scala	/^    def receive = {$/;"	m
recover	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def recover[A](promise: F.Promise[A], function: F.Function[Throwable, A], ec: ExecutionContext): F.Promise[A] =$/;"	m
red	framework/src/console/src/main/scala/Console.scala	/^  def red(str: String): String = if (isANSISupported) (RED + str + RESET) else str$/;"	m
red	framework/src/play/src/main/scala/play/utils/Colors.scala	/^  def red(str: String): String = if (isANSISupported) (RED + str + RESET) else str$/;"	m
redeem	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def redeem(a: => A)(implicit ec: ExecutionContext): Unit = p.completeWith(Future(a)(ec))$/;"	m
redeem	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def redeem(a: => A)(implicit ec: ExecutionContext): Unit$/;"	m
redirect	framework/src/play/src/main/scala/play/api/controllers/Default.scala	/^  def redirect(to: String): Action[AnyContent] = Action {$/;"	m
redirectLocation	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def redirectLocation(of: Future[SimpleResult])(implicit timeout: Timeout): Option[String] = Await.result(of, timeout.duration).header match {$/;"	m
redirectURL	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  def redirectURL(openID: String,$/;"	m
redirectUrl	framework/src/play/src/main/scala/play/api/libs/oauth/OAuth.scala	/^  def redirectUrl(token: String): String = {$/;"	m
ref	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^    val ref = Ref(false)$/;"	C
relativeModulePath	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val relativeModulePath = (str: String) => str.replace(".js", "")$/;"	C
reload	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def reload: AnyRef = {$/;"	m
reloadNextTime	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      var reloadNextTime = false$/;"	l
reloadable	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^              val reloadable = this$/;"	C
reloaded	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^        val reloaded = sbtLink.reload match {$/;"	C
reloaded	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^              def reloaded(): Unit = ()$/;"	m
reloaded	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def reloaded() { _changed = false }$/;"	m
remapProblemForGeneratedSources	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def remapProblemForGeneratedSources(problem: xsbti.Problem) = {$/;"	m
remoteAddress	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^        val remoteAddress = _remoteAddress$/;"	C
remoteAddress	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def remoteAddress = self.remoteAddress$/;"	m
remoteAddress	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def remoteAddress = request.remoteAddress$/;"	m
remoteAddress	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def remoteAddress: String$/;"	m
remoteAddress	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def remoteAddress = req.remoteAddress$/;"	m
remoteAddress	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val remoteAddress = ra.getAddress.getHostAddress$/;"	C
removeWatch	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^              def removeWatch(id: Int): Unit = ()$/;"	m
removeWatch	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def removeWatch(id: Int): Unit = removeWatchMethod.invoke(null, id.asInstanceOf[AnyRef])$/;"	m
removeWatchMethod	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val removeWatchMethod = jnotifyClass.getMethod("removeWatch", classOf[Int])$/;"	C
replace	framework/src/console/src/main/scala/Console.scala	/^  def replace(file: File, tokens: (String, String)*) {$/;"	m
report	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val report = XML.loadFile($/;"	C
reportCompilationError	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^  def reportCompilationError(state: State, error: PlayException.ExceptionSource) = {$/;"	m
reportError	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def reportError(path: String, message: String, e: Option[Throwable] = None): PlayException = {$/;"	m
reportFailure	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^    def reportFailure(t: Throwable) = delegate.reportFailure(t)$/;"	m
reportFailure	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^  def reportFailure(t: Throwable) = delegate.reportFailure(t)$/;"	m
reportFailure	framework/src/play/src/main/scala/play/core/j/OrderedExecutionContext.scala	/^  def reportFailure(t: Throwable) = Logger.error("Failure in OrderedExecutionContext", t)$/;"	m
request	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^      val request = new WSRequest(method, auth, calc).setUrl(url)$/;"	C
request	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^      val request = Request(rh, a)$/;"	C
require	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^  def require(source: File): Unit = {$/;"	m
requireJs	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val requireJs = SettingKey[Seq[String]]("play-require-js")$/;"	C
requireJsFolder	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val requireJsFolder = SettingKey[String]("play-require-js-folder")$/;"	C
requireJsShim	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val requireJsShim = SettingKey[String]("play-require-js-shim")$/;"	C
requireNativePath	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val requireNativePath = SettingKey[Option[String]]("play-require-native-path")$/;"	C
requireSupport	framework/src/sbt-plugin/src/main/scala/PlayAssetsCompiler.scala	/^      val requireSupport = if (!requireJs.isEmpty) {$/;"	C
res	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^      val res = mapAsScalaMapConverter(headers).asScala.map(e => e._1 -> e._2.asScala.toSeq).toMap$/;"	C
resolve	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    def resolve(response: Response) = for {$/;"	m
resolve	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    def resolve(response: Response) = {$/;"	m
resolve	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    def resolve(response: Response): Option[OpenIDServer]$/;"	m
resolve	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^  def resolve(originalSource: File, imported: String) = new File(originalSource.getParentFile, imported)$/;"	m
resource	framework/src/play/src/main/scala/play/api/Application.scala	/^  def resource(name: String): Option[java.net.URL] = {$/;"	m
resource	framework/src/play/src/main/scala/play/api/Play.scala	/^  def resource(name: String)(implicit app: Application): Option[java.net.URL] = {$/;"	m
resource	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^      val resource = {$/;"	C
resource	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^            val resource = reloader.currentApplicationClassLoader.map(findResource.invoke(_, name).asInstanceOf[java.net.URL]).orNull$/;"	C
resourceAsStream	framework/src/play/src/main/scala/play/api/Application.scala	/^  def resourceAsStream(name: String): Option[InputStream] = {$/;"	m
resourceAsStream	framework/src/play/src/main/scala/play/api/Play.scala	/^  def resourceAsStream(name: String)(implicit app: Application): Option[InputStream] = {$/;"	m
resourceName	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^    val resourceName = Option(path + "\/" + decodedFile).map(name => if (name.startsWith("\/")) name else ("\/" + name)).get$/;"	C
resources	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val resources = inAllDependencies(ref, resourceDirectories in Compile, SbtProject structure state).foldLeft(Seq.empty[File])(_ ++ _)$/;"	C
resources1	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^            val resources1 = reloader.currentApplicationClassLoader.map(findResources.invoke(_, name).asInstanceOf[java.util.Enumeration[java.net.URL]]).getOrElse(new java.util.Vector[java.net.URL]().elements)$/;"	C
resources2	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^            val resources2 = super.getResources(name)$/;"	C
response	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^              val response = SimpleResult($/;"	C
result	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^      val result = sql.argsInitialOrder$/;"	C
result	framework/src/play/src/main/scala/play/api/data/Form.scala	/^    val result = mapping.unbind(value)$/;"	C
result	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^    val result = new Array[Char](array.length * 2)$/;"	C
result	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^    val result = Promise[B]()$/;"	C
result	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^      var result = Promise[Response]()$/;"	l
result	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          val result = new ListBuffer[String]$/;"	C
result	framework/src/play/src/main/scala/play/api/mvc/Filters.scala	/^        val result = self.apply({ (rh: RequestHeader) =>$/;"	C
result	framework/src/play/src/main/scala/play/api/mvc/Render.scala	/^      val result =$/;"	C
result	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^        val result = enumerator.onDoneEnumerating(onDisconnected.invoke()).apply(i)$/;"	C
result	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^                  val result = app.map(_.handleError(requestHeader, error)).getOrElse(DefaultGlobal.onError(requestHeader, error))$/;"	C
result	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val result = newRequestBodyUpstreamHandler(bodyParser, { handler =>$/;"	C
result	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    val result = scala.collection.mutable.ListBuffer.empty[String]$/;"	C
result	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val result = SbtProject.runTask(sk.asInstanceOf[Def.ScopedKey[Task[AnyRef]]], state).map(_._2)$/;"	C
result	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^      val result = Context.call(null, compilerFunction, scope, scope, Array(source)).asInstanceOf[Scriptable]$/;"	C
result	framework/src/sbt-plugin/src/main/scala/test/PlayTestListener.scala	/^  val result = new collection.mutable.ListBuffer[String]$/;"	C
resultSet	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def resultSet()(implicit connection: java.sql.Connection) = (getFilledStatement(connection).executeQuery())$/;"	m
resultSetToStream	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def resultSetToStream(rs: java.sql.ResultSet): Stream[SqlRow] = {$/;"	m
retrieveAccessToken	framework/src/play/src/main/scala/play/api/libs/oauth/OAuth.scala	/^  def retrieveAccessToken(token: RequestToken, verifier: String): Either[OAuthException, RequestToken] = {$/;"	m
retrieveRequestToken	framework/src/play/src/main/scala/play/api/libs/oauth/OAuth.scala	/^  def retrieveRequestToken(callbackURL: String): Either[OAuthException, RequestToken] = {$/;"	m
rh	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^                val rh = createRequestHeader()$/;"	C
rhWithCt	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^    val rhWithCt = w.contentType.map(ct => rh.copy($/;"	C
rjnewDir	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val rjnewDir = new File(rjoldDir.getAbsolutePath + "-min")$/;"	C
rjoldDir	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val rjoldDir = crossTarget \/ "classes" \/ "public" \/ jsFolder$/;"	C
rootAction	framework/src/play/src/main/scala/play/core/j/JavaAction.scala	/^    val rootAction = new JAction[Any] {$/;"	C
route	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def route[T](app: Application, req: Request[T])(implicit w: Writeable[T]): Option[Future[SimpleResult]] = route(app, req, req.body)$/;"	m
route	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def route[T](app: Application, rh: RequestHeader, body: T)(implicit w: Writeable[T]): Option[Future[SimpleResult]] = {$/;"	m
route	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def route[T](req: Request[T])(implicit w: Writeable[T]): Option[Future[SimpleResult]] = route(Play.current, req)$/;"	m
route	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def route[T](rh: RequestHeader, body: T)(implicit w: Writeable[T]): Option[Future[SimpleResult]] = route(Play.current, rh, body)$/;"	m
routeAndCall	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def routeAndCall[T, ROUTER <: play.core.Router.Routes](router: Class[ROUTER], request: FakeRequest[T])(implicit timeout: Timeout): Option[Future[SimpleResult]] = {$/;"	m
routeAndCall	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def routeAndCall[T](request: FakeRequest[T])(implicit timeout: Timeout): Option[Future[SimpleResult]] = {$/;"	m
routes	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^      val routes = new AbstractPartialFunction[RequestHeader, Handler] {$/;"	C
routes	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^    val routes = router.getClassLoader.loadClass(router.getName + "$").getDeclaredField("MODULE$").get(null).asInstanceOf[play.core.Router.Routes]$/;"	C
routes	framework/src/play/src/main/scala/play/api/Play.scala	/^  def routes(implicit app: Application): Option[play.core.Router.Routes] = app.routes$/;"	m
routes	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def routes: PartialFunction[RequestHeader, Handler]$/;"	m
routesImport	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val routesImport = SettingKey[Seq[String]]("play-routes-imports")$/;"	C
routesPositionMapper	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^  val routesPositionMapper: Position => Option[Position] = position => {$/;"	C
rsMetaData	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val rsMetaData = metaData(rs)$/;"	C
run	framework/src/console/src/main/scala/Console.scala	/^  def run(app: xsbti.AppConfiguration): Exit = {$/;"	m
run	framework/src/console/src/main/scala/Console.scala	/^  def run(args: Array[String]): Int = {$/;"	m
run	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^      def run() { p.complete(result) }$/;"	m
run	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^      def run() { p.completeWith(Future(f)(pec)) }$/;"	m
run	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^    def run() {$/;"	m
run	framework/src/sbt-plugin/src/main/scala/play/PlayRunHooks.scala	/^    def run(f: PlayRunHook => Unit, suppressFailure: Boolean = false): Unit = try {$/;"	m
runTask	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def runTask(task: String): AnyRef = {$/;"	m
running	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def running[T, WEBDRIVER <: WebDriver](testServer: TestServer, webDriver: Class[WEBDRIVER])(block: TestBrowser => T): T = {$/;"	m
running	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def running[T](fakeApp: FakeApplication)(block: => T): T = {$/;"	m
running	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def running[T](testServer: TestServer)(block: => T): T = {$/;"	m
s	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val s = if (getGeneratedKeys) connection.prepareStatement(sql.query, java.sql.Statement.RETURN_GENERATED_KEYS)$/;"	C
s	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^        val s = data.takeWhile(_ != '\\n')$/;"	C
safeEquals	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def safeEquals(a: String, b: String) = {$/;"	m
safeFileName	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^          val safeFileName = fileName.split('\\\\').takeRight(1).mkString$/;"	C
satisfies	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def satisfies(accept: Lang) = language.equalsIgnoreCase(accept.language) && (accept match {$/;"	m
saveProperties	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^    def saveProperties(file: File, settings: Seq[(String, String)]): Unit =$/;"	m
saveScalaIdePlay2Prefs	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^  def saveScalaIdePlay2Prefs(ref: ProjectRef, structure: Load.BuildStructure, baseDir: File) = {$/;"	m
sb	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^    val sb = new StringBuilder(text.length)$/;"	C
sbtDocHandler	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val sbtDocHandler = {$/;"	C
sbtLoader	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val sbtLoader = this.getClass.getClassLoader.getParent.asInstanceOf[java.net.URLClassLoader]$/;"	C
sbtLoader	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val sbtLoader = this.getClass.getClassLoader$/;"	C
scalaIdePlay2Prefs	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val scalaIdePlay2Prefs = TaskKey[Unit]("scala-ide-play2-prefs")$/;"	C
scalaLib	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^          val scalaLib = classpath.filter(_.data.getAbsolutePath.contains("scala-library.jar")).headOption.map(_.data.getAbsolutePath).getOrElse(throw new RuntimeException("could not find scala-library.jar"))$/;"	C
scalaRoutes	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^    val scalaRoutes = (generatedDir ** "routes_*.scala")$/;"	C
scalar	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def scalar[T](implicit transformer: Column[T]): RowParser[T] = RowParser[T] { row =>$/;"	m
scheme	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      def scheme(uri: URI) = Option(uri.getScheme) getOrElse schemeForPort(uri.getPort)$/;"	m
schemeForPort	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      def schemeForPort(p: Int) = p match {$/;"	m
scope	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^    val scope = ctx.initStandardObjects(global)$/;"	C
scope	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val scope = ctx.initStandardObjects(global)$/;"	C
scope	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^    val scope = ctx.initStandardObjects(global)$/;"	C
secure	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def secure: Boolean = ahcCookie.isSecure$/;"	m
secure	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def secure: Boolean$/;"	m
secure	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def secure = false$/;"	m
sendDownstream	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^  def sendDownstream(subSequence: Int, last: Boolean, message: Object)(implicit ctx: ChannelHandlerContext, oue: OrderedUpstreamMessageEvent) = {$/;"	m
sendDownstream	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^  def sendDownstream(subSequence: Int, last: Boolean, message: Object)$/;"	m
sendFile	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def sendFile(content: java.io.File, inline: Boolean = false, fileName: java.io.File => String = _.getName, onClose: () => Unit = () => ()): SimpleResult = {$/;"	m
sendFile	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def sendFile(status: play.api.mvc.Results.Status, file: java.io.File, inline: Boolean, filename: String) = status.sendFile(file, inline, _ => filename)$/;"	m
sendHandler	framework/src/play/src/main/scala/play/core/server/Server.scala	/^    def sendHandler: Try[(RequestHeader, Handler, Application)] = {$/;"	m
sendResult	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^  def sendResult(result: SimpleResult, closeConnection: Boolean, httpVersion: HttpVersion, startSequence: Int)(implicit ctx: ChannelHandlerContext, oue: OrderedUpstreamMessageEvent): Future[_] = {$/;"	m
sent	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^          val sent = eventuallyResultWithSequence.recoverWith {$/;"	C
sentResponse	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    val sentResponse = result.body |>>> bodyIteratee$/;"	C
sentence	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^    def sentence = (comment | positioned(message)) <~ newLine$/;"	m
separator	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      val separator = if (server.url.contains("?")) "&" else "?"$/;"	C
separator	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^          val separator = "+-%s-+-%s-+-%s-+".format($/;"	C
separatorBitSet	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val separatorBitSet = BitSet(separatorChars.toCharArray.map(_.toInt): _*)$/;"	C
separatorChars	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val separatorChars = "()<>@,;:\\\\\\"\/[]?={} \\t"$/;"	C
separators	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val separators = {$/;"	C
seq	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def seq[A](mapping: Mapping[A]): Mapping[Seq[A]] = RepeatedMapping(mapping).transform(_.toSeq, _.toList)$/;"	m
sequence	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^    def sequence(results: SqlResult[List[A]], rows: Stream[Row]): SqlResult[List[A]] = {$/;"	m
sequence	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def sequence[A](in: Option[Future[A]]): Future[Option[A]] = {$/;"	m
sequence	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def sequence[B, M[_]](in: M[Future[B]])(implicit toTraversableLike: M[Future[B]] => TraversableLike[Future[B], M[Future[B]]], cbf: CanBuildFrom[M[Future[B]], B, M[B]]): Future[M[B]] = {$/;"	m
sequence	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def sequence[A](promises: JIterable[F.Promise[_ <: A]], ec: ExecutionContext): F.Promise[JList[A]] = {$/;"	m
sequenceEither	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def sequenceEither[A, B](e: Either[A, Future[B]]): Future[Either[A, B]] = e.fold(r => Promise.pure(Left(r)), _.map(Right(_))(internalContext))$/;"	m
sequenceEither1	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def sequenceEither1[A, B](e: Either[Future[A], Future[B]]): Future[Either[A, B]] = e.fold(_.map(Left(_))(internalContext), _.map(Right(_))(internalContext))$/;"	m
sequenceOption	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def sequenceOption[A](o: Option[Future[A]]): Future[Option[A]] = o.map(_.map(Some(_))(internalContext)).getOrElse(Promise.pure(None))$/;"	m
serialize	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def serialize(flash: Flash) = flash.data$/;"	m
serialize	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def serialize(session: Session) = session.data$/;"	m
server	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^          val server: Future[OpenIDServer] = discovery.discoverServer(id)$/;"	C
server	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^      val server = new NettyServer($/;"	C
server	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        val server = {$/;"	C
serverUrl	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      val serverUrl: Option[String] = providerRegex.findFirstIn(response.body)$/;"	C
session	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def session(of: Future[SimpleResult])(implicit timeout: Timeout): Session = Session.decodeFromCookie(cookies(of).get(Session.COOKIE_NAME))$/;"	m
set	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    def set(s: java.sql.PreparedStatement, index: Int, aValue: Option[A]): Unit = {$/;"	m
set	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    def set(s: java.sql.PreparedStatement, index: Int, aValue: Pk[A]): Unit =$/;"	m
set	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    def set(s: java.sql.PreparedStatement, index: Int, aValue: T): Unit = setAny(index, aValue, s)$/;"	m
set	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    def set(s: java.sql.PreparedStatement, index: Int, aValue: java.util.Date): Unit = s.setTimestamp(index, new java.sql.Timestamp(aValue.getTime()))$/;"	m
set	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def set(s: java.sql.PreparedStatement, index: Int) = statementSetter.set(s, index, aValue)$/;"	m
setAndReturnLastModified	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^    def setAndReturnLastModified(resource: java.net.URL): Option[String] = {$/;"	m
setHeaders	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def setHeaders(hdrs: Map[String, Seq[String]]) = {$/;"	m
setLevel	framework/src/play/src/main/scala/play/api/Application.scala	/^    val setLevel = (level: String) => level match {$/;"	C
setPrefix	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^      def setPrefix(prefix: String) {$/;"	m
setPrefix	framework/src/play/src/main/scala/play/core/router/Router.scala	/^    def setPrefix(prefix: String)$/;"	m
setQueryString	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def setQueryString(queryString: Map[String, Seq[String]]) = {$/;"	m
settingsDir	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^    val settingsDir = new File(".settings")$/;"	C
severity	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                def severity = xsbti.Severity.Error$/;"	m
severity	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^            def severity = problem.severity$/;"	m
shCommand	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val shCommand = Command.args("sh", "<shell command>") { (state: State, args: Seq[String]) =>$/;"	C
sha1	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^  def sha1(bytes: Array[Byte]): String = {$/;"	m
sha1	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^  def sha1(text: String): String = sha1(text.getBytes)$/;"	m
shake	framework/src/play/src/main/scala/play/core/server/websocket/WebSocketHandshake.scala	/^  def shake(ctx: ChannelHandlerContext, req: HttpRequest): Unit = {$/;"	m
shaker	framework/src/play/src/main/scala/play/core/server/websocket/WebSocketHandshake.scala	/^    val shaker = factory.newHandshaker(req)$/;"	C
shim	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^      val shim = if (!requireJsShim.isEmpty) { """mainConfigFile: """" + jsFolder + """\/""" + requireJsShim + """", """ } else { "" };$/;"	C
shutdown	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def shutdown() {$/;"	m
sign	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def sign(message: String): String = {$/;"	m
sign	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def sign(message: String, key: Array[Byte]): String = {$/;"	m
sign	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def sign(calc: SignatureCalculator): WSRequestHolder = this.copy(calc = Some(calc))$/;"	m
sign	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def sign(request: WS.WSRequest)$/;"	m
signToken	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^  def signToken(token: String): String = {$/;"	m
simpleCheck	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val simpleCheck = simpleCompilerOptions.contains("rjs")$/;"	C
simpleQuotes	framework/src/anorm/src/main/scala/anorm/SqlStatementParser.scala	/^  def simpleQuotes = ("'" + """([^'\\p{Cntrl}\\\\]|\\\\[\\\\\/bfnrt]|\\\\u[a-fA-F0-9]{4})*""" + "'").r$/;"	m
simpleSeq	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      val simpleSeq = data.map({ case (k, v) => (k, v.headOption.getOrElse("")) })$/;"	C
single	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def single()(implicit connection: java.sql.Connection): T = as(ResultSetParser.single(defaultParser))$/;"	m
single	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def single[A](rowParser: RowParser[A])(implicit connection: java.sql.Connection): A = as(ResultSetParser.single(rowParser))$/;"	m
single	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def single = ResultSetParser.single(parent)$/;"	m
single	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def single[A](p: RowParser[A]): ResultSetParser[A] = ResultSetParser {$/;"	m
single	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def single[A1](a1: (String, Mapping[A1])): Mapping[(A1)] = mapping(a1)((a1: A1) => (a1))((t: (A1)) => Some(t))$/;"	m
singleOpt	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def singleOpt()(implicit connection: java.sql.Connection): Option[T] = as(ResultSetParser.singleOpt(defaultParser))$/;"	m
singleOpt	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def singleOpt[A](rowParser: RowParser[A])(implicit connection: java.sql.Connection): Option[A] = as(ResultSetParser.singleOpt(rowParser))$/;"	m
singleOpt	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def singleOpt = ResultSetParser.singleOpt(parent)$/;"	m
singleOpt	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def singleOpt[A](p: RowParser[A]): ResultSetParser[Option[A]] = ResultSetParser {$/;"	m
size	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^  def size: Long = {$/;"	m
size	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^          def size = rawBuffer.size$/;"	m
skeySpec	framework/src/play/src/main/scala/play/api/libs/Crypto.scala	/^    val skeySpec = new SecretKeySpec(raw, "AES")$/;"	C
socketIn	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^      val socketIn = new play.mvc.WebSocket.In[A]$/;"	C
socketOut	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^      val socketOut = new play.mvc.WebSocket.Out[A] {$/;"	C
socketOut	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^  def socketOut[A](ctx: ChannelHandlerContext)(frameFormatter: play.api.mvc.WebSocket.FrameFormatter[A]): Iteratee[A, Unit] = {$/;"	m
source	framework/src/play/src/main/scala/play/api/Application.scala	/^        val source = sources.flatMap(_.sourceFor(e))$/;"	C
sourceFile	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^          val sourceFile = xsbti.Maybe.just(generatedSource.source.get)$/;"	C
sourceFile	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^          val sourceFile = xsbti.Maybe.just(new File(generatedSource.source.get.path))$/;"	C
sourceFile	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                  def sourceFile = xsbti.Maybe.just(file(error._1))$/;"	m
sourceFor	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def sourceFor(e: Throwable): Option[(File, Option[Int])] = {$/;"	m
sourceName	framework/src/play/src/main/scala/play/api/Application.scala	/^          def sourceName = source.map(_._1.getAbsolutePath).orNull$/;"	m
sourceName	framework/src/play/src/main/scala/play/api/Configuration.scala	/^      def sourceName = Option(origin.filename).orNull$/;"	m
sourceName	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^            def sourceName = messageSourceName$/;"	m
sourceName	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def sourceName = problem.position.sourceFile.map(_.getAbsolutePath).orNull$/;"	m
sourceName	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def sourceName = source.getAbsolutePath$/;"	m
sourceName	framework/src/sbt-plugin/src/main/scala/PlayExceptions.scala	/^    def sourceName = source.map(_.getAbsolutePath).orNull$/;"	m
sourceName	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    def sourceName = jsFile.getAbsolutePath$/;"	m
sourceOf	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^                def sourceOf(className: String, line: Option[Int]) = {$/;"	m
sourceOf	framework/src/play/src/main/scala/play/core/system/ApplicationProvider.scala	/^  def sourceOf(className: String, line: Option[Int] = None): Option[(File, Option[Int])]$/;"	m
sourcePath	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^          val sourcePath = xsbti.Maybe.just(sourceFile.get.getCanonicalPath)$/;"	C
sourcePath	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^                  def sourcePath = xsbti.Maybe.just(error._1)$/;"	m
sources	framework/src/play/src/main/scala/play/api/Application.scala	/^  def sources: Option[SourceMapper]$/;"	m
sourcesFinder	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^          val sourcesFinder = PathFinder { watched watchPaths s }$/;"	C
spaces	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^        val spaces = (line: Seq[Char]).take(pos).map {$/;"	C
splitLoop	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    def splitLoop(start: Int): Unit = if (start < s.length) {$/;"	m
splitted	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^          val splitted = data.split("-", 2)$/;"	C
sql	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def sql(inSql: String): SqlQuery = {$/;"	m
sqlDate	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def sqlDate(pattern: String, timeZone: java.util.TimeZone = java.util.TimeZone.getDefault): Mapping[java.sql.Date] = of[java.sql.Date] as sqlDateFormat(pattern, timeZone)$/;"	m
sqlDate	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val sqlDate: Mapping[java.sql.Date] = of[java.sql.Date]$/;"	C
sqlDateFormat	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^  def sqlDateFormat(pattern: String, timeZone: TimeZone = TimeZone.getDefault): Formatter[java.sql.Date] = new Formatter[java.sql.Date] {$/;"	m
src	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val src = inAllDependencies(ref, sourceDirectories in Compile, SbtProject structure state).foldLeft(Seq.empty[File])(_ ++ _)$/;"	C
sslContext	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^        val sslContext = SSLContext.getInstance("TLS")$/;"	C
sslEngine	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^          val sslEngine = ctxt.createSSLEngine$/;"	C
start	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def start() {$/;"	m
start	framework/src/play/src/main/scala/play/api/Play.scala	/^  def start(app: Application) {$/;"	m
start	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^              val start = System.currentTimeMillis$/;"	C
start	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^    val start = System.currentTimeMillis$/;"	C
statement	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val statement = getFilledStatement(connection, getGeneratedKeys)$/;"	C
statement	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^    val statement = if (getGeneratedKeys) connection.prepareStatement(sql.query, java.sql.Statement.RETURN_GENERATED_KEYS)$/;"	C
status	framework/src/console/src/main/scala/Console.scala	/^    val status = Console.run(app.arguments)$/;"	C
status	framework/src/console/src/main/scala/Console.scala	/^    val status = run(args)$/;"	C
status	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def status(of: Future[SimpleResult])(implicit timeout: Timeout): Int = Await.result(of, timeout.duration).header.status$/;"	m
status	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def status: Int = ahcResponse.getStatusCode()$/;"	m
statusCode	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^      var statusCode = 0$/;"	l
statusText	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def statusText: String = ahcResponse.getStatusText()$/;"	m
step	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    def step(subsequence: Int)(in: Input[Array[Byte]]): Iteratee[Array[Byte], ChannelStatus] = in match {$/;"	m
step	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^    def step(future: Option[ChannelFuture])(input: Input[A]): Iteratee[A, Unit] =$/;"	m
stop	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def stop() {$/;"	m
stop	framework/src/play/src/main/scala/play/api/Play.scala	/^  def stop() {$/;"	m
stop	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^  def stop(): Unit$/;"	m
stop	framework/src/play/src/main/scala/play/core/server/Server.scala	/^  def stop() {$/;"	m
stop	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^    def stop(): Elem = {$/;"	m
str	framework/src/anorm/src/main/scala/anorm/SqlParser.scala	/^  def str(columnName: String): RowParser[String] = get[String](columnName)(implicitly[anorm.Column[String]])$/;"	m
stream	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^            val stream = url.openStream()$/;"	C
stream	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def stream[C](content: Enumerator[C])(implicit writeable: Writeable[C]): SimpleResult = chunked(content)$/;"	m
stream	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^    def stream[C](content: Iteratee[C, Unit] => Unit)(implicit writeable: Writeable[C]): ChunkedResult[C] = {$/;"	m
stringWriter	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^        val stringWriter = new StringWriter()$/;"	C
subDelims	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    val subDelims = Seq('!', '$', '&', '\\'', '(', ')', '*', '+', ',', ';', '=')$/;"	C
subKeys	framework/src/play/src/main/scala/play/api/Configuration.scala	/^  def subKeys: Set[String] = underlying.root().keySet().asScala.toSet$/;"	m
submit	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def submit(selector: String, fields: (String, String)*): Fluent = {$/;"	m
success	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def success(message: => String) = log(Level.Info, message)$/;"	m
system	framework/src/play/src/main/scala/play/api/libs/concurrent/Akka.scala	/^    val system = ActorSystem("application", app.configuration.underlying, app.classloader)$/;"	C
system	framework/src/play/src/main/scala/play/api/libs/concurrent/Akka.scala	/^  def system(implicit app: Application) = {$/;"	m
system	framework/src/play/src/main/scala/play/core/system/Invoker.scala	/^  val system: ActorSystem = Play.maybeApplication.map { app =>$/;"	C
t	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^        val t = new Transformer(cp, "debug=-1")$/;"	C
tagRequest	framework/src/play/src/main/scala/play/api/mvc/Action.scala	/^  def tagRequest(request: RequestHeader): RequestHeader$/;"	m
tagRequest	framework/src/play/src/main/scala/play/core/router/Router.scala	/^          def tagRequest(rh: RequestHeader) = doTagRequest(rh, handler)$/;"	m
taggedResponse	framework/src/play/src/main/scala/play/api/controllers/Assets.scala	/^        val taggedResponse = etagFor(url).map(etag => r.withHeaders(ETAG -> etag)).getOrElse(r)$/;"	C
taggedRh	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^    val taggedRh = handler.map({$/;"	C
tags	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^        val tags = _tags$/;"	C
tags	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def tags = rh.tags$/;"	m
tags	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def tags = self.tags$/;"	m
tags	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def tags = request.tags$/;"	m
tags	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def tags: Map[String, String]$/;"	m
tags	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            val tags = Map.empty[String,String]$/;"	C
takeUpToBoundary	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^            val takeUpToBoundary = Enumeratee.takeWhile[MatchInfo[Array[Byte]]](!_.isMatch)$/;"	C
takeUpToOneChunk	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    def takeUpToOneChunk(chunk: Option[Array[Byte]]): Iteratee[Array[Byte], Either[Array[Byte], Option[Array[Byte]]]] = Cont {$/;"	m
targetDir	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^  val targetDir = new File(outputDir + "\/test-reports\/")$/;"	C
targetDirectory	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^          val targetDirectory = extracted.get(target)$/;"	C
tempFile	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^            val tempFile = TemporaryFile("multipartBody", "asTemporaryFile")$/;"	C
tempFile	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^        val tempFile = TemporaryFile("requestBody", "asTemporaryFile")$/;"	C
template	framework/src/console/src/main/scala/Console.scala	/^      val template: (String, String) = if (args.length == 3 && args(1) == "--g8") (args.last, defaultName)$/;"	C
templateClasses	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val templateClasses = (srcManaged ** "*.template.scala").get flatMap { sourceFile =>$/;"	C
templateExt	framework/src/sbt-plugin/src/main/scala/PlaySourceGenerators.scala	/^    val templateExt: PartialFunction[File, (File, String, String)] = {$/;"	C
templatePositionMapper	framework/src/sbt-plugin/src/main/scala/PlayPositionMapper.scala	/^  val templatePositionMapper: Position => Option[Position] = position => {$/;"	C
templateToUse	framework/src/console/src/main/scala/Console.scala	/^        val templateToUse = Option(consoleReader.readLine(Colors.cyan("> "))).map(_.trim).getOrElse("") match {$/;"	C
templatesImport	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val templatesImport = SettingKey[Seq[String]]("play-templates-imports")$/;"	C
templatesTypes	framework/src/sbt-plugin/src/main/scala/PlayKeys.scala	/^  val templatesTypes = SettingKey[Map[String, String]]("play-templates-formats")$/;"	C
temporaryFile	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def temporaryFile: BodyParser[TemporaryFile] = BodyParser("temporaryFile") { request =>$/;"	m
terminal	framework/src/sbt-plugin/src/main/scala/play/PlayInteractionMode.scala	/^      val terminal = consoleReader.getTerminal$/;"	C
test	framework/src/sbt-plugin/src/main/scala/test/SbtOptionalThrowableExtractor.scala	/^package test$/;"	p
testNameFromTestEvent	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^  def testNameFromTestEvent(event: TEvent) = {$/;"	m
testResultReporter	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val testResultReporter = TaskKey[List[String]]("test-result-reporter")$/;"	C
testResultReporterReset	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val testResultReporterReset = TaskKey[Unit]("test-result-reporter-reset")$/;"	C
testResultReporterResetTask	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val testResultReporterResetTask = (state, thisProjectRef) map { (s, r) =>$/;"	C
testResultReporterTask	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^  val testResultReporterTask = (state, thisProjectRef) map { (s, r) =>$/;"	C
testSuite	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^  var testSuite: TestSuite = null$/;"	l
text	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def text(minLength: Int = 0, maxLength: Int = Int.MaxValue): Mapping[String] = (minLength, maxLength) match {$/;"	m
text	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  val text: Mapping[String] = of[String]$/;"	C
text	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val text = not(ctl) ~> any$/;"	C
text	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def text(maxLength: Int): BodyParser[String] = when($/;"	m
text	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def text: BodyParser[String] = text(DEFAULT_MAX_TEXT_LENGTH)$/;"	m
text	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def text(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.text(Integer.MAX_VALUE)).map {$/;"	m
textFrame	framework/src/play/src/main/scala/play/core/server/websocket/Frame.scala	/^  val textFrame = FrameFormatter[String]($/;"	C
thread	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^      val thread = Thread.currentThread()$/;"	C
thread	framework/src/play/src/main/scala/play/core/system/Execution.scala	/^        val thread = new NamedFjpThread(fjp)$/;"	C
thread	framework/src/play/src/main/scala/play/core/system/NamedThreadFactory.scala	/^    val thread = backingThreadFactory.newThread(r)$/;"	C
thread	framework/src/play/src/main/scala/play/utils/Threads.scala	/^    val thread = Thread.currentThread$/;"	C
threadNo	framework/src/play/src/main/scala/play/core/system/Execution.scala	/^      val threadNo = new AtomicInteger()$/;"	C
threadNo	framework/src/play/src/main/scala/play/core/system/NamedThreadFactory.scala	/^  val threadNo = new AtomicInteger()$/;"	C
throwing	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def throwing(t: Throwable): Unit = p.failure(t)$/;"	m
throwing	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def throwing(t: Throwable): Unit$/;"	m
throwing	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def throwing[A](t: Throwable): F.Promise[A] = F.Promise.wrap(Future.failed(t))$/;"	m
tidy	framework/src/sbt-plugin/src/main/scala/test/PlayTestListener.scala	/^  def tidy(s: String) = s$/;"	m
timeout	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def timeout: Future[Nothing] = {$/;"	m
timeout	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def timeout[A](message: => A, duration: Long, unit: TimeUnit = TimeUnit.MILLISECONDS)(implicit ec: ExecutionContext): Future[A] = {$/;"	m
timeout	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def timeout[A](message: => A, duration: scala.concurrent.duration.Duration)(implicit ec: ExecutionContext): Future[A] = {$/;"	m
timeout	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def timeout[A](delay: Long, unit: TimeUnit): F.Promise[A] =$/;"	m
timeout	framework/src/play/src/main/scala/play/core/j/FPromiseHelper.scala	/^  def timeout[A](message: A, delay: Long, unit: TimeUnit): F.Promise[A] =$/;"	m
timers	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^                var timers = [],$/;"	l
timestampFile	framework/src/sbt-plugin/src/main/scala/PlayCommands.scala	/^    val timestampFile = cacheDir \/ "play_instrumentation"$/;"	C
tl	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^        val tl = t.toLowerCase(Locale.ENGLISH)$/;"	C
tm	framework/src/play/src/main/scala/play/core/server/NettyServer.scala	/^        val tm = Option(System.getProperty("https.trustStore")).map {$/;"	C
to	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def to(value: Boolean) = value.toString$/;"	m
to	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def to(value: Int) = value.toString$/;"	m
to	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def to(value: Long) = value.toString$/;"	m
to	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def to(value: Option[T]) = value.map(jsl.to(_)).getOrElse("null")$/;"	m
to	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def to(value: String) = "\\"" + value + "\\""$/;"	m
to	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def to(value: java.lang.Integer) = value.toString$/;"	m
to	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  def to(value: A): String$/;"	m
toCookie	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def toCookie = Cookie(name, "", Some(-86400), path, domain, secure)$/;"	m
toEnumeratee	framework/src/play/src/main/scala/play/api/http/Writeable.scala	/^  def toEnumeratee[E <: A]: Enumeratee[E, Array[Byte]] = Enumeratee.map[E](transform)$/;"	m
toHex	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^  def toHex(array: Array[Byte]): Array[Char] = {$/;"	m
toHexString	framework/src/play/src/main/scala/play/api/libs/Codecs.scala	/^  def toHexString(array: Array[Byte]): String = {$/;"	m
toHtmlArgs	framework/src/play/src/main/scala/play/api/templates/Templates.scala	/^  def toHtmlArgs(args: Map[Symbol, Any]) = Html(args.map({$/;"	m
toLocale	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def toLocale: java.util.Locale = {$/;"	m
toOption	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def toOption: Option[ID] = this match {$/;"	m
toOptionLoggingError	framework/src/anorm/src/main/scala/anorm/Utils.scala	/^  def toOptionLoggingError(): Option[A] = {$/;"	m
toPartialFunction	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^  def toPartialFunction[A, B](f: F.Function[A, B]): PartialFunction[A, B] = new PartialFunction[A, B] {$/;"	m
toSimpleMap	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def toSimpleMap: Map[String, String] = {$/;"	m
todo	framework/src/play/src/main/scala/play/api/controllers/Default.scala	/^  def todo: Action[AnyContent] = TODO$/;"	m
token	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val token = rep1(not(separators | ctl) ~> any) ^^ charSeqToString$/;"	C
tolerant	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def tolerant[T](p: Parser[T], bad: Parser[Option[T]]) = p.map(Some.apply) | bad$/;"	m
tolerantFormUrlEncoded	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def tolerantFormUrlEncoded(maxLength: Int): BodyParser[Map[String, Seq[String]]] =$/;"	m
tolerantFormUrlEncoded	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def tolerantFormUrlEncoded: BodyParser[Map[String, Seq[String]]] = tolerantFormUrlEncoded(DEFAULT_MAX_TEXT_LENGTH)$/;"	m
tolerantJson	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def tolerantJson(maxLength: Int): BodyParser[JsValue] =$/;"	m
tolerantJson	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def tolerantJson: BodyParser[JsValue] = tolerantJson(DEFAULT_MAX_TEXT_LENGTH)$/;"	m
tolerantJson	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def tolerantJson(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.tolerantJson(Integer.MAX_VALUE)).map {$/;"	m
tolerantMediaRange	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val tolerantMediaRange = tolerant(mediaRange <~ guard(end | ','), badMediaType)$/;"	C
tolerantParameter	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    val tolerantParameter = tolerant(parameter <~ guard(end | ';' | ','), badParameter)$/;"	C
tolerantText	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def tolerantText(maxLength: Int): BodyParser[String] = BodyParser("text, maxLength=" + maxLength) { request =>$/;"	m
tolerantText	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def tolerantText: BodyParser[String] = tolerantText(DEFAULT_MAX_TEXT_LENGTH)$/;"	m
tolerantText	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def tolerantText(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.tolerantText(Integer.MAX_VALUE)).map {$/;"	m
tolerantXml	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def tolerantXml(maxLength: Int): BodyParser[NodeSeq] =$/;"	m
tolerantXml	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def tolerantXml: BodyParser[NodeSeq] = tolerantXml(DEFAULT_MAX_TEXT_LENGTH)$/;"	m
tolerantXml	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def tolerantXml(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.tolerantXml(Integer.MAX_VALUE)).map {$/;"	m
topType	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val topType = className.split('$').head$/;"	C
totalCount	framework/src/sbt-plugin/src/main/scala/test/PlayTestListener.scala	/^    val totalCount = failures + errors + skipped + passed$/;"	C
trace	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def trace(message: => String) {$/;"	m
trace	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def trace(message: => String, error: => Throwable) {$/;"	m
trace	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def trace(t: => Throwable) = System.out.synchronized {$/;"	m
trace	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^    val trace = event.throwable match {$/;"	C
traceLevel	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^    val traceLevel = getTrace$/;"	C
transfer	framework/src/sbt-plugin/src/main/scala/PlayJvm.scala	/^  def transfer(in: InputStream, out: OutputStream): Unit = {$/;"	m
transform	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def transform[B](f1: T => B, f2: B => T): Mapping[B] = WrappedMapping(this, f1, f2)$/;"	m
transform	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  def transform[B](toB: A => B, toA: B => A) = new PathBindable[B] {$/;"	m
transform	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  def transform[B](toB: A => B, toA: B => A) = new QueryStringBindable[B] {$/;"	m
transform	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def transform(f: PlainResult => Result)(implicit ec: ExecutionContext): AsyncResult = {$/;"	m
transform	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^    def transform[B](fba: B => A, fab: A => B): FrameFormatter[B]$/;"	m
transform	framework/src/play/src/main/scala/play/core/server/websocket/Frame.scala	/^  def transform[B](fba: B => A, fab: A => B): FrameFormatter[B] = {$/;"	m
translate	framework/src/play/src/main/scala/play/api/i18n/Messages.scala	/^  def translate(key: String, args: Seq[Any])(implicit lang: Lang): Option[String] = {$/;"	m
trimmed	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^    val trimmed = openID.trim$/;"	C
tryToCreateRequest	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        def tryToCreateRequest = {$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14]), a15: (String, Mapping[A15]), a16: (String, Mapping[A16]), a17: (String, Mapping[A17]), a18: (String, Mapping[A18])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9, a10: A10, a11: A11, a12: A12, a13: A13, a14: A14, a15: A15, a16: A16, a17: A17, a18: A18) => (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14]), a15: (String, Mapping[A15]), a16: (String, Mapping[A16]), a17: (String, Mapping[A17])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9, a10: A10, a11: A11, a12: A12, a13: A13, a14: A14, a15: A15, a16: A16, a17: A17) => (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14]), a15: (String, Mapping[A15]), a16: (String, Mapping[A16])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9, a10: A10, a11: A11, a12: A12, a13: A13, a14: A14, a15: A15, a16: A16) => (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14]), a15: (String, Mapping[A15])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9, a10: A10, a11: A11, a12: A12, a13: A13, a14: A14, a15: A15) => (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13]), a14: (String, Mapping[A14])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9, a10: A10, a11: A11, a12: A12, a13: A13, a14: A14) => (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12]), a13: (String, Mapping[A13])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9, a10: A10, a11: A11, a12: A12, a13: A13) => (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11]), a12: (String, Mapping[A12])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9, a10: A10, a11: A11, a12: A12) => (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10]), a11: (String, Mapping[A11])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9, a10: A10, a11: A11) => (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9]), a10: (String, Mapping[A10])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9, a10: A10) => (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8]), a9: (String, Mapping[A9])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8, A9)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8, a9)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9) => (a1, a2, a3, a4, a5, a6, a7, a8, a9))((t: (A1, A2, A3, A4, A5, A6, A7, A8, A9)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7, A8](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7]), a8: (String, Mapping[A8])): Mapping[(A1, A2, A3, A4, A5, A6, A7, A8)] = mapping(a1, a2, a3, a4, a5, a6, a7, a8)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8) => (a1, a2, a3, a4, a5, a6, a7, a8))((t: (A1, A2, A3, A4, A5, A6, A7, A8)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6, A7](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6]), a7: (String, Mapping[A7])): Mapping[(A1, A2, A3, A4, A5, A6, A7)] = mapping(a1, a2, a3, a4, a5, a6, a7)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7) => (a1, a2, a3, a4, a5, a6, a7))((t: (A1, A2, A3, A4, A5, A6, A7)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5, A6](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5]), a6: (String, Mapping[A6])): Mapping[(A1, A2, A3, A4, A5, A6)] = mapping(a1, a2, a3, a4, a5, a6)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6) => (a1, a2, a3, a4, a5, a6))((t: (A1, A2, A3, A4, A5, A6)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4, A5](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4]), a5: (String, Mapping[A5])): Mapping[(A1, A2, A3, A4, A5)] = mapping(a1, a2, a3, a4, a5)((a1: A1, a2: A2, a3: A3, a4: A4, a5: A5) => (a1, a2, a3, a4, a5))((t: (A1, A2, A3, A4, A5)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3, A4](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3]), a4: (String, Mapping[A4])): Mapping[(A1, A2, A3, A4)] = mapping(a1, a2, a3, a4)((a1: A1, a2: A2, a3: A3, a4: A4) => (a1, a2, a3, a4))((t: (A1, A2, A3, A4)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2, A3](a1: (String, Mapping[A1]), a2: (String, Mapping[A2]), a3: (String, Mapping[A3])): Mapping[(A1, A2, A3)] = mapping(a1, a2, a3)((a1: A1, a2: A2, a3: A3) => (a1, a2, a3))((t: (A1, A2, A3)) => Some(t))$/;"	m
tuple	framework/src/play/src/main/scala/play/api/data/Forms.scala	/^  def tuple[A1, A2](a1: (String, Mapping[A1]), a2: (String, Mapping[A2])): Mapping[(A1, A2)] = mapping(a1, a2)((a1: A1, a2: A2) => (a1, a2))((t: (A1, A2)) => Some(t))$/;"	m
types	framework/src/play/src/main/scala/play/api/libs/MimeTypes.scala	/^  def types: Map[String, String] = defaultTypes ++ applicationTypes$/;"	m
unapply	framework/src/play/src/main/scala/play/api/http/MediaRange.scala	/^    def unapply(mediaType: String): Option[MediaType] = apply(mediaType)$/;"	m
unapply	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^        def unapply(headers: Map[String, String]): Option[(String, String, Option[String])] = {$/;"	m
unapply	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^        def unapply(headers: Map[String, String]): Option[String] = {$/;"	m
unapply	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^    def unapply(request: RequestHeader): Option[(RequestHeader, RequestHeader)] = Some((request, request))$/;"	m
unapply	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^  def unapply(mediaRange: play.api.http.MediaRange): Boolean = mediaRange.accepts(mimeType)$/;"	m
unapply	framework/src/play/src/main/scala/play/api/mvc/RequestExtractors.scala	/^  def unapply(request: RequestHeader): Boolean = request.accepts(mimeType)$/;"	m
unapply	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def unapply(result: Result): Option[(Int, Map[String, String])] = result match {$/;"	m
unapply	framework/src/play/src/main/scala/play/core/router/Router.scala	/^      def unapply(request: RequestHeader): Option[Handler] = {$/;"	m
unapply	framework/src/play/src/main/scala/play/core/router/Router.scala	/^      def unapply(request: RequestHeader): Option[RouteParams] = {$/;"	m
unapply	framework/src/play/src/main/scala/play/core/router/Router.scala	/^      def unapply(request: RequestHeader): Option[RouteParams]$/;"	m
unapply	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    def unapply(result: SimpleResult): Boolean = result.connection == HttpConnection.Close$/;"	m
unapply	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    def unapply(result: SimpleResult): Boolean = result.header.headers.contains(TRANSFER_ENCODING)$/;"	m
unapply	framework/src/play/src/main/scala/play/core/server/netty/NettyResultStreamer.scala	/^    def unapply(result: SimpleResult): Boolean = {$/;"	m
unapply	framework/src/sbt-plugin/src/main/scala/test/SbtOptionalThrowableExtractor.scala	/^  def unapply(ot: OptionalThrowable): Option[Throwable] = {$/;"	m
unapplySeq	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def unapplySeq(row: Row): Option[List[Any]] = Some(row.asList)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def unbind(value: B): (Map[String, String], Seq[FormError]) = {$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def unbind(value: List[T]): (Map[String, String], Seq[FormError]) = {$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def unbind(value: Option[T]): (Map[String, String], Seq[FormError]) = {$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def unbind(value: R) = {$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def unbind(value: T): (Map[String, String], Seq[FormError]) = {$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def unbind(value: T): (Map[String, String], Seq[FormError])$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: A) = Map.empty$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: BigDecimal) = Map(key -> precision.map({ p => value.setScale(p._2) }).getOrElse(value).toString)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: Boolean) = Map(key -> value.toString)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: Date) = Map(key -> formatter.print(new org.joda.time.DateTime(value).withZone(jodaTimeZone)))$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: Double) = Map(key -> value.toString)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: Float) = Map(key -> value.toString)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: Int) = Map(key -> value.toString)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: LocalDate) = Map(key -> value.toString(pattern))$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: Long) = Map(key -> value.toString)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: String) = Map(key -> value)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: java.sql.Date) = dateFormatter.unbind(key, value)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^    def unbind(key: String, value: org.joda.time.DateTime) = Map(key -> value.withZone(timeZone).toString(pattern))$/;"	m
unbind	framework/src/play/src/main/scala/play/api/data/format/Format.scala	/^  def unbind(key: String, value: T): Map[String, String]$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def unbind(key: String, value: A) = key + "=" + serialize(value)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def unbind(key: String, value: A): String = serialize(value)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def unbind(key: String, value: B): String = self.unbind(key, toA(value))$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def unbind(key: String, value: Option[T]) = value.map(implicitly[QueryStringBindable[T]].unbind(key, _)).getOrElse("")$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def unbind(key: String, value: String) = key + "=" + (URLEncoder.encode(value, "utf-8"))$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def unbind(key: String, value: T) = {$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def unbind(key: String, value: play.libs.F.Option[T]) = {$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def unbind(key: String, values: List[T]) = unbindList(key, values)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^    def unbind(key: String, values: java.util.List[T]) = unbindList(key, values.asScala)$/;"	m
unbind	framework/src/play/src/main/scala/play/api/mvc/Binders.scala	/^  def unbind(key: String, value: A): String$/;"	m
unbind	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def unbind(value: R): (Map[String, String], Seq[FormError]) = {$/;"	m
underlying	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def underlying = ahcCookie$/;"	m
underlying	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def underlying: AnyRef$/;"	m
unflatten	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def unflatten: Future[SimpleResult] = result.flatMap {$/;"	m
unfold	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def unfold[T, R](init: T)(f: T => Option[(R, T)]): Stream[R] = f(init) match {$/;"	m
unfold1	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def unfold1[T, R](init: T)(f: T => Option[(R, T)]): (Stream[R], T) = f(init) match {$/;"	m
unfoldLeft	framework/src/play/src/main/scala/play/api/libs/Collections.scala	/^  def unfoldLeft[A, B](seed: B)(f: B => Option[(B, A)]): Seq[A] = {$/;"	m
unprepared	framework/src/play/src/main/scala/play/core/j/HttpExecutionContext.scala	/^  def unprepared(delegate: ExecutionContext) = new ExecutionContext {$/;"	m
unreserved	framework/src/play/src/main/scala/play/utils/UriEncoding.scala	/^    val unreserved = alphaDigit ++ Seq('-', '.', '_', '~')$/;"	C
unsafeApplication	framework/src/play/src/main/scala/play/api/Play.scala	/^  def unsafeApplication: Application = _currentApp$/;"	m
untaggedRequestHeader	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^          val untaggedRequestHeader = new RequestHeader {$/;"	C
updateAnalysis	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      def updateAnalysis(newAnalysis: sbt.inc.Analysis) = {$/;"	m
updated	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val updated = if (newProducts != currentProducts || reloadNextTime) {$/;"	C
uri	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^      val uri = (if (url.matches("^(http|HTTP)(s|S)?:.*")) new URI(url) else new URI("http:\/\/" + url)).normalize()$/;"	C
uri	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^        val uri = _uri$/;"	C
uri	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def uri = rh.uri$/;"	m
uri	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def uri = self.uri$/;"	m
uri	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def uri = request.uri$/;"	m
uri	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def uri: String$/;"	m
uri	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def uri = req.uri$/;"	m
uri	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            def uri = nettyHttpRequest.getUri$/;"	m
url	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def url: String = _url$/;"	m
url	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def url(url: String): WSRequestHolder = WSRequestHolder(url, Map(), Map(), None, None, None, None, None)$/;"	m
urlEncode	framework/src/play/src/main/scala/views/html/helper/package.scala	/^  def urlEncode(string: String)(implicit codec: play.api.mvc.Codec): String =$/;"	m
urlFormEncoded	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def urlFormEncoded(maxLength: Int): BodyParser[Map[String, Seq[String]]] = when($/;"	m
urlFormEncoded	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def urlFormEncoded: BodyParser[Map[String, Seq[String]]] = urlFormEncoded(DEFAULT_MAX_TEXT_LENGTH)$/;"	m
urldecode	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def urldecode(data: String) = {$/;"	m
urls	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val urls = Path.toURLs(classpath.files)$/;"	C
urls	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^        def urls(cp: Classpath): Array[URL] = cp.map(_.data.toURI.toURL).toArray$/;"	m
username	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def username = None$/;"	m
username	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            def username = None$/;"	m
using	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def using[U](p: RowParser[U]): SimpleSql[U] = SimpleSql(sql, params, p)$/;"	m
using	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def using[A](f: RequestHeader => BodyParser[A]) = BodyParser { request =>$/;"	m
using	framework/src/play/src/main/scala/play/api/mvc/WebSocket.scala	/^  def using[A](f: RequestHeader => (Iteratee[A, _], Enumerator[A]))(implicit frameFormatter: FrameFormatter[A]): WebSocket[A] = {$/;"	m
using	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^    def using[T](t: T) = t$/;"	m
validFrom	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^    val validFrom = new Date()$/;"	C
validTo	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^    val validTo = new Date(validFrom.getTime + 50l * 365l * 24l * 60l * 60l * 1000l)$/;"	C
validValues	framework/src/play/src/main/scala/play/api/Application.scala	/^    val validValues = Set("TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF", "INHERITED")$/;"	C
validity	framework/src/play/src/main/scala/play/core/server/netty/FakeKeyStore.scala	/^    val validity = new CertificateValidity(validFrom, validTo)$/;"	C
value	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def value: Option[String] = noneIfEmpty(ahcCookie.getValue)$/;"	m
value	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def value: Option[String]$/;"	m
value	framework/src/play/src/main/scala/play/core/parsers/FormUrlEncodedParser.scala	/^        val value = URLDecoder.decode(parts.tail.headOption.getOrElse(""), encoding)$/;"	C
value	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^        val value = imports.mkString("import ", "\\nimport ", "\\n")$/;"	C
value1	framework/src/play/src/main/scala/play/api/libs/concurrent/Promise.scala	/^  def value1 = await$/;"	m
variable	framework/src/anorm/src/main/scala/anorm/SqlStatementParser.scala	/^  def variable = "{" ~> (ident ~ (("." ~> ident)?)) <~ "}" ^^ {$/;"	m
verifiedId	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  def verifiedId(implicit request: Request[_]): Future[UserInfo] = verifiedId(request.queryString)$/;"	m
verifiedId	framework/src/play/src/main/scala/play/api/libs/openid/OpenID.scala	/^  def verifiedId(queryString: java.util.Map[String, Array[String]]): Future[UserInfo] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def verifying(addConstraints: Constraint[List[T]]*): Mapping[List[T]] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def verifying(addConstraints: Constraint[Option[T]]*): Mapping[Option[T]] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def verifying(addConstraints: Constraint[R]*) = {$/;"	m
verifying	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def verifying(addConstraints: Constraint[T]*): Mapping[T] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def verifying(constraint: (T => Boolean)): Mapping[T] = verifying("error.unknown", constraint)$/;"	m
verifying	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def verifying(constraints: Constraint[B]*): Mapping[B] = copy(additionalConstraints = additionalConstraints ++ constraints)$/;"	m
verifying	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def verifying(constraints: Constraint[T]*): Mapping[T]$/;"	m
verifying	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def verifying(error: => String, constraint: (T => Boolean)): Mapping[T] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping10[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping11[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping12[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping13[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping14[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping15[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping16[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping17[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping18[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping2[R, A1, A2] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping3[R, A1, A2, A3] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping4[R, A1, A2, A3, A4] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping5[R, A1, A2, A3, A4, A5] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping6[R, A1, A2, A3, A4, A5, A6] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping7[R, A1, A2, A3, A4, A5, A6, A7] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping8[R, A1, A2, A3, A4, A5, A6, A7, A8] = {$/;"	m
verifying	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def verifying(addConstraints: Constraint[R]*): ObjectMapping9[R, A1, A2, A3, A4, A5, A6, A7, A8, A9] = {$/;"	m
version	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def version: Int = ahcCookie.getVersion$/;"	m
version	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^  def version: Int$/;"	m
version	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^        val version = _version$/;"	C
version	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def version = rh.version$/;"	m
version	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^      def version = self.version$/;"	m
version	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def version = request.version$/;"	m
version	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def version: String$/;"	m
version	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^      def version = req.version$/;"	m
version	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^            def version = nettyVersion.getText$/;"	m
version	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^        val version = classLoaderVersion.incrementAndGet$/;"	C
views	framework/src/play/src/main/scala/views/package.scala	/^package views {$/;"	p
views.html	framework/src/play/src/main/scala/views/defaultpages/package.scala	/^package views.html$/;"	p
views.html	framework/src/play/src/main/scala/views/html/helper/package.scala	/^package views.html$/;"	p
views.html.helper	framework/src/play/src/main/scala/views/helper/Helpers.scala	/^package views.html.helper {$/;"	p
views.html.helper	framework/src/play/src/main/scala/views/helper/twitterBootstrap/package.scala	/^package views.html.helper$/;"	p
views.js	framework/src/play/src/main/scala/views/js/helper/package.scala	/^package views.js$/;"	p
wResult	framework/src/play/src/main/scala/play/core/j/JavaHelpers.scala	/^    val wResult = javaResult.getWrappedSimpleResult.withHeaders(javaContext.response.getHeaders.asScala.toSeq: _*)$/;"	C
wait	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^    val wait = new FluentWait[WebDriver](webDriver).withTimeout(timeout, timeUnit)$/;"	C
waitEOF	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^    def waitEOF() {$/;"	m
waitEOF	framework/src/sbt-plugin/src/main/scala/play/PlayInteractionMode.scala	/^      def waitEOF(): Unit = {$/;"	m
waitForCancel	framework/src/sbt-plugin/src/main/scala/play/PlayInteractionMode.scala	/^  def waitForCancel(): Unit$/;"	m
waitUntil	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def waitUntil[T](block: => T): T = waitUntil(3000, TimeUnit.MILLISECONDS)(block)$/;"	m
waitUntil	framework/src/play-test/src/main/scala/play/api/test/Selenium.scala	/^  def waitUntil[T](timeout: Int, timeUnit: TimeUnit)(block: => T): T = {$/;"	m
warn	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def warn(message: => String) {$/;"	m
warn	framework/src/play/src/main/scala/play/api/Logger.scala	/^  def warn(message: => String, error: => Throwable) {$/;"	m
watchChanges	framework/src/sbt-plugin/src/main/scala/PlayReloader.scala	/^      val watchChanges: Seq[Int] = monitoredDirs.map(f => jnotify.addWatch(f.getAbsolutePath))$/;"	C
watchState	framework/src/sbt-plugin/src/main/scala/PlayRun.scala	/^          val watchState = ws.getOrElse(s get ContinuousState getOrElse WatchState.empty)$/;"	C
webDriver	framework/src/play-test/src/main/scala/play/api/test/Specs.scala	/^    val webDriver: Class[WEBDRIVER] = Helpers.HTMLUNIT,$/;"	C
webSocketURL	framework/src/play/src/main/scala/play/api/mvc/Http.scala	/^    def webSocketURL(secure: Boolean = false)(implicit request: RequestHeader) = {$/;"	m
webSocketWrapper	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^  def webSocketWrapper[A](retrieveWebSocket: => play.mvc.WebSocket[A])(implicit frameFormatter: play.api.mvc.WebSocket.FrameFormatter[A]): WebSocket[A] = WebSocket[A] { request =>$/;"	m
websocketHandshake	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^  def websocketHandshake[A](ctx: ChannelHandlerContext, req: HttpRequest, e: MessageEvent)(frameFormatter: play.api.mvc.WebSocket.FrameFormatter[A]): Enumerator[A] = {$/;"	m
websocketable	framework/src/play/src/main/scala/play/core/server/netty/WebSocketHandler.scala	/^  def websocketable(req: HttpRequest) = new server.WebSocketable {$/;"	m
websocketableRequest	framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala	/^        val websocketableRequest = websocketable(nettyHttpRequest)$/;"	C
when	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def when[A](predicate: RequestHeader => Boolean, parser: BodyParser[A], badResult: RequestHeader => Future[SimpleResult]): BodyParser[A] = {$/;"	m
when	framework/src/templates/src/main/scala/play/api/templates/ScalaTemplate.scala	/^      def when(predicate: => Boolean) = {$/;"	m
white	framework/src/console/src/main/scala/Console.scala	/^  def white(str: String): String = if (isANSISupported) (WHITE + str + RESET) else str$/;"	m
white	framework/src/play/src/main/scala/play/utils/Colors.scala	/^  def white(str: String): String = if (isANSISupported) (WHITE + str + RESET) else str$/;"	m
withAuth	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def withAuth(username: String, password: String, scheme: AuthScheme): WSRequestHolder =$/;"	m
withBody	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withBody[B](body: B): FakeRequest[B] = {$/;"	m
withCharset	framework/src/play/src/main/scala/play/api/http/StandardValues.scala	/^  def withCharset(mimeType: String)(implicit codec: Codec) = mimeType + "; charset=" + codec.charset$/;"	m
withContextClassLoader	framework/src/play/src/main/scala/play/utils/Threads.scala	/^  def withContextClassLoader[T](classloader: ClassLoader)(b: => T): T = {$/;"	m
withCookies	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withCookies(cookies: Cookie*): FakeRequest[A] = {$/;"	m
withCookies	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withCookies(cookies: Cookie*): A$/;"	m
withCookies	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withCookies(cookies: Cookie*): AsyncResult = {$/;"	m
withCookies	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withCookies(cookies: Cookie*): SimpleResult = {$/;"	m
withError	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withError(error: FormError): Form[T] = this.copy(errors = errors :+ error, value = None)$/;"	m
withError	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withError(key: String, message: String, args: Any*): Form[T] = withError(FormError(key, message, args))$/;"	m
withFlash	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withFlash(data: (String, String)*): FakeRequest[A] = {$/;"	m
withFollowRedirects	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def withFollowRedirects(follow: Boolean): WSRequestHolder =$/;"	m
withFormUrlEncodedBody	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withFormUrlEncodedBody(data: (String, String)*): FakeRequest[AnyContentAsFormUrlEncoded] = {$/;"	m
withGlobal	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  val withGlobal: Option[play.api.GlobalSettings] = None,$/;"	C
withGlobalError	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withGlobalError(message: String, args: Any*): Form[T] = withError(FormError("", message, args))$/;"	m
withHeaders	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withHeaders(newHeaders: (String, String)*): FakeRequest[A] = {$/;"	m
withHeaders	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def withHeaders(hdrs: (String, String)*): WSRequestHolder = {$/;"	m
withHeaders	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withHeaders(headers: (String, String)*) = {$/;"	m
withHeaders	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withHeaders(headers: (String, String)*): A$/;"	m
withHeaders	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withHeaders(headers: (String, String)*): AsyncResult = {$/;"	m
withJsContext	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^  def withJsContext(f: (Context, Scriptable) => Any): Any = {$/;"	m
withJsonBody	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withJsonBody(json: JsValue): FakeRequest[AnyContentAsJson] = {$/;"	m
withJsonBody	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withJsonBody(node: JsValue, _method: String): FakeRequest[AnyContentAsJson] = {$/;"	m
withLang	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withLang(lang: Lang)(implicit app: Application): A = withCookies(Cookie(Play.langCookieName, lang.code))$/;"	m
withMessage	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withMessage(message: String): FormError = FormError(key, message)$/;"	m
withMultipartFormDataBody	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withMultipartFormDataBody(form: MultipartFormData[TemporaryFile]) = {$/;"	m
withNewSession	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withNewSession: A$/;"	m
withNewSession	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withNewSession: AsyncResult = {$/;"	m
withNewSession	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withNewSession: SimpleResult = withSession(Session())$/;"	m
withPrefix	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withPrefix(prefix: String) = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withPrefix(prefix: String): Mapping[B] = {$/;"	m
withPrefix	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withPrefix(prefix: String): Mapping[List[T]] = {$/;"	m
withPrefix	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withPrefix(prefix: String): Mapping[Option[T]] = {$/;"	m
withPrefix	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withPrefix(prefix: String): Mapping[T] = {$/;"	m
withPrefix	framework/src/play/src/main/scala/play/api/data/Form.scala	/^  def withPrefix(prefix: String): Mapping[T]$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping10[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping11[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping12[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping13[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping14[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping15[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping16[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping17[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping18[R, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping2[R, A1, A2] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping3[R, A1, A2, A3] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping4[R, A1, A2, A3, A4] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping5[R, A1, A2, A3, A4, A5] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping6[R, A1, A2, A3, A4, A5, A6] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping7[R, A1, A2, A3, A4, A5, A6, A7] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping8[R, A1, A2, A3, A4, A5, A6, A7, A8] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withPrefix	framework/src/play/src/main/scala/play/core/hidden/ObjectMappings.scala	/^  def withPrefix(prefix: String): ObjectMapping9[R, A1, A2, A3, A4, A5, A6, A7, A8, A9] = addPrefix(prefix).map(newKey => this.copy(key = newKey)).getOrElse(this)$/;"	m
withQueryString	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def withQueryString(parameters: (String, String)*): WSRequestHolder =$/;"	m
withQueryTimeout	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def withQueryTimeout(seconds: Option[Int]): BatchSql = this.copy(sql = sql.withQueryTimeout(seconds))$/;"	m
withQueryTimeout	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def withQueryTimeout(seconds: Option[Int]): SimpleSql[T] = this.copy(sql = sql.withQueryTimeout(seconds))$/;"	m
withQueryTimeout	framework/src/anorm/src/main/scala/anorm/Anorm.scala	/^  def withQueryTimeout(seconds: Option[Int]): SqlQuery = this.copy(queryTimeout = seconds)$/;"	m
withRawBody	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withRawBody(bytes: Array[Byte]): FakeRequest[AnyContentAsRaw] = {$/;"	m
withRequestTimeout	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def withRequestTimeout(timeout: Int): WSRequestHolder =$/;"	m
withRoutes	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  val withRoutes: PartialFunction[(String, String), Handler] = PartialFunction.empty) extends {$/;"	C
withSession	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withSession(newSessions: (String, String)*): FakeRequest[A] = {$/;"	m
withSession	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withSession(session: (String, String)*): A$/;"	m
withSession	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withSession(session: (String, String)*): AsyncResult = {$/;"	m
withSession	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withSession(session: (String, String)*): SimpleResult = withSession(Session(session.toMap))$/;"	m
withSession	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withSession(session: Session): A$/;"	m
withSession	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withSession(session: Session): AsyncResult = {$/;"	m
withSession	framework/src/play/src/main/scala/play/api/mvc/Results.scala	/^  def withSession(session: Session): SimpleResult = {$/;"	m
withTextBody	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withTextBody(text: String): FakeRequest[AnyContentAsText] = {$/;"	m
withTimeout	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def withTimeout(timeout: Int): WSRequestHolder =$/;"	m
withVirtualHost	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    def withVirtualHost(vh: String): WSRequestHolder = {$/;"	m
withXmlBody	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  def withXmlBody(xml: NodeSeq): FakeRequest[AnyContentAsXml] = {$/;"	m
withoutPlugins	framework/src/play-test/src/main/scala/play/api/test/Fakes.scala	/^  val withoutPlugins: Seq[String] = Nil,$/;"	C
wrappedCoffeescriptCompiler	framework/src/sbt-plugin/src/main/scala/coffeescript/CoffeescriptCompiler.scala	/^          val wrappedCoffeescriptCompiler = Context.javaToJS(this, scope)$/;"	C
wrappedLessCompiler	framework/src/sbt-plugin/src/main/scala/less/LessCompiler.scala	/^    val wrappedLessCompiler = Context.javaToJS(this, scope)$/;"	C
write	framework/src/play/src/main/scala/play/core/j/JavaWebSocket.scala	/^        def write(frame: A) {$/;"	m
writeBytes	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def writeBytes(contentType: String): Writeable[Array[Byte]] = Writeable((bs: Array[Byte]) => bs)(contentTypeOfBytes(contentType))$/;"	m
writeBytes	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def writeBytes: Writeable[Array[Byte]] = Writeable.wBytes$/;"	m
writeContent	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def writeContent(mimeType: String)(implicit codec: Codec): Writeable[Content] = Writeable(content => codec.encode(content.body), Some(ContentTypes.withCharset(mimeType)))$/;"	m
writeEmptyContent	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def writeEmptyContent: Writeable[Results.EmptyContent] = writeableOf_EmptyContent$/;"	m
writeFile	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^  def writeFile(path: File, content: String): Unit = Path(path).write(content)$/;"	m
writeFileIfChanged	framework/src/play/src/main/scala/play/api/libs/Files.scala	/^  def writeFileIfChanged(path: File, content: String) {$/;"	m
writeJson	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def writeJson(implicit codec: Codec): Writeable[com.fasterxml.jackson.databind.JsonNode] = Writeable(json => codec.encode(json.toString), Some(ContentTypes.JSON))$/;"	m
writeString	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def writeString(implicit codec: Codec): Writeable[String] = writeString(MimeTypes.TEXT)$/;"	m
writeString	framework/src/play/src/main/scala/play/core/j/JavaResults.scala	/^  def writeString(mimeType: String)(implicit codec: Codec): Writeable[String] = Writeable(s => codec.encode(s), Some(ContentTypes.withCharset(mimeType)))$/;"	m
writer	framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala	/^        val writer = fileWriterMkdirs(file);$/;"	C
writer	framework/src/sbt-plugin/src/main/scala/jscompile/JavascriptCompiler.scala	/^    val writer = new java.io.StringWriter()$/;"	C
writer	framework/src/sbt-plugin/src/main/scala/test/JUnitXmlTestListener.scala	/^        val writer = new PrintWriter(stringWriter)$/;"	C
wsCall	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def wsCall(call: Call)(implicit port: Port): WS.WSRequestHolder = wsUrl(call.url)$/;"	m
wsTimeout	framework/src/play/src/main/scala/play/api/libs/ws/WS.scala	/^    val wsTimeout = playConfig.flatMap(_.getMilliseconds("ws.timeout"))$/;"	C
wsUrl	framework/src/play-test/src/main/scala/play/api/test/Helpers.scala	/^  def wsUrl(url: String)(implicit port: Port): WS.WSRequestHolder = WS.url("http:\/\/localhost:" + port + url)$/;"	m
xml	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def xml(maxLength: Int): BodyParser[NodeSeq] = when($/;"	m
xml	framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala	/^    def xml: BodyParser[NodeSeq] = xml(DEFAULT_MAX_TEXT_LENGTH)$/;"	m
xml	framework/src/play/src/main/scala/play/core/j/JavaParsers.scala	/^  def xml(maxLength: Int): BodyParser[RequestBody] = parse.maxLength(orDefault(maxLength), parse.xml(Integer.MAX_VALUE)).map {$/;"	m
yellow	framework/src/console/src/main/scala/Console.scala	/^  def yellow(str: String): String = if (isANSISupported) (YELLOW + str + RESET) else str$/;"	m
yellow	framework/src/play/src/main/scala/play/utils/Colors.scala	/^  def yellow(str: String): String = if (isANSISupported) (YELLOW + str + RESET) else str$/;"	m
