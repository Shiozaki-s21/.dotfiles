[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "!has('nvim')"
on_i = 1
hook_source = '''
    let g:neocomplete#enable_at_startup = 1
    source ~/.vim/rc/plugins/neocomplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/unite.vim'
if = "!has('nvim')"
on_cmd = 'Unite'
depends = ['neomru.vim']
hook_source = 'source ~/.vim/rc/plugins/unite.rc.vim'
hook_add = '''
    " Prefix key
    nnoremap [unite] <Nop>
    nmap <Space>u [unite]

    " Keymap
    " Current direcotry files
    nnoremap <silent> [unite]<C-p> :<C-u>Unite<Space>file_rec/async:!<CR>
    " Buffer files
    nnoremap <silent> [unite]<C-b> :<C-u>Unite buffer<CR>
    " Grep files
    nnoremap <silent> [unite]<C-g> :<C-u>Unite<Space>grep -buffer-name=search -auto-preview -no-quit -no-empty -resume<CR>
    " Recent files
    nnoremap <silent> [unite]<C-r> :<C-u>Unite file_mru buffer<CR>
    " Yank history
    nnoremap <silent> [unite]<C-y> :<C-u>Unite history/yank<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = ['md', 'markdown']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['md', 'markdown']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'IN3D/vim-raml'
on_ft = ['raml']

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = ['vimproc.vim']
on_ft = ['python']
hook_source = '''
  source ~/.vim/rc/plugins/vimquickrun.rc.vim
'''

# [[plugins]]
# repo = 'neomake/neomake'
# on_ft = ['python']
# hook_source = '''
#     autocmd! BufEnter,BufWritePost * Neomake
#     let g:neomake_python_enabled_makers = ['python', 'flake8']
# '''

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['python', 'javascript', 'html', 'css']
hook_source = '''
    " Appearance
    let g:ale_sign_error = '⨉'
    let g:ale_sign_warning = '⚠'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_sign_column_always = 1

    " Event of lint enter
    let g:ale_lint_on_enter = 0
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 'never'

    " Quickfix and Loclist
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 0
    let g:ale_open_list = 0
    let g:ale_keep_list_window_open = 0

    " Enable linter
    let g:ale_linters = {
    \   'javascript': ['jslint', 'eslint'],
    \   'python': ['flake8'],
    \}

    " Status line status
    let g:airline#extensions#ale#enabled = 1
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

    function! LinterStatus() abort
        let l:counts = ale#statusline#Count(bufnr(''))

        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors

        return l:counts.total == 0 ? 'OK' : printf(
        \   '%dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
    endfunction
    set statusline=%{LinterStatus()}
'''

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
on_ft = ['python']
hook_source = '''
    let g:gen_tags#gtags_auto_gen = 1
'''
